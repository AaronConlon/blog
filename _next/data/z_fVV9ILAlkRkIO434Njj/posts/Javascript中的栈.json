{"pageProps":{"post":{"slug":"Javascript中的栈","contentHtml":"<p><code>栈</code>是一种<code>last in first out</code>先进后出的结构.新添加的元素即为<code>栈顶</code>另一端称为<code>栈底</code>.就像摞起来的书本,先放的在低端,后方的在顶端.</p>\n<blockquote>\n<p>栈常用于保存变量和方法调用记录,在浏览器的浏览历史中也能看到栈的应用.</p>\n</blockquote>\n<p>我们将创建一个<code>基于数组的Stack</code>类来表示栈.并且支持如下四种方法.</p>\n<ul>\n<li>push(): 入栈</li>\n<li>pop(): 出栈</li>\n<li>peek(): 返回栈顶元素</li>\n<li>isEmpty(): 返回是否空栈</li>\n<li>clear(): 清除栈所有元素</li>\n<li>size():返回栈的元素个数</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>.items = []\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">this</span>.items.push(e)\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.pop();\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.items.length - <span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.length === <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">16</span>  }\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.length\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-built_in\">this</span>.items.length = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<p>啊哈,栈如此简单不是吗?通过数组我们可以轻松创建一个<code>栈</code>来满足日常的使用.</p>\n<p>让我们来思考一些问题,如果数据量很大,数组的大部分方法的时间复杂度是 O(n) .如果数组的长度很长,查找数据所需要的时间将会变得很长,而且为了保证数组的有序性,每次访问相同的下标能得到同样的结果(在不改变数组内部结构的情况下),数组占用了<code>更多</code> 的内存空间.</p>\n<p>为了应对这些不足之处,我们可以<code>基于 JavaScript 对象</code>创建一个<code>Stack</code>类.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>.items = {}\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-built_in\">this</span>.size++\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size] = e    \n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size === <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {   \n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-built_in\">this</span>.size--\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-built_in\">this</span>.items = {}\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"lineNumber\">31</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-keyword\">let</span> objString = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-number\">0</span>]}</span>`</span>\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-number\">2</span>; v &#x3C;= <span class=\"hljs-built_in\">this</span>.size; v++</span>)</span> {\n<span class=\"lineNumber\">34</span>      objString += <span class=\"hljs-string\">`, <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.items[v]}</span>`</span>\n<span class=\"lineNumber\">35</span>    }\n<span class=\"lineNumber\">36</span>    <span class=\"hljs-keyword\">return</span> objString\n<span class=\"lineNumber\">37</span>  }\n<span class=\"lineNumber\">38</span>}</code></pre> \n\n<p><code>JavaScript</code>的 class 内的方法和属性是不受保护的,我们没有类似<code>Java</code>的<code>private</code>声明方式,每个人都可以操作我们的内部数据,为了保护内部数据,业界的最佳实践和默认约定是使用下划线命名.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>._items = []\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>._size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<p>如此一来,在其他开发者无意之下,也不会通过<code>items</code>属性破坏栈的内容数据结构.</p>\n<blockquote>\n<p>遵守约定是一种美德不是吗?</p>\n</blockquote>\n<p>可是如果开发者上来就是莽,使用<code>_items</code>,数据依然得不到保护.</p>\n<p><code>ES6</code>新增的<code>Symbol</code>基本类型提供了一种解决方案.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> _items = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'stackItems'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>[_items] = []\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">//</span>\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>然而,这依然无法确保开发者不通过<code>Object.getOwnPropertySymbols</code>方法获取类声明中的所有<code>Symbols</code></p>\n<p>属性.</p>\n<p>不过,我们还有一个解决方案可以使用:<code>ES6:WeakMap</code>.WeakMap 可以存储键值对,键是对象,值可以是任何数据类型.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>()\n<span class=\"lineNumber\">2</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    items.set(<span class=\"hljs-built_in\">this</span>, [])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">const</span> r = items.get(<span class=\"hljs-built_in\">this</span>)\n<span class=\"lineNumber\">8</span>    r.push(e)\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">const</span> r = items.get(<span class=\"hljs-built_in\">this</span>)\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> r.pop()\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">//</span>\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p>并且,目前<code>ECMAScript</code>类属性提案,使用<code>#items = []</code>的私有属性提案已经到达了<code>Stage 3</code>.值得等待.</p>\n<p>以下是各阶段及含义的描述：</p>\n<ul>\n<li>Stage 0/Strawperson： 潜在的可能被纳入规范的一些想法。</li>\n<li>Stage 1/Proposal：为该想法设想一些适用场景，可能的 case。提出解决实现方案以及可能的变更。</li>\n<li>Stage 2/Draft：经过上一步验证讨论后，这一阶段开始起草语言层面的语义语法，准备正式的规范文档。</li>\n<li>Stage 3/Candidate：提案进入到了候选阶段。开始接收一些反馈对提案进行完善。</li>\n<li>Stage 4/Finished：可以被纳入到正式的 ECMAScript 语言规范中了。</li>\n</ul>\n<p>现在我们了解了栈是什么结构,以及通过数组和 JavaScript 对象初步实现了<code>Stack</code>类.接下来我们尝试用<code>Stack</code>解决问题.</p>\n","title":"Javascript中的栈","date":"2020/12/30","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1535191042502-e6a9a3d407e7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1535191042502-e6a9a3d407e7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"首先要明确什么是栈结构,其次是明确如何用数组和类来模拟栈,创建一个具有基本功能的 Stack 类."}},"__N_SSG":true}