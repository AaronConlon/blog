{"pageProps":{"post":{"slug":"HTML浅解","contentHtml":"<p>​\t\t作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？</p>\n<p>​\t\t带着这些疑问，我决定重新学习<code>HTML</code>知识，如何学习？本文将带着疑问去学习<code>HTML</code>相关的知识，并且做出一定的总结。</p>\n<h2>前言</h2>\n<p><strong>HTML</strong>（超文本标记语言），也是万维网的核心标记语言，对于现代浏览器来说，<code>HTML</code>已经发展到了第五个版本，在多年的演变和改进之下，许多不合时宜的内容被清除了，同时随着版本更迭也有新的内容添加进来，作为一个 web 开发者，我们需要紧跟技术的发展，保持前瞻性和技术敏感度。</p>\n<p>知识无限，时间有限。</p>\n<p>忽略掉那些琐碎的片段，我们将从不同的问题开启每一个知识点。</p>\n<h2>Q&#x26;A</h2>\n<h3>1. HTML 和 XML 语法的差别</h3>\n<p>HTML（超文本标记语言）和 XML（可扩展标记语言）结构类似，但是在语法上具有以下不同之处：</p>\n<ul>\n<li>XML 严格区分大小写</li>\n<li>XML 具有严格的树状结构，禁止省略结束标记</li>\n<li>XML 属性值必须用引号包裹起来，而在 HTML 中则是可选的</li>\n<li>XML 所有属性必须具有值，HTML 则允许无值属性（采用默认值）</li>\n<li>XML 解析器不会像 HTML 这样过滤空格</li>\n<li>XML 没有固定的标记标签，所有标签都是自定义可扩展的</li>\n</ul>\n<p>二者在作用上也不同：</p>\n<ul>\n<li>XML 偏向于保存数据，可以被视为持久化结构</li>\n<li>HTML 偏向于描述数据结构</li>\n</ul>\n<p>其他方面：</p>\n<ul>\n<li>在浏览器中，HTML 文件的媒体类型是<code>text/html</code>，而 XML 的媒体类型则是<code>application/xhtml+xml</code>，不同的<code>MIME</code>类型在浏览器中将会以不同的解析器去解析文档。</li>\n</ul>\n<h3>2. 简单快速介绍一下 HTML 的知识</h3>\n<p>从最简单的一份<code>html</code>文档说起：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>></span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"lineNumber\">3</span> <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Sample page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"lineNumber\">5</span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">6</span> <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Sample page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"demo.html\"</span>></span>simple<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span> sample.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">&#x3C;!-- this is a comment --></span>\n<span class=\"lineNumber\">11</span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">12</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre> \n\n<p>如上述示例那样，HTML 文档具有树状结构，每一个节点标签都具备<code>开始标签</code>，但是不一定具有结束标签，标签支持<code>嵌套</code>。</p>\n<p>每个标签都可能有属性和值，举个例子：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"url\"</span>></span>somewhere<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></code></pre> \n\n<p>标签具有各自的意义，属性值总是在<code>开始标签</code>内，并且如果属性值不包含特殊字符，则可以省略引号，但是更推荐保留引号，让整体结构的描述更准确。</p>\n<p>浏览器通过自己的<code>HTML</code>解析器去解析<code>HTML</code>文档，并且将之转换为<code>DOM（文档对象模型）</code>，这种模型将保存在内存中。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/5e1l7FsB24hyqtR.png\" alt=\"image-20210524205054501\"></p>\n<p>上图是上述简单文档的<code>DOM</code>树状图形式，<code>DOM</code>提供了诸多<code>API</code>可以让开发者控制和修改<code>DOM</code>的结构。</p>\n<blockquote>\n<p>我们可以通过：<code>caniuse.com</code>对标签和属性的兼容性进行查询</p>\n</blockquote>\n<p>又绕回来说上述代码，最基础的上述结构中，可以继续延伸了解一下大部分标签。</p>\n<ul>\n<li><code>&#x3C;html></code> 为根元素，页面唯一</li>\n<li><code>&#x3C;head></code> 为头部信息标签，页面唯一，内部常嵌套一些补充信息和标题\n<ul>\n<li><code>&#x3C;meta></code> 元数据，常用于设置字符集，添加相关名字和描述性内容，常用于提高<code>SEO</code></li>\n<li><code>&#x3C;script></code> 引入 JavaScript</li>\n<li><code>&#x3C;title></code> 标题设置</li>\n<li><code>&#x3C;style></code> 嵌入 Css</li>\n<li><code>&#x3C;link></code> 外部资源链接</li>\n<li><code>&#x3C;base></code> 定义页面默认超链接的默认地址和打开方式，建议放在 head 的最前面</li>\n</ul>\n</li>\n<li><code>&#x3C;body></code> 页面主体，页面唯一，常用标签全部嵌套在内部。\n<ul>\n<li><code>&#x3C;h1>~&#x3C;h6></code> 设置标题</li>\n<li><code>&#x3C;p></code> 设置段落文本</li>\n<li><code>&#x3C;a></code> 超链接</li>\n<li><code>&#x3C;pre></code>预格式化</li>\n<li><code>&#x3C;q>,&#x3C;blockquete></code>长短引用内容</li>\n<li><code>&#x3C;br /></code>,<code>&#x3C; hr /></code> 换行标签和水平线标签</li>\n<li><code>&#x3C;b></code> 粗体字</li>\n<li><code>&#x3C;i></code>斜体</li>\n<li><code>&#x3C;iframe></code>内联框架，替换<code>&#x3C;frame></code></li>\n<li><code>&#x3C;cite></code>标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题。默认斜体，引用分离，有助于自动摘录参考的功能。</li>\n<li><code>&#x3C;div></code> 通用块元素</li>\n<li><code>&#x3C;span></code> 内联文本元素</li>\n<li><code>&#x3C;input></code> 输入框\n<ul>\n<li><code>&#x3C;datalist></code> 输入框可选值列表</li>\n</ul>\n</li>\n<li><code>&#x3C;img></code> 图像</li>\n<li><code>&#x3C;map></code> 图像区域映射\n<ul>\n<li><code>&#x3C;area></code> 定义区域位置和映射目标地址</li>\n</ul>\n</li>\n<li><code>&#x3C;figure></code>标记文档中的媒体内容\n<ul>\n<li><code>&#x3C;figcaption></code>媒体的标题，常用于媒体标签的上面或者下面</li>\n</ul>\n</li>\n<li><code>&#x3C;button></code> 按钮</li>\n<li><code>&#x3C;from></code> 表单\n<ul>\n<li><code>&#x3C;fieldset></code> 表单边框\n<ul>\n<li><code>&#x3C;legend></code>表单边框描述，内容标题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&#x3C;video></code> 视频</li>\n<li><code>&#x3C;audio></code> 音频</li>\n<li><code>&#x3C;table></code> 表格\n<ul>\n<li><code>&#x3C;col></code> 配合 <code>&#x3C;colgroup></code>为列添加属性</li>\n<li><code>&#x3C;caption></code> 表格标题</li>\n</ul>\n</li>\n<li><code>&#x3C;address></code> 定义作者地址信息</li>\n<li><code>&#x3C;ul>, &#x3C;ol></code> 有序和无序列表\n<ul>\n<li><code>&#x3C;li></code> 列表项</li>\n</ul>\n</li>\n<li><code>&#x3C;dl></code> 定义列表，增加列表的灵活性\n<ul>\n<li><code>&#x3C;dt></code> 定义列表标题</li>\n<li><code>&#x3C;dd></code> 定义描述，通常在标题下方，并且具有缩进</li>\n</ul>\n</li>\n<li><code>&#x3C;del></code> 被删除的文本</li>\n<li><code>&#x3C;ins></code> 默认下划线，定义插入的行内文本</li>\n<li></li>\n<li><code>&#x3C;details></code> 默认不展开的内容隐藏\n<ul>\n<li><code>&#x3C;summary></code> details 默认显示的描述信息，不支持<code>IE</code></li>\n</ul>\n</li>\n<li><code>&#x3C;header></code> 正文中的标题</li>\n<li><code>&#x3C;nav></code>旨在封装一组链接，常用于导航栏</li>\n<li><code>&#x3C;footer></code> 页脚内容</li>\n<li><code>&#x3C;main></code> 正文主体核心内容区域</li>\n<li><code>&#x3C;article></code> 文章容器</li>\n<li><code>&#x3C;section></code> 相关性内容</li>\n<li><code>&#x3C;aside></code> 侧边区域内容</li>\n<li><code>&#x3C;canvas></code> canvas 图像容器</li>\n<li><code>&#x3C;embed></code> 嵌入页面的元素，外部应用，互动插件等等，本意是不属于当前页面的内容，使用时指定外部资源类型。</li>\n<li><code>&#x3C;diakig></code> 对话框，支持性很差</li>\n<li><code>&#x3C;mark></code> 类似<code>strong</code>，H5 属性且更为通用</li>\n<li><code>&#x3C;meter></code>给定的数据范围度量，需要制定相关属性</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<p>所有<code>HTML</code>短语标签如下：</p>\n<p>| <em>     | 呈现为被强调的文本。                                         |\n| -------- | ------------------------------------------------------------ |\n| <strong> | 定义重要的文本。                                             |\n| <dfn>    | 定义一个定义项目。                                           |\n| <code>   | 定义计算机代码文本。                                         |\n| <samp>   | 定义样本文本。                                               |\n| <kbd>    | 定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。 |\n| <var>    | 定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。    |</p>\n<h3>3. HTML 和语义化有何意义</h3>\n<p>我们知道，<code>HTML</code>标签都具有独特的语义，使用合适的标签来组织整体的结构却不是开发者“必须”去做的一件事，在很多情况下，开发者混用不适宜的标签去达到相同的效果屡见不鲜。</p>\n<p>清晰的语义能带来良好的页面结构，并且非常有利于搜索引擎和网络爬虫解析页面内容，大大提高页面内容的识别准确性，优化<code>SEO</code>让页面得到更好的传播和搜索权重。</p>\n<h3>4. 谈谈 HTML 中的语法错误问题</h3>\n<p>HTML 的语法错误的处理措施非常宽松，某种程度上 HTML 语法的灵活性让错误的语法产生了不完整的行为。</p>\n<p><code>HTML</code>的语法错误在浏览器中是可以被允许的，不良的语法结构将导致 DOM 语法树的结构不够直观。</p>\n<p>来看看如下语法结构：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>She dreamt.\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>She dreamt that she ate breakfast.\n<span class=\"lineNumber\">3</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>Then lunch.\n<span class=\"lineNumber\">4</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>And finally dinner.</code></pre> \n\n<p>浏览器通过解析器解析此结构最终在 DOM 语法树中的结果如下：</p>\n<p><img src=\"https://i.loli.net/2021/05/26/bfOFlSEG73CZqLn.png\" alt=\"image-20210526223813242\"></p>\n<p>也许这与我们的期望相去甚远，原来两层的语法树却形成了多层的嵌套结构，我们可以从中看出几个语法错误的特点：</p>\n<ul>\n<li>HTML 的语法非常宽松，语法错误是可以被允许和正常解析的</li>\n<li>错误的语法将在解析后产生意想不到的 DOM 结构，并且很有可能降低性能</li>\n</ul>\n","title":"HTML浅解","date":"2021/5/24","tags":["HTML"],"mainImg":"https://images.unsplash.com/photo-1621579274840-bd3dc60bf590?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjE3OTA2Njc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1621579274840-bd3dc60bf590?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjE3OTA2Njc&ixlib=rb-1.2.1&q=80&w=400","intro":"作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？"}},"__N_SSG":true}