{"pageProps":{"post":{"slug":"我不知道的yarn与npm","contentHtml":"<p>前几天我的 apple mini 到了,开箱愉快,对着 m1 架构的新设备,一顿操作和配置,其中过程不再细说.在我准备学习<code>electron</code>的时候,我发现我根本不懂<code>npm</code>和<code>yarn</code>,我只是在简单的使用着这哥俩.</p>\n<blockquote>\n<p>这是不行的.</p>\n</blockquote>\n<p><code>npm</code>和<code>yarn</code>都是前端的包管理工具,二者的区别毫无意义,总之一句话\"选择其一作为你的包管理工具\".</p>\n<h3>启程</h3>\n<p><code>npm/yarn init -y</code> 二者都会构建默认的<code>package.json</code>文件,区别在于:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> npm</span>\n<span class=\"lineNumber\">2</span>{\n<span class=\"lineNumber\">3</span>  \"name\": \"test\",\n<span class=\"lineNumber\">4</span>  \"version\": \"1.0.0\",\n<span class=\"lineNumber\">5</span>  \"description\": \"\",\n<span class=\"lineNumber\">6</span>  \"main\": \"index.js\",\n<span class=\"lineNumber\">7</span>  \"scripts\": {\n<span class=\"lineNumber\">8</span>    \"test\": \"echo \\\"Error: no test specified\\\" &#x26;&#x26; exit 1\"\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  \"keywords\": [],\n<span class=\"lineNumber\">11</span>  \"author\": \"\",\n<span class=\"lineNumber\">12</span>  \"license\": \"ISC\"\n<span class=\"lineNumber\">13</span>}\n<span class=\"lineNumber\">14</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> yarn</span>\n<span class=\"lineNumber\">15</span>{\n<span class=\"lineNumber\">16</span>  \"name\": \"test\",\n<span class=\"lineNumber\">17</span>  \"version\": \"1.0.0\",\n<span class=\"lineNumber\">18</span>  \"main\": \"index.js\",\n<span class=\"lineNumber\">19</span>  \"license\": \"MIT\"\n<span class=\"lineNumber\">20</span>}</code></pre> \n\n<h3>提速</h3>\n<p><code>npm</code>和<code>yarn</code>默认都使用官方的源,服务器在国外,速度肯定慢,而且时不时被墙,让人恼火却又无可奈何.如果你善用梯子且梯子牢固稳定当我没说.</p>\n<blockquote>\n<p>国内源:一般是间隔十分钟同步一次国外的源的数据,不支持发布自己的包.</p>\n</blockquote>\n<p>为了提速,有很多方法,比如:</p>\n<ul>\n<li>\n<p>临时提速</p>\n</li>\n<li>\n<p>全局提速</p>\n</li>\n</ul>\n<h4>临时提速</h4>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>npm install axios --registry=https://registry.npm.taobao.org</code></pre> \n\n<h4>全局提速</h4>\n<p>可以全局安装<code>yrm</code>来管理包的源配置.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>npm i -g yrm</code></pre> \n\n<blockquote>\n<p><a href=\"https://github.com/i5ting/yrm\">i5ting/yrm: YARN registry manager, fast switch between different registries: npm, cnpm, nj, taobao</a></p>\n</blockquote>\n<p>行吧,<code>yrm</code>居然是<a href=\"https://github.com/i5ting\">i5ting (狼叔)</a>写的...腾讯开发者大会上聊过,多希望能...停停停.</p>\n<p><code>yrm</code>可以快速切换<code>registry</code>,还能测试各个仓库源的大致速度.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span> ~/p/test yrm test\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>  npm ---- 5264ms\n<span class=\"lineNumber\">4</span>  cnpm --- 893ms\n<span class=\"lineNumber\">5</span>* taobao - 597ms\n<span class=\"lineNumber\">6</span>  nj ----- Fetch Error\n<span class=\"lineNumber\">7</span>  rednpm - Fetch Error\n<span class=\"lineNumber\">8</span>  npmMirror  Fetch Error\n<span class=\"lineNumber\">9</span>  edunpm - Fetch Error\n<span class=\"lineNumber\">10</span>  yarn --- Fetch Error\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span> ~/p/test </code></pre> \n\n<blockquote>\n<p>不太推荐 yrm,只因这货会直接重写当前用户目录下的.yarnrc 和 .npmrc 配置文件.</p>\n</blockquote>\n<p>如果仅仅需要快速换源,确实有用.但是当你用户目录下的配置文件有多个自己常用的配置的时候,就不合适了,毕竟一把梭重写配置文件.</p>\n<h3>纠错</h3>\n<p><code>npm</code>和<code>yarn</code>都支持<code>--verbose</code>输出详细信息,可以发现许多错误.</p>\n<p>这里提一下,有些情况下使用国内的源依然会出现部分下载 404 的情况.当你下载的模块依赖于<code>C++</code>模块需要编译,这时候通过<code>node-gyp</code>来编译,这货第一次编译依赖<code>node</code>源码,默认去<code>nodejs.org/dist</code>下载,一旦你的网络不稳定,还是凉凉.所以,可以在安装的时候指定<code>--disturl</code>,或者在配置文件里配好<code>disturl</code>即可.</p>\n<h3>配置</h3>\n<blockquote>\n<p>tip: 命令行配置默认写入到~/.npmrc</p>\n</blockquote>\n<p>可以直接从<code>cli</code>命令行配置,例如上述的<code>disturl</code>:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>npm config set disturl https://npm.taobao.org/mirrors/node</code></pre> \n\n<p>命令行配置有一个问题,举例:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>npm config set aaa bbb</code></pre> \n\n<p>照样直接写入配置文件并输出设置成功信息...惊了.所以当你把<code>disturl</code>写成<code>disurl</code>,出错也是必然的.</p>\n<p>也可以直接编辑配置文件,配置文件则有多个可以生效.跟很多<code>unix</code>的配置文件的一贯作风一样.如下层级依次生效:</p>\n<ul>\n<li>\n<p>工程内配置文件: <code>/path/to/my/project/.npmrc</code></p>\n</li>\n<li>\n<p>用户级配置文件: <code>~/.npmrc</code></p>\n</li>\n<li>\n<p>全局配置文件: <code>$PREFIX/etc/npmrc</code> (即<code>npm config get globalconfig</code> 输出的路径)</p>\n</li>\n<li>\n<p>npm内置配置文件: <code>/path/to/npm/npmrc</code></p>\n</li>\n</ul>\n<p>我个人用户级配置文件用得多一点,上面提到的<code>yrm</code>也是直接改这个文件的配置.</p>\n<blockquote>\n<p>Package-lock.json?</p>\n</blockquote>\n<p>锁定依赖版本,方便统一协作和后续的依赖安装,别改.</p>\n<h3>代理</h3>\n<p>不谈代理,建议肉身翻走.</p>\n<h3>缓存</h3>\n<p>我使用<code>npm 7.0.15</code>和<code>yarn 1.22.10</code>,安装模块默认就缓存模块到相关的目录下了,下次安装的时候也...默认不会管你的缓存.</p>\n<p><code>npm</code>的缓存机制支持<code>add</code>,<code>clean</code>和<code>verify</code>,前者用于添加和清理缓存,最后用于验证数据有效性,顺便清理垃圾数据.</p>\n<blockquote>\n<p>npm cache add: This command is primarily intended to be used internally by npm, but it can provide a way to add data to the local installation cache explicitly.</p>\n</blockquote>\n<p>即使可以通过<code>npm config get cache</code>得知缓存存放地址(大概位置,内部_cacache 目录一言难尽),也没法看缓存了那些包和版本号等信息,如果你知道请告诉我,多谢.</p>\n<p>于是,我打算以后都用<code>yarn</code>了...</p>\n<p><code>yarn</code>支持:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>yarn cache dir/list/clean</code></pre> \n\n<p>可以看缓存的位置和直接 <code>list</code>包,还能看到版本信息,比较方便.</p>\n<p>利用缓存数据牵扯到包管理的其中一个功能:<code>离线安装</code>.离线安装支持三个选项:</p>\n<ul>\n<li>--prefer-online (default)</li>\n<li>--prefer-offline</li>\n<li>--offline</li>\n</ul>\n<p>如果你之前缓存了部分包,后续还需要在别的<code>project</code>下安装依赖的话.默认走线上优先.三个选项无需解释,如果不指定版本,默认安装最新版.<code>offline</code>选项本地无缓存直接显示失败.</p>\n<h3>发布</h3>\n<p>如果要发布自己的包,则需要注册<code>npmjs</code>账号,并修改<code>registry</code>为默认源.</p>\n<p>如果你发布之后发现有一些细微的修改,需要单独提交单个文件,不好意思不行,只能版本升级:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">#小版本号升级一个版本</span>\n<span class=\"lineNumber\">2</span>npm version patch\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">#中版号升级一个版本</span>\n<span class=\"lineNumber\">4</span>npm version minor\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">#大版本号升级一个版本</span>\n<span class=\"lineNumber\">6</span>npm version major</code></pre> \n\n<p>最后再<code>npm publish</code>.</p>\n<h3>更多参考</h3>\n<ul>\n<li>\n<p><a href=\"https://juejin.cn/post/6844903582337237006#heading-22\">2018 年了，你还是只会 npm install 吗？</a></p>\n</li>\n<li>\n<p><a href=\"https://www.ruanyifeng.com/blog/2016/01/npm-install.html\">npm 模块安装机制简介 - 阮一峰的网络日志</a></p>\n</li>\n<li>\n<p><a href=\"https://www.zoo.team/article/npm-details\">npm 依赖管理中被忽略的那些细节 - 政采云前端团队</a></p>\n</li>\n</ul>\n","title":"我不知道的yarn与npm","date":"2020/12/12","tags":["yarn","npm"],"mainImg":"https://images.unsplash.com/photo-1575325345079-cce3a789be43?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1575325345079-cce3a789be43?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"Js开发避不开的包管理工具选择,谁能更胜一筹?2020年都快结束了我是否还对包管理工具一无所知,不好意思,接下来我选择坚持使用..."}},"__N_SSG":true}