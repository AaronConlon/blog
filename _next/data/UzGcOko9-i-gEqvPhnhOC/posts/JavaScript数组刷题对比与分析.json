{"pageProps":{"post":{"slug":"JavaScript数组刷题对比与分析","content":"\n### Day 1\n\n> [989. 数组形式的整数加法 - 力扣（LeetCode）](https://leetcode-cn.com/problems/add-to-array-form-of-integer/submissions/)\n\n#### 题目描述\n\n对于非负整数 X 而言，X 的数组形式是每位数字按从左到右的顺序形成的数组。例如，如果 X = 1231，那么其数组形式为 [1,2,3,1]。\n\n给定非负整数 X 的数组形式 A，返回整数 X+K 的数组形式。\n\n \n\n##### 示例 1：\n\n```js\n输入：A = [1,2,0,0], K = 34\n输出：[1,2,3,4]\n解释：1200 + 34 = 1234\n```\n\n\n\n##### 思路\n\n- 整数 K 转数组\n- 确定更长的数组,确定遍历最长的数组 A 或者 K 数组\n- 末尾 pop() 相加,控制进位\n- 处理最后的进位,得出结果.\n\n##### 我的代码\n\n```js\n/**\n * @param {number[]} A\n * @param {number} K\n * @return {number[]}\n */\nvar addToArrayForm = function (A, K) {\n  let kArr = [...K.toString()].map(i => ~~i)\n  let {len, maxArr} = kArr.length > A.length ? {len: kArr.length, maxArr: kArr} : {len: A.length, maxArr: A}\n  let carryNum = 0\n  for (let index = 0; index < len; index++) {\n    let lastA = ~~A.pop()\n    let lastK = ~~kArr.pop()\n    let sum = lastA + lastK + carryNum\n    if(sum > 9) {\n      maxArr.unshift(sum - 10)\n      carryNum = 1\n    } else {\n      maxArr.unshift(sum)\n      carryNum = 0\n    }\n  }\n  if(carryNum === 1) maxArr.unshift(1)\n  return maxArr\n}\n```\n\n执行结果,用时太长,在内存控制方面做得还行.**偏向用空间换时间**.\n\n##### 其他人的优秀代码\n\n作者：Shawry14\n链接：https://leetcode-cn.com/problems/add-to-array-form-of-integer/solution/shu-zu-xing-shi-de-zheng-shu-jia-fa-nei-60pm8/\n\n```js\n/**\n * @param {number[]} A\n * @param {number} K\n * @return {number[]}\n */\nvar addToArrayForm = function (A, K) {\n    count = 0;\n    len = K.toString().length;\n    for (let i = 0; i < len; i++) {\n        if (A.length < len) {\n            A.unshift(0);\n        }\n        count = K % 10;\n        K = parseInt(K / 10);\n        A[A.length - 1 - i] += count;\n    }\n    for (let i = 0; i < A.length; i++) {\n        if (A[0] > 9) {\n            A.unshift(0);\n        }\n        if (A[A.length - 1 - i] > 9) {\n            A[A.length - 2 - i]++;\n            A[A.length - 1 - i] = A[A.length - 1 - i] % 10;\n        }\n    }\n    return A;\n};\n```\n\n太恐怖了.\n\n思路清奇,把每一位都当做单独的一个数,从右往左相加.再遍历一次,处理每一位的进位,在遍历+1 的时候提前+1,依次遍历.\n\n最小化内存使用,最小化执行次数.\n\n佩服.\n\n\n\n","title":"JavaScript数组刷题对比与分析.md","date":"2021/2/3","tags":["LeetCode"],"mainImg":"https://images.unsplash.com/photo-1564879730502-08b4d3b312c2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1564879730502-08b4d3b312c2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"参与了一个活动,和两百人一起学习数据结构与算法,一起刷题一起进步.本文记录了我学习数组的时候刷的题目,以及他人优秀的题解."}},"__N_SSG":true}