{"pageProps":{"post":{"slug":"HTML浅解","content":"\n​ 作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？\n\n​ 带着这些疑问，我决定重新学习`HTML`知识，如何学习？本文将带着疑问去学习`HTML`相关的知识，并且做出一定的总结。\n\n## 前言\n\n**HTML**（超文本标记语言），也是万维网的核心标记语言，对于现代浏览器来说，`HTML`已经发展到了第五个版本，在多年的演变和改进之下，许多不合时宜的内容被清除了，同时随着版本更迭也有新的内容添加进来，作为一个 web 开发者，我们需要紧跟技术的发展，保持前瞻性和技术敏感度。\n\n知识无限，时间有限。\n\n忽略掉那些琐碎的片段，我们将从不同的问题开启每一个知识点。\n\n## Q&A\n\n### 1. HTML 和 XML 语法的差别\n\nHTML（超文本标记语言）和 XML（可扩展标记语言）结构类似，但是在语法上具有以下不同之处：\n\n- XML 严格区分大小写\n- XML 具有严格的树状结构，禁止省略结束标记\n- XML 属性值必须用引号包裹起来，而在 HTML 中则是可选的\n- XML 所有属性必须具有值，HTML 则允许无值属性（采用默认值）\n- XML 解析器不会像 HTML 这样过滤空格\n- XML 没有固定的标记标签，所有标签都是自定义可扩展的\n\n二者在作用上也不同：\n\n- XML 偏向于保存数据，可以被视为持久化结构\n- HTML 偏向于描述数据结构\n\n其他方面：\n\n- 在浏览器中，HTML 文件的媒体类型是`text/html`，而 XML 的媒体类型则是`application/xhtml+xml`，不同的`MIME`类型在浏览器中将会以不同的解析器去解析文档。\n\n### 2. 简单快速介绍一下 HTML 的知识\n\n从最简单的一份`html`文档说起：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Sample page</title>\n  </head>\n  <body>\n    <h1>Sample page</h1>\n    <br />\n    <p>This is a <a href=\"demo.html\">simple</a> sample.</p>\n    <!-- this is a comment -->\n  </body>\n</html>\n```\n\n如上述示例那样，HTML 文档具有树状结构，每一个节点标签都具备`开始标签`，但是不一定具有结束标签，标签支持`嵌套`。\n\n每个标签都可能有属性和值，举个例子：\n\n```html\n<a href=\"url\">somewhere</a>\n```\n\n标签具有各自的意义，属性值总是在`开始标签`内，并且如果属性值不包含特殊字符，则可以省略引号，但是更推荐保留引号，让整体结构的描述更准确。\n\n浏览器通过自己的`HTML`解析器去解析`HTML`文档，并且将之转换为`DOM（文档对象模型）`，这种模型将保存在内存中。\n\n![image-20210524205054501](https://i.loli.net/2021/05/24/5e1l7FsB24hyqtR.png)\n\n上图是上述简单文档的`DOM`树状图形式，`DOM`提供了诸多`API`可以让开发者控制和修改`DOM`的结构。\n\n> 我们可以通过：`caniuse.com`对标签和属性的兼容性进行查询\n\n又绕回来说上述代码，最基础的上述结构中，可以继续延伸了解一下大部分标签。\n\n- `<html>` 为根元素，页面唯一\n- `<head>` 为头部信息标签，页面唯一，内部常嵌套一些补充信息和标题\n  - `<meta>` 元数据，常用于设置字符集，添加相关名字和描述性内容，常用于提高`SEO`\n  - `<script>` 引入 JavaScript\n  - `<title>` 标题设置\n  - `<style>` 嵌入 Css\n  - `<link>` 外部资源链接\n  - `<base>` 定义页面默认超链接的默认地址和打开方式，建议放在 head 的最前面\n- `<body>` 页面主体，页面唯一，常用标签全部嵌套在内部。\n  - `<h1>~<h6>` 设置标题\n  - `<p>` 设置段落文本\n  - `<a>` 超链接\n  - `<pre>`预格式化\n  - `<q>,<blockquete>`长短引用内容\n  - `<br />`,`< hr />` 换行标签和水平线标签\n  - `<b>` 粗体\n  - `<small>`小号字体\n  - `<i>`斜体\n  - `<rt>` 中文发音注释，顶部显示\n  - `<sub>`下标\n  - `<sup>` 上标\n  - `<iframe>`内联框架，替换`<frame>`\n  - `<cite>`标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题。默认斜体，引用分离，有助于自动摘录参考的功能。\n  - `<div>` 通用块元素\n  - `<span>` 内联文本元素\n  - `<textarea>` 输入区\n  - `<input>` 输入框\n    - `<datalist>` 输入框可选值列表\n  - `<img>` 图像\n  - `<map>` 图像区域映射\n    - `<area>` 定义区域位置和映射目标地址\n  - `<figure>`标记文档中的媒体内容\n    - `<figcaption>`媒体的标题，常用于媒体标签的上面或者下面\n  - `<button>` 按钮\n  - `<from>` 表单\n    - `<fieldset>` 表单边框\n      - `<legend>`表单边框描述，内容标题\n  - `<video>` 视频\n  - `<audio>` 音频\n    - `<source>` 数据源和媒体类型说明，添加多个备用\n  - `<table>` 表格\n    - `<col>` 配合 `<colgroup>`为列添加属性\n    - `<caption>` 表格标题\n    - `<tbody>` 表格主体\n    - `<td>`表格单元\n    - `<th>` 表头单元格\n    - `<tfoot>`表格脚注\n    - ...\n  - `<address>` 定义作者地址信息\n  - `<ul>, <ol>` 有序和无序列表\n    - `<li>` 列表项\n  - `<dl>` 定义列表，增加列表的灵活性\n    - `<dt>` 定义列表标题\n    - `<dd>` 定义描述，通常在标题下方，并且具有缩进\n  - `<del>` 被删除的文本\n  - `<ins>` 默认下划线，定义插入的行内文本\n  - `<details>` 默认不展开的内容隐藏\n    - `<summary>` details 默认显示的描述信息，不支持`IE`\n  - `<header>` 正文中的标题\n  - `<nav>`旨在封装一组链接，常用于导航栏\n  - `<footer>` 页脚内容\n  - `<main>` 正文主体核心内容区域\n  - `<article>` 文章容器\n  - `<section>` 相关性内容，比如章节、页眉、页脚或文档中的其他部分。\n  - `<aside>` 表示与它周围文本没有密切关系的内容，通常的广告区域、搜索、分享链接。\n  - `<canvas>` canvas 图像容器\n  - `<embed>` 嵌入页面的元素，外部应用，互动插件等等，本意是不属于当前页面的内容，使用时指定外部资源类型。\n  - `<diakig>` 对话框，支持性很差\n  - `<mark>` 类似`strong`，H5 属性且更为通用\n  - `<meter>`给定的数据范围度量，需要制定相关属性\n  - `<output>`表示输出结果的行内元素\n  - `<time>`标注时间\n  - `<datetime>`标注日期\n  - `<progress> `进度条\n  - `<select>` 下拉列表\n    - `<optgroup>` 可选组选项\n      - `<option>` 选项\n\n所有`HTML`短语标签如下：\n\n| <em>     | 呈现为被强调的文本。                                                             |\n| -------- | -------------------------------------------------------------------------------- |\n| <strong> | 定义重要的文本。                                                                 |\n| <dfn>    | 定义一个定义项目。                                                               |\n| <code>   | 定义计算机代码文本。                                                             |\n| <samp>   | 定义样本文本。                                                                   |\n| <kbd>    | 定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。 |\n| <var>    | 定义变量。您可以将此标签与 `<pre>` 及 `<code>` 标签配合使用。                    |\n\n### 3. HTML 和语义化有何意义\n\n我们知道，`HTML`标签都具有独特的语义，使用合适的标签来组织整体的结构却不是开发者“必须”去做的一件事，在很多情况下，开发者混用不适宜的标签去达到相同的效果屡见不鲜。\n\n清晰的语义能带来良好的页面结构，并且非常有利于搜索引擎和网络爬虫解析页面内容，大大提高页面内容的识别准确性，优化`SEO`让页面得到更好的传播和搜索权重。\n\n### 4. 谈谈 HTML 中的语法错误问题\n\nHTML 的语法错误的处理措施非常宽松，某种程度上 HTML 语法的灵活性让错误的语法产生了不完整的行为。\n\n`HTML`的语法错误在浏览器中是可以被允许的，不良的语法结构将导致 DOM 语法树的结构不够直观。\n\n来看看如下语法结构：\n\n```html\n<p>\n  <i\n    >She dreamt.\n    <p>\n      <i\n        >She dreamt that she ate breakfast.\n        <p>\n          <i\n            >Then lunch.\n            <p><i>And finally dinner.</i></p></i\n          >\n        </p></i\n      >\n    </p></i\n  >\n</p>\n```\n\n浏览器通过解析器解析此结构最终在 DOM 语法树中的结果如下：\n\n![image-20210526223813242](https://i.loli.net/2021/05/26/bfOFlSEG73CZqLn.png)\n\n也许这与我们的期望相去甚远，原来两层的语法树却形成了多层的嵌套结构，我们可以从中看出几个语法错误的特点：\n\n- HTML 的语法非常宽松，语法错误是可以被允许和正常解析的\n- 错误的语法将在解析后产生意想不到的 DOM 结构，并且很有可能降低性能\n\n### 5. 简单谈谈你对于 HTML 元标签的理解\n\n`HTML`文档信息可以在其`head`标签内使用`meta`标签进行补充说明，一般的形式是以`key/value`键值对为结构描述关于文档的额外说明。\n\n`<meta>`不支持嵌套，没有闭合标签，其内容不会再页面显示，通常我们会增加一些额外信息描述，这往往有利于搜索引擎和提高`SEO`效率，对于机器是可读的\n\n`meta`的有效属性包含以下四个：\n\n- `name` 属性名\n- `content`属性值\n- `scheme` 指定`content`的格式，但`H5`不支持\n- `http-equiv` 把`content`关联到`HTTP`头部，例如控制页面刷新时间，设置字符集类型和文档类型\n- `charset` 字符集\n\n以下是我们日常工作中可能会用到的键值对数据，。\n\n```html\n<head>\n  <meta name=\"description\" content=\"博客\" />\n  <meta name=\"keywords\" content=\"HTML,CSS,XML,JavaScript\" />\n  <meta name=\"author\" content=\"someone\" />\n  <meta name=\"revised\" content=\"Tutorialspoint, 5/27/2021\" />\n  <meta charset=\"UTF-8\" />\n  <meta http-equiv=\"refresh\" content=\"5; url = https://www.google.com\" />\n</head>\n```\n\n### 6. HTML 无障碍方面有何了解\n\n无障碍设计的目标是让健全或者残疾人，年轻人或老年人都可以平等，便捷地获取站点的服务，增加受益群体。\n\n通常，最大的受益人群是不擅长访问互联网的普通人或者视力障碍用户，甚至是听力、精神、肢体障碍用户。\n\n`W3C`推动了无障碍化实施规范，主要的辅助即使包括硬件放大镜或者软件放大镜，盲文显示器和读屏软件等。\n\n在开发的时候，可以采用可读性高的设计方案，甚至是对比度高的字体和图片等。另外，编写语义化的`HTML`将会对屏幕阅读器非常友好。\n\n在时间充分的情况下，建议遵循`WAI-ARIA`规范或者[IBM 无障碍化网站开发检查项(IBM Web accessibility checklist – Version 5.2 )](http://www-03.ibm.com/able/guidelines/web/accessweb.html)进行开发。\n\n在测试的时候，可以使用`webking`静态检测工具进行测试。\n\n### 7. 关于 HTML 注释的知识点\n\n对于任何语言来说，注释都是很有必要的，在浏览器中注释将会被忽略，但是对于复杂的页面来说，必要的注释能让阅读源码的人提高阅读效率。\n\n`HTML`使用`<!-- ... -->`作为注释标签（注意，边界不能有多余的空格，否则注释将被视为普通字符串），注释可以跨行。\n\n还有一种注释被称为条件注释：`<!--[if IE 8]> ... <![endif]-->`，这种注释在`IE`中能被有效识别，在其他浏览器中被忽略，因此尝尝被用于为`IE`浏览器设置兼容性属性。\n\n> `<comment>`标签内部也可以被视为注释（IE 浏览器有效），但是在`HTML5`中已经无效\n\n在一些旧浏览器中，依然支持如下两种注释：\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Commenting Style Sheets</title>\n    <style>\n      <!-- .example {\n        border: 1px solid #4a7d49;\n      }\n      //-->\n    </style>\n    <script>\n      <!--\n      document.write(\"Hello World!\");\n      //-->\n    </script>\n  </head>\n\n  <body>\n    <div class=\"example\">Hello , World!</div>\n  </body>\n</html>\n```\n\n但是在现代浏览器中，上述`JS`和`CSS`部分注释都无效。\n\n### 8. 对于 img 标签的理解\n\n`img`标签必须设置`src`和`alt`属性，添加具有实际意义的`alt`属性可以让页面更友好。\n\n`img`是替换内联元素，可以理解为`inline-block`。\n\n可以提前为`img`标签添加`width`和`height`属性值和对齐方向属性`align`(H5 已弃用)，如此一来在加载过程中也能具有稳定的宽高显示，从而保证页面的稳定。如果要实现固定的宽高比，自适应宽高比，则可以预设宽高值之一为固定值，另一个为`auto`。\n\n> `img`此类自闭合标签是无法在内部嵌套子元素的，因此也就没法使用伪类`::before`和`::after`\n\n`img`标签的事件监听如下：\n\n- `onload`: 图像顺利加载完成\n- `onerror`: 图像资源 404、403、500、请求超时或者返回的资源不是有效的图片\n- `onabort`: 图像加载被强制停止，例如主动点击浏览器`stop`按钮\n\n`HTML5`的趋势之一，就是减少元素标签的属性值，关于样式的部分尽可能使用`CSS`文件来描述。\n\n另外，`img`支持`usemap`属性，配合`map`标签内嵌`area`可以实现点击图片不同区域跳转到不同的目标区域或者地址的功能。\n\n### 9. 列举几个 HTML 最佳实践\n\n- 编写有效可读的`DOM`\n  - 全部小写\n  - 保持缩进\n  - 自动关闭标签\n  - 避免过渡注释\n  - 组织`DOM`，尽量减少元素\n- 尽量不使用内联样式和内联脚本，内联的样式必须是关键样式（渲染页面顶部所需的最小 CSS 集）\n- 将脚本标签放在 body 底部\n- 照顾无障碍用户，使用意义明确的标签和描述性属性值\n- 正确使用 title 和 meta 标签，增强`SEO`\n- 压缩文件和使用`CDN`加速\n- 对数据交互进行验证，永远不要相信用户的输入，提高应用的安全性\n\n### 10. 谈谈你所理解的 table 标签\n\n曾经开发者们使用表格进行布局，现在`table`标签更纯粹了，绝大多数用来展示表格数据。\n\n表格允许开发者们将图片、图像、链接等数据排列到单元格的行和列中。\n\n一个表格标签，内部嵌套着行盒子`tr`(table row)和单元格`td`。如果有必要，可以添加一行`th`表格列标题。\n\n甚至是使用`thead`、`tbody`、`tfoot`将整体结构拆开：\n\n```html\n<table>\n  <thead>\n    <tr>\n      <th>Month</th>\n      <th>Savings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>January</td>\n      <td>$100</td>\n    </tr>\n    <tr>\n      <td>February</td>\n      <td>$80</td>\n    </tr>\n  </tbody>\n  <tfoot>\n    <tr>\n      <td>Sum</td>\n      <td>$180</td>\n    </tr>\n  </tfoot>\n</table>\n```\n\n表格标签支持多属性控制样式，但是推荐使用`CSS`控制样式。\n\n### 11. 关于列表\n\n列表分为三种：\n\n- 有序列表 `ol`\n- 无序列表`ul`\n- 自定义列表 `dl`\n\n而非自定义列表项则统一使用`li`,列表可以使用类型属性`type`和排序起始属性`start`控制列表项前面的标志。\n\n自定义列表则使用`dt`作为列表标题，`dd`作为列表项，且默认存在缩进。\n\n如果需要对列表前的类型样式做修改，则可以使用`list-style-type`设置浏览器默认支持的几个元素。\n\n如果需要自定义样式，则可以配合伪类`::marker`使用。\n\n甚至只要是`display: list-item`且可内嵌子元素的标签，都支持左边自定义一个显示顺序内容，合理使用`counter()`可以为多个项设置计算后的顺序前缀内容，这对于创建菜单序号和级联序号非常有用。\n\n### 12. 超链接\n\n超链接可以在用户点击链接后进行当前页面跳转或打开新的标签页进行跳转，为用户提供不同站点之间的导航功能，开发者可以通过`a`标签创建超链接，点击超链接后的行为取决于 `a`标签的`target`属性值。\n\n可以为`target`设置以下几个不同属性值：\n\n- `_blank`：在新的浏览器标签页打开链接的地址\n- `_self`：在相同的`frame`内打开链接地址（默认值）\n- `_parent`：在父级`frame`打开链接地址\n- `_top`：在当前标签顶层`body`下打开链接地址（chrome 将会提示离开当前页面）\n- `targetframe`：在目标`frame`内打开链接地址\n\n除了作为导航外，还可以实现下载功能：\n\n```html\n<a href=\"large.jpg\" download>下载</a>\n```\n\n> IE 不支持`dowload`属性\n\n提供一个`download`属性让浏览器处理下载功能，并且可以为`download`属性提供值作为下载的文件名。\n\n但是此方案在跨域场景下各厂家实现区别很大，因此不同源的方案不如使用`download.js`这个第三方库。\n\n另外，我们在使用邮件类型的地址的时候，需要为`href`属性值之前添加协议类型：`mailto:`，例如：\n\n```html\n<a href=\"mailto: abc@example.com\">Send Email</a>\n```\n\n浏览器对此链接的点击行为做出反应，调用默认的邮件处理程序预置目标邮件地址，并且可以在`mail`地址后添加参数，邮件处理程序会解析类似`主题`或`body`的预置内容。\n\n### 13. Frames\n\n浏览器可以通过创建不同的`Frame`分割视图区域，并且每个`Frame`有单独的`HTML`结构，浏览器标签所有的`Frame`的集合被称为`frameset`。\n\n> `frameset`代替`body`标签，定义页面的行与列的布局。\n\n这种技术的缺点也很明显：\n\n- 小屏幕设备显示功能效果不好，难以让分割视图的特性发挥效果。\n- 不同分辨率的终端显示效果可能不同\n- 浏览器的返回按钮可能会出乎意料，甚至无法实现用户想要的效果\n- 少数浏览器不支持此标签\n- 跨`Frame`通信较为复杂\n\n示例:\n\n```html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML Frames</title>\n  </head>\n\n  <frameset cols=\"25%,50%,25%\">\n    <frame name=\"left\" src=\"https://www.baidu.com\" />\n    <frame name=\"center\" src=\"https://www.baidu.com\" />\n    <frame name=\"right\" src=\"https://www.baidu.com\" />\n\n    <noframes>\n      <body>\n        Your browser does not support frames.\n      </body>\n    </noframes>\n  </frameset>\n</html>\n```\n\n还有一个标签：`iframe`也是提供一个内嵌的`frame`功能，不过它可以脱离`frameset`使用，更具有灵活性。\n\n这种技术的应用较为少见，请谨慎使用（笔者在广告功能中常能见到其踪影）。\n\n### 14. 字体滚动\n\n`marquee`的兼容性良好，但是此元素已经不再推荐使用，规范随时可能删除此标签，开发者们更应该通过`CSS`动画来实现文字滚动。\n\n### 15. HTML 通用属性\n\n> 在 base、head、html、meta、param、script、style、title 元素上无效\n\nH5 之前有五个除了上述几个元素外其他所有元素共有的可用属性：\n\n- class\n- id\n- style\n- title\n- tabindex\n- accesskey\n\n前四者较为常用，后两者却容易被忽视。`tabindex`属性用于获取或指定当前元素的`tab`键激活顺序，其值范围为：`0~32767`。\n\n如果不设置，则默认值是 0，并且按出现顺序进行跳转，但是可以设置值为`-1`，使得元素不能被`TAB`键访问，如果某些元素是隐藏的，在其未显示之前不应该被`TAB`键访问到，因此可以设置`tabindex=-1`。\n\n> 如果为`div`设置了`tabindex`，则其内部嵌套的元素如果没有设置`tabindex`，则无法通过方向键跳转。\n\n如果针对某些元素设置了`tabindex`，则`tab`键将从大到小进行跳转，慎用此特性以免给惯用快捷键访问的用户造成困扰，但如果良好地设计`tabindex`，则可以提供良好的无障碍访问功能。\n\n同样的，`accesskey`也容易被人忽略，即使其功能强大。\n\n我们可以为元素设置`accesskey`的值，然后通过不同系统的浏览器快捷键+此属性的值进行快速访问。\n\n![image-20210616060934949](https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-20210616060934949.png)\n\n> [HTML accesskey 属性与 web 自定义键盘快捷访问 « 张鑫旭-鑫空间-鑫生活](https://www.zhangxinxu.com/wordpress/2017/05/html-accesskey/comment-page-1/#comment-414139)\n\n如果你喜欢`vimium`的功能，我猜这个属性的功能能够让你很开心。但是很多应用都没有使用到这个属性，这是无障碍访问功能的一部分，常常被人忽视，使其看起来犹如屠龙之技。\n\n并且不同浏览器之间快捷键不同，对于元素的交互行为也不一样，这两个缺陷使其应用性大打折扣。浏览器快捷键和操作系统之间的影响可以从上图中看出端倪，而行为上的不一致，最简明的例子就是`IE`浏览器和`chrome`浏览器之间对`<a>`元素的行为不一致。前者只是让其获得焦点，后者却可以触发点击行为。\n\n[accesskey - npm](https://www.npmjs.com/package/accesskey)这里有一个支持增强`accesskey`功能和处理一致性行为的第三方库，或许以后用得上。\n\n> 不过话说回来，这个属性提醒了我可以在`electron`技术上使用这个功能，这样就可以减少使用系统快捷键绑定的逻辑代码。\n\n`HTML5`版本出来之后，新增了部分全局属性：\n\n- contenteditable：是否可编辑\n- Data-\\*：自定义的元素数据存储，可以配合`JavaScript`或者`CSS`属性选择器使用\n- draggable：实验中的属性，是否可以拖动\n- dropzone：较为少见的属性，不如使用此名第三方库（[dropzone/dropzone: Dropzone is an easy to use drag'n'drop library. It supports image previews and shows nice progress bars.](https://github.com/dropzone/dropzone)）\n- hidden：常用\n- spellcheck：拼写检查，也是实验中的功能\n\n### 16. 字体知识\n\n字体是相对于操作系统而言的，不同操作系统默认支持某些特定的字体，因此在样式表中我们可以指定多种字体以支持不同的操作系统，如果没有指定字体，则使用系统默认的字体。\n\nCSS 定义了 5 个常用的字体名称: ` serif, ``sans-serif, ``monospace `, `cursive,`和 `fantasy. `这些都是非常通用的，当使用这些通用名称时，使用的字体完全取决于每个浏览器，而且它们所运行的每个操作系统也会有所不同。\n\n示例样式如下：\n\n```css\np {\n  font-family: \"Trebuchet MS\", Verdana, sans-serif;\n}\n```\n\n提供了三种字体，前面的优先，如果系统不支持此字体则一次往后递增，最后使用默认字体。\n\n我们可以使用`@font-face`自定义字体：\n\n```css\n@font-face {\n    font-family: <fontFamily>; /* 自定义的字体名称; */\n    src: <source> [<format>][,<source> [<format>]]*;  /* 自定义的字体的存放路径、格式; */\n    [font-weight: <weight>]; /*  是否为粗体 */\n    [font-style: <style>]; /*  定义字体样式，如斜体 */\n}\n```\n\n字体具有不同的格式，源文件格式可能会是：\n\n- .tff\n- .otf\n\n前者字体格式值为`TrueType`，后者为`OpenType`，甚至还有：\n\n- Embedded Open Type (.eot)\n- Web Open Font Format (.woff)\n\n为了保证兼容性，可以同时提供多种自定义字体：\n\n```css\n@font-face {\n  font-family: \"myFont\";\n  src: url(\"myFont.eot\"); /* IE9 Compat Modes */\n  src: url(\"myFont.eot?#iefix\") format(\"embedded-opentype\"), /* IE6-IE8 */\n      url(\"myFont.woff\") format(\"woff\"); /* Modern Browsers */\n}\n```\n\n自定义字体的另一个广泛使用案例：`图标字体`。\n\n![image-20210618003909597](https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-20210618003909597.png)\n\n图标字体可以很方便的配合伪类使用，并且非常灵活，开发者可以轻松修改其颜色和大小等。另外，兼容性很好，在某些需要兼容`IE`的项目中可以放心使用。\n\n使用图标字体还有以下几个优点：\n\n- 轻松替换\n- 不会失真\n- 便捷，可压缩\n","title":"HTML浅解","date":"2021/5/24","tags":["HTML"],"mainImg":"https://images.unsplash.com/photo-1446057032654-9d8885db76c6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzk4NTM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1446057032654-9d8885db76c6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzk4NTM&ixlib=rb-1.2.1&q=80&w=400","intro":"作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？"}},"__N_SSG":true}