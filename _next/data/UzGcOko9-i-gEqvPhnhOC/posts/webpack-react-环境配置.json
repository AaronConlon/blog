{"pageProps":{"post":{"slug":"webpack-react-环境配置","content":"\n这份配置包括以下几点：\n\n- babel presets\n- webpack dev server\n- Hot module replacement\n- miniCssExtractPlugin\n- postCss\n- Eslint autofix + Prettier\n\n## 初始化\n\n```bash\nyarn init -y\nyarn add react react-dom\nyarn add -D webpack webpack-cli webpack-dev-server@next\n// init webpack config\nnpx webpack init\n```\n\n根据需求填写交互，最后得到配置文件`webpack.config.js`:\n\n```js\n// Generated using webpack-cli https://github.com/webpack/webpack-cli\n\nconst path = require(\"path\");\nconst HtmlWebpackPlugin = require(\"html-webpack-plugin\");\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\");\n\nconst isProduction = process.env.NODE_ENV == \"production\";\nconst stylesHandler = MiniCssExtractPlugin.loader;\nconst config = {\n  entry: \"./src/index.js\",\n  output: {\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  devServer: {\n    open: true,\n    host: \"localhost\",\n    hot: true,\n  },\n  plugins: [\n    new HtmlWebpackPlugin({\n      template: \"index.html\",\n    }),\n\n    // Add your plugins here\n    // Learn more about plugins from https://webpack.js.org/configuration/plugins/\n  ],\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/i,\n        loader: \"babel-loader\",\n      },\n      {\n        test: /\\.s[ac]ss$/i,\n        use: [stylesHandler, \"css-loader\", \"postcss-loader\", \"sass-loader\"],\n      },\n      {\n        test: /\\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i,\n        type: \"asset\",\n      },\n\n      // Add your rules for custom modules here\n      // Learn more about loaders from https://webpack.js.org/loaders/\n    ],\n  },\n};\n\nmodule.exports = () => {\n  if (isProduction) {\n    config.mode = \"production\";\n\n    config.plugins.push(\n      new MiniCssExtractPlugin({\n        filename: \"css/[name].[hash].css\",\n      })\n    );\n  } else {\n    config.mode = \"development\";\n  }\n  return config;\n};\n```\n\n顺利安装后，我们就实现了需求，来分析分析这份配置文件：\n\n- 根据 node 环境设置开发模式\n- 使用`miniCssExtractPlugin`来单独提取`css`文件\n- 使用`babel`处理`js`文件\n- 自动配置`postCss`支持厂商前缀自动修复\n- 安装`prettier`格式化代码，保证代码风格\n- 默认初始化`scripts`，支持开发模式切换\n- 支持`sass`的开发和编译\n\n这是最基础的功能，`webpack-cli`就能很好的支持到。\n\n接下来就是配置`babel`相关的特性，为了支持`react`的`jsx`写法，需要使用`@babel/preset-react`的功能：\n\n首先务必安装`balel`一系列的包，并且配置好`.babelrc`:\n\n```bash\nyarn add @babel/core @babel/preset-env @babel/preset-react babel-loader\n```\n\n`.babelrc`:\n\n```js\n{\n    \"plugins\": [\"@babel/syntax-dynamic-import\"],\n    \"presets\": [\n        [\n            \"@babel/preset-env\",\n            {\n                \"useBuiltIns\": \"usage\",\n                \"corejs\": {\n                  \"version\": \"3.16\",\n                  \"proposals\": false,\n                },\n            }\n        ],\n        \"@babel/preset-react\"\n    ]\n}\n```\n\n`@babel/preset-env`还要注意的一个点是代码预置需要一个`targets`，用于指定代码预置的目标，例如我们只需要支持到最新版本的`chrome`，我们可以通过`.browserslistrc`配置文件设置，`webpack-cli`会读取这个文件的配置，并且此文件还可以和多个库协作，例如`postcss`等第三方库都能无缝使用其配置。\n\n如果不配置，则使用默认值。`npx browserslist 'default'`能够查看当前版本的默认值：\n\n```bash\nand_chr 92\nand_ff 90\nand_qq 10.4\nand_uc 12.12\nandroid 92\nbaidu 7.12\nchrome 92\nchrome 91\nchrome 90\nedge 92\nedge 91\nfirefox 90\nfirefox 89\nfirefox 78\nie 11\nios_saf 14.5-14.7\nios_saf 14.0-14.4\nkaios 2.5\nop_mini all\nop_mob 64\nopera 77\nopera 76\nsafari 14.1\nsafari 14\nsafari 13.1\nsamsung 14.0\nsamsung 13.0\n```\n\n详情可查看[browserslist/browserslist: Share target browsers ... - GitHubhttps://github.com › browserslist › browserslist](https://github.com/browserslist/browserslist)。\n\n如此一来，我们便将代码预置环境和`polyfill`配置好了。\n\n`@babel/preset-env`的`polyfill`方案会污染全局环境，并且相关的`helper`函数复用较差导致打包体积较大，但是由于目前并不需要开发库，因此在这里就不细究`@babel/plugin-transform-runtime`了。\n\n## 代码检查\n\n代码检查包括语法检查和代码风格检查，`eslint`负责主要语法检查，并且在代码风格方面使用`airbnb`的规范的同时，与`prettier`冲突的部分由`prettier`的规则决定。\n\n最后，在代码提交之前进行`prettier`代码格式化。\n\n首先来看看`prettier`和`eslint`的配置文件：\n\n```js\n// prettier\nmodule.exports = {\n  semi: true,\n  singleQuote: true,\n};\n\n// eslint\nmodule.exports = {\n  env: {\n    browser: true,\n    es2021: true,\n  },\n  extends: [\"plugin:react/recommended\", \"airbnb\", \"prettier\"],\n  parserOptions: {\n    ecmaFeatures: {\n      jsx: true,\n    },\n    ecmaVersion: 12,\n    sourceType: \"module\",\n  },\n  plugins: [\"react\"],\n  rules: {\n    \"no-console\": \"off\",\n    \"react/jsx-filename-extension\": [1, { extensions: [\".js\", \".jsx\"] }],\n  },\n};\n```\n\n`.eslintrc.js`是通过`npx eslint --init`创建的，只是添加了`eslint-config-prettier`来消除`eslint`和`prettier`的冲突。\n\n如此一来，代码在编辑的时候就能够支持到自动格式化和错误提示了。\n\n补充一点，使用`stylelint`来规范我们的`sass`样式表。\n\n首先需要安装：\n\n`yarn add -D stylelint stylelint-scss`\n\n针对性的，目前我只需要写一些单独的`sass`文件，因此只需要使用此插件来实现代码风格检查，如果后续需要写`styled-component`，则可以寻找其扩展。\n\n另外，依然推荐使用[hudochenkov/stylelint-order: A plugin pack of order related linting rules for stylelint.](https://github.com/hudochenkov/stylelint-order)这个语法排序的插件，能够让我们的代码保持顺序和提高可读性，另外顺序的规则最好配合[ream88/stylelint-config-idiomatic-order: stylelint + idiomatic-css = ❤️](https://github.com/ream88/stylelint-config-idiomatic-order)使用。\n\n最后，为了让`prettier`格式化的时候不跟`stylelint`冲突，我们需要：[prettier/stylelint-config-prettier: Turns off all rules that are unnecessary or might conflict with prettier.](https://github.com/prettier/stylelint-config-prettier)的支持，在`.stylelintrc`中添加最后一个扩展配置。\n\n## Git 提交\n\n最后是`在 git 提交之前格式化代码，并且规范化 git info body`。\n\n我们将使用`lint-staged`和`husky`来实现这个需求。\n\n一把梭：\n\n`npx mrm@2 lint-staged`可以根据我们已经配置好的各种`linter`的配置，生成`package.json`中的`lint-staged`配置，调用各种`linter`去处理目标文件。\n\n最后，还需要引入`commitlint`来规范提交的`git`信息。\n\n全局安装好这个非常有用的工具，并且初始化一份简单的配置文件：\n\n```bash\n// install package\nnpm install -g @commitlint/cli @commitlint/config-conventional\n// init config\necho \"module.exports = {extends: ['@commitlint/config-conventional']}\" > commitlint.config.js\n```\n\n最后，我们手动添加一个`commitlint`的`hooks`:\n\n```bash\n# Add hook\nnpx husky add .husky/commit-msg 'npx --no-install commitlint --edit $1'\n# or\nyarn husky add .husky/commit-msg 'yarn commitlint --edit $1'\n```\n\n## 优化\n\n- Friendly-errors-webpack-plugin 优化输出信息\n- [gitignore.io - 为你的项目创建必要的 .gitignore 文件](https://www.toptal.com/developers/gitignore)\n- 其他\n","title":"webpack-react-环境配置","date":"2021/8/8","tags":["工程化"],"mainImg":"https://images.unsplash.com/photo-1603302576837-37561b2e2302?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mjg0MTc2NjE&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1603302576837-37561b2e2302?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mjg0MTc2NjE&ixlib=rb-1.2.1&q=80&w=400","intro":"一份手动配置的 react 开发环境配置记录📝。"}},"__N_SSG":true}