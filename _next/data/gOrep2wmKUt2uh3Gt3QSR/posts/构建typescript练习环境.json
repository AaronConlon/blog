{"pageProps":{"post":{"slug":"构建typescript练习环境","contentHtml":"<p>我试着缩小解决的问题的范围,不要考虑\"太多细节\",即使这些本来就没有什么细节,但是从我的水平来说,也许需要减小一些范围,以至于我能够快速处理问题,并且有一些思考和成果.</p>\n<p>今天的问题是,如何使用<code>webpack</code>构建一个<code>typescript</code>联系环境,并且通过将<code>typescript</code>代码转为<code>ES6</code>的<code>JavaScript</code>代码,且运行环境是<code>node</code>.</p>\n<h1>实践</h1>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\"># 当前处于 test 目录</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\"># 初始化 package.json</span>\n<span class=\"lineNumber\">3</span>yarn init -y\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\"># 创建文件和目录</span>\n<span class=\"lineNumber\">5</span>mkdir src\n<span class=\"lineNumber\">6</span>touch src/index.ts\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\"># 本地安装 webpack</span>\n<span class=\"lineNumber\">8</span>yarn add -D webpack webpack-cli\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\"># 安装 typescript</span>\n<span class=\"lineNumber\">10</span>yarn add -D typescript\n<span class=\"lineNumber\">11</span><span class=\"hljs-comment\"># eslint</span>\n<span class=\"lineNumber\">12</span>yarn add -D eslint\n<span class=\"lineNumber\">13</span><span class=\"hljs-comment\"># eslint init,npx 调用本地安装的 eslint</span>\n<span class=\"lineNumber\">14</span>npx eslint --init\n<span class=\"lineNumber\">15</span>✔ How would you like to use ESLint? · style\n<span class=\"lineNumber\">16</span>✔ What <span class=\"hljs-built_in\">type</span> of modules does your project use? · esm\n<span class=\"lineNumber\">17</span>✔ Which framework does your project use? · none\n<span class=\"lineNumber\">18</span>✔ Does your project use TypeScript? · No / Yes\n<span class=\"lineNumber\">19</span>✔ Where does your code run? · browser, node\n<span class=\"lineNumber\">20</span>✔ How would you like to define a style <span class=\"hljs-keyword\">for</span> your project? · guide\n<span class=\"lineNumber\">21</span>✔ Which style guide <span class=\"hljs-keyword\">do</span> you want to follow? · airbnb\n<span class=\"lineNumber\">22</span>✔ What format <span class=\"hljs-keyword\">do</span> you want your config file to be <span class=\"hljs-keyword\">in</span>? · JavaScript\n<span class=\"lineNumber\">23</span>Checking peerDependencies of eslint-config-airbnb-base@latest\n<span class=\"lineNumber\">24</span>The config that you<span class=\"hljs-string\">'ve selected requires the following dependencies:\n<span class=\"lineNumber\">25</span> \n<span class=\"lineNumber\">26</span>@typescript-eslint/eslint-plugin@latest eslint-config-airbnb-base@latest eslint@^5.16.0 || ^6.8.0 || ^7.2.0 eslint-plugin-import@^2.22.1 @typescript-eslint/parser@latest\n<span class=\"lineNumber\">27</span>✔ Would you like to install them now with npm? · No / Yes\n<span class=\"lineNumber\">28</span>Installing @typescript-eslint/eslint-plugin@latest, eslint-config-airbnb-base@latest, eslint@^5.16.0 || ^6.8.0 || ^7.2.0, eslint-plugin-import@^2.22.1, @typescript-eslint/parser@latest\n<span class=\"lineNumber\">29</span> \n<span class=\"lineNumber\">30</span>added 99 packages in 5s\n<span class=\"lineNumber\">31</span> \n<span class=\"lineNumber\">32</span>29 packages are looking for funding\n<span class=\"lineNumber\">33</span>  run `npm fund` for details\n<span class=\"lineNumber\">34</span>Successfully created .eslintrc.js file in /Users/yi/test\n<span class=\"lineNumber\">35</span># 现在初始化完成,自动生成了 eslint 的配置文件 .eslintrc.js</span></code></pre> \n\n<p>现在,来直接写一个<code>webpack</code> 配置文件,不使用 webpack cli 初始化配置文件是因为我想通过自己写一个来加深印象,并且不使用默认的<code>ts-loader</code>处理 <code>typescript</code>代码.</p>\n<p><strong>我想用 swc-loader</strong>.</p>\n<p>当我开始创建并且编辑这个 js 配置文件的时候,我发现<code>eslint</code>已经开始审查这个文件了.</p>\n<p>于是我在<code>package.json</code>里添加了<code>eslintIgnore</code>字段选项,不检查<code>js</code>文件:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"yi\"</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">\"description\"</span>: <span class=\"hljs-string\">\"typescript enviroument\"</span>,\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"./src/index.ts\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-comment\">// something</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">\"eslintIgnore\"</span>: [\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-string\">\"*.js\"</span>\n<span class=\"lineNumber\">12</span>  ]\n<span class=\"lineNumber\">13</span>}\n<span class=\"lineNumber\">14</span></code></pre> \n\n<p>继续编写<code>webpack</code>配置文件:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// webpack.config.js</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"development\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/index.ts\"</span>,\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attr\">output</span>: {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'dist'</span>),\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[contenthash].bundle.js'</span>,\n<span class=\"lineNumber\">10</span>  },\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attr\">module</span>: {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-attr\">rules</span>: [\n<span class=\"lineNumber\">13</span>      {\n<span class=\"lineNumber\">14</span>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.ts$/</span>,\n<span class=\"lineNumber\">15</span>        exclude: <span class=\"hljs-string\">'/node_modules/'</span>,\n<span class=\"lineNumber\">16</span>        <span class=\"hljs-attr\">use</span>: {\n<span class=\"lineNumber\">17</span>          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'swc-loader'</span>,          \n<span class=\"lineNumber\">18</span>          <span class=\"hljs-attr\">options</span>: {\n<span class=\"lineNumber\">19</span>            <span class=\"hljs-attr\">sync</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">20</span>            <span class=\"hljs-attr\">jsc</span>: {\n<span class=\"lineNumber\">21</span>              <span class=\"hljs-attr\">parser</span>: {\n<span class=\"lineNumber\">22</span>                <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">'typescript'</span>\n<span class=\"lineNumber\">23</span>              }\n<span class=\"lineNumber\">24</span>            }\n<span class=\"lineNumber\">25</span>          }\n<span class=\"lineNumber\">26</span>        }\n<span class=\"lineNumber\">27</span>      }\n<span class=\"lineNumber\">28</span>    ]\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span>}</code></pre> \n\n<p>如上配置指定<code>swc-loader</code>处理<code>ts</code>文件,并且解析语法是<code>typescript</code>.</p>\n<p>接下来,<code>swc-loader</code>使用的是<code>swc</code>去将<code>ts</code>代码转成<code>JavaScript</code>代码,首先需要安装这些必要的库.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>yarn add -D @swc/core swc-loader</code></pre> \n\n<p>现在,继续更新<code>webpack.config.js</code>文件内容:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"yi\"</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"typescript enviroument\"</span>,\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-string\">\"main\"</span>: <span class=\"hljs-string\">\"./src/index.ts\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-string\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-string\">\"devDependencies\"</span>: {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-string\">\"@swc/core\"</span>: <span class=\"hljs-string\">\"^1.2.47\"</span>,\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-string\">\"@typescript-eslint/eslint-plugin\"</span>: <span class=\"hljs-string\">\"^4.14.1\"</span>,\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-string\">\"@typescript-eslint/parser\"</span>: <span class=\"hljs-string\">\"^4.14.1\"</span>,\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-string\">\"typescript\"</span>: <span class=\"hljs-string\">\"^4.1.3\"</span>,\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-string\">\"eslint\"</span>: <span class=\"hljs-string\">\"^7.19.0\"</span>,\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-string\">\"eslint-config-airbnb-base\"</span>: <span class=\"hljs-string\">\"^14.2.1\"</span>,\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-string\">\"eslint-plugin-import\"</span>: <span class=\"hljs-string\">\"^2.22.1\"</span>,\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-string\">\"swc-loader\"</span>: <span class=\"hljs-string\">\"^0.1.12\"</span>,\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-string\">\"webpack\"</span>: <span class=\"hljs-string\">\"^5.19.0\"</span>,\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-string\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^4.4.0\"</span>\n<span class=\"lineNumber\">18</span>  },\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-string\">\"scripts\"</span>: {\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-string\">\"dev\"</span>: <span class=\"hljs-string\">\"webpack --config webpack.config.js\"</span>\n<span class=\"lineNumber\">21</span>  },\n<span class=\"lineNumber\">22</span>  <span class=\"hljs-string\">\"eslintIgnore\"</span>: [\n<span class=\"lineNumber\">23</span>    <span class=\"hljs-string\">\"*.js\"</span>\n<span class=\"lineNumber\">24</span>  ]\n<span class=\"lineNumber\">25</span>}</code></pre> \n\n<p>当我构建的时候发现没有清除旧的打包文件,于是想到两个办法:</p>\n<ul>\n<li>在 scripts 中使用 <code>rm -rf dist</code>作为<code>webpack</code>命令前置命令,删掉<code>dist</code>目录</li>\n<li>使用 <code>clean-webpack-plugin</code>插件.</li>\n</ul>\n<p>于是选用插件方案,因为<code>windows</code>下无法使用 shell 命令删除<code>dist</code>目录,<code>scripts</code>是为<code>Unix</code>系统准备的.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>yarn add -D clean-webpack-plugin</code></pre> \n\n<p>接着,修改<code>webpack.config.js</code>文件:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> { CleanWebpackPlugin } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'clean-webpack-plugin'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">\"development\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">\"./src/index.ts\"</span>,\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attr\">output</span>: {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'dist'</span>),\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'[contenthash].bundle.js'</span>,\n<span class=\"lineNumber\">10</span>  },\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">\"source-map\"</span>, <span class=\"hljs-comment\">// 还加了 source-map,不过也许用不上</span>\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-attr\">module</span>: {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-attr\">rules</span>: [\n<span class=\"lineNumber\">14</span>      {\n<span class=\"lineNumber\">15</span>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.ts$/</span>,\n<span class=\"lineNumber\">16</span>        exclude: <span class=\"hljs-string\">'/node_modules/'</span>,\n<span class=\"lineNumber\">17</span>        <span class=\"hljs-attr\">use</span>: {\n<span class=\"lineNumber\">18</span>          <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">'swc-loader'</span>,          \n<span class=\"lineNumber\">19</span>          <span class=\"hljs-attr\">options</span>: {\n<span class=\"lineNumber\">20</span>            <span class=\"hljs-attr\">sync</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">21</span>            <span class=\"hljs-attr\">jsc</span>: {\n<span class=\"lineNumber\">22</span>              <span class=\"hljs-attr\">parser</span>: {\n<span class=\"lineNumber\">23</span>                <span class=\"hljs-attr\">syntax</span>: <span class=\"hljs-string\">'typescript'</span>\n<span class=\"lineNumber\">24</span>              }\n<span class=\"lineNumber\">25</span>            }\n<span class=\"lineNumber\">26</span>          }\n<span class=\"lineNumber\">27</span>        }\n<span class=\"lineNumber\">28</span>      }\n<span class=\"lineNumber\">29</span>    ]\n<span class=\"lineNumber\">30</span>  },\n<span class=\"lineNumber\">31</span>  <span class=\"hljs-attr\">plugins</span>: [\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-keyword\">new</span> CleanWebpackPlugin(),\n<span class=\"lineNumber\">33</span>  ]\n<span class=\"lineNumber\">34</span>}</code></pre> \n\n<p>现在,已经可以将<code>ts</code>文件打包成<code>js</code>文件了,但是还有几个问题需要解决:</p>\n<ul>\n<li>typescript 代码的配置,我想使用<code>ECMAScript</code>比较新的语法,编辑器无法给出提示,并且报错指出方法不存在.</li>\n<li>typescript 代码提示语法风格问题,有一些是我不想遵循 Airbnb 的风格的部分.</li>\n<li>我想在保存的时候,编辑器自动格式化并且修复代码风格的问题.</li>\n<li>swc编译的JavaScript 文件是 es5 的内容,我不管 IE 浏览器是什么东西,只要能在新版的chrome 浏览器上运行就好,或者在较新的 nodejs 上运行良好就行.</li>\n</ul>\n<h1>解疑</h1>\n<blockquote>\n<p><code>tsconfig.json</code>文件中指定了用来编译这个项目的根文件和编译选项。</p>\n</blockquote>\n<p>第一个问题,直接在根目录创建<code>tsconfig.json</code>文件,作为 typescript 的配置文件,增加指定 <code>target</code>的配置项.</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"esnext\"</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"removeComments\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">5</span>  },\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">\"exclude\"</span>: [\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-string\">\"node_modules\"</span>\n<span class=\"lineNumber\">8</span>  ],\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attr\">\"include\"</span>: [<span class=\"hljs-string\">\"src/*.ts\"</span>]\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>关于<code>typescript</code>代码的针对性配置都在这里.这个知识点真的非常复杂的感觉,想要深入了解需要时间.</p>\n<p>我看到<code>swc</code>核心开发者大佬说移植了<code>tsc</code>,因为原来的<code>tsc</code>太慢.所以,具体如何编译<code>ts</code>代码,是否沿用<code>tsconfig.json</code>的所有配置,我不清楚,如果你知道的话,请告诉我,非常感谢.</p>\n<p>第二个问题比较简单,来看看<code>.eslintrc.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">env</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">es2021</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">node</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">6</span>  },\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attr\">extends</span>: [\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-string\">'airbnb-base'</span>,\n<span class=\"lineNumber\">9</span>  ],\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'@typescript-eslint/parser'</span>,\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attr\">parserOptions</span>: {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">12</span>,\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>,\n<span class=\"lineNumber\">14</span>  },\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-attr\">plugins</span>: [\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-string\">'@typescript-eslint'</span>,\n<span class=\"lineNumber\">17</span>  ],\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-attr\">rules</span>: {\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-string\">\"no-console\"</span>: <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">20</span>  },\n<span class=\"lineNumber\">21</span>};</code></pre> \n\n<p>这是我根据<code>eslint init</code>生成的,话说回来,想要使用自定义的额外规则,只需要在<code>rules</code>内逐一添加即可.</p>\n<p>例如,默认 Airbnb 对 console.log 代码会警告,可以如上所述,取消警告.</p>\n<p>第三个问题,首先要理解编辑器插件:<code>ESLint</code>插件的作用是让开发者在编码的过程中发现问题,而不是在执行中发现问题,<code>eslint</code>包如果不执行<code>cli</code>命令,是无法报告和修复不合规范的代码的.</p>\n<p><code>ESLint</code>插件可以.</p>\n<p>首先保证安装好<code>ESLint</code>插件,并且安装好<code>ESLint</code>包,无论是本地还是全局,插件通过<code>eslint</code>包和配置文件去调用<code>cli</code>进行代码规范设置和修复.</p>\n<blockquote>\n<p>Integrates <a href=\"http://eslint.org/\">ESLint</a> into VS Code. If you are new to ESLint check the <a href=\"http://eslint.org/\">documentation</a>.</p>\n<p>The extension uses the ESLint library installed in the opened workspace folder. If the folder doesn't provide one the extension looks for a global install version. If you haven't installed ESLint either locally or globally do so by running <code>npm install eslint</code> in the workspace folder for a local install or <code>npm install -g eslint</code> for a global install.</p>\n<p>On new folders you might also need to create a <code>.eslintrc</code> configuration file. You can do this by either using the VS Code command <code>Create ESLint configuration</code> or by running the <code>eslint</code> command in a terminal. If you have installed ESLint globally (see above) then run <a href=\"http://eslint.org/docs/user-guide/command-line-interface\"><code>eslint --init</code></a> in a terminal. If you have installed ESLint locally then run <a href=\"http://eslint.org/docs/user-guide/command-line-interface\"><code>.\\node_modules\\.bin\\eslint --init</code></a> under Windows and <a href=\"http://eslint.org/docs/user-guide/command-line-interface\"><code>./node_modules/.bin/eslint --init</code></a> under Linux and Mac.</p>\n</blockquote>\n<p>上述文章中已经安装了<code>package</code>,设置了<code>.eslintrc.js</code>配置文件,接着需要打开<code>vscode</code>的个人<code>settings.json</code>配置文件,添加一下配置:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>    <span class=\"hljs-attr\">\"[typescript]\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"editor.formatOnSave\"</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-comment\">// 保存后格式化</span>\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"editor.autoIndent\"</span>: <span class=\"hljs-string\">\"full\"</span>,\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">\"editor.codeActionsOnSave\"</span>: {\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-attr\">\"source.fixAll\"</span>: <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 全局修复</span>\n<span class=\"lineNumber\">7</span>    },\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-comment\">// 默认格式化工具</span>\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-attr\">\"editor.defaultFormatter\"</span>: <span class=\"hljs-string\">\"dbaeumer.vscode-eslint\"</span>\n<span class=\"lineNumber\">10</span>  },\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p>自此,保存代码后就能根据<code>eslint</code>配置文件进行格式化和修复,对于懒癌晚期开发者来说实在是太有用了.</p>\n<blockquote>\n<p>对于部分不想要使用 eslint 配置的代码,可以使用 eslint 的注释指明不需要 eslint 规范化.</p>\n</blockquote>\n<p>例如:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// eslint-disable-line</span></code></pre> \n\n<p>上述配置则不会强制以分号结尾,如果你的配置是必须分号结尾的话.更多注释看这里: <a href=\"https://eslint.org/docs/user-guide/configuring/configuration-files#configuration-file-formats\">Configuration Files - ESLint - Pluggable JavaScript linter</a>.</p>\n<p>最后一个问题是我觉得对新手朋友来说非常迷惑的一个问题.</p>\n<p>为了前端兼容环境,我们经常需要做非常多的配置,自动添加<code>polyfill</code>代码来让不支持新方法和通用规范的部分环境(浏览器)在一份源码下有一致的表现.</p>\n<p>拿<code>css</code>举例,由于老旧浏览器不支持一些新的<code>css</code>方法,之前我们需要手动添加浏览器前缀,于是我们可能会使用<code>postcss</code>和<code>autoprefixer</code>等方案去自动化实现一些需求.</p>\n<p>而<code>JavaScript</code>方面,臭名昭著的<code>IE</code>浏览器,尤其是旧版本的<code>IE</code>浏览器对许多新规范并不支持,或者说根本就不打算支持.</p>\n<blockquote>\n<p>无所谓.</p>\n<p>微软服务将告别其古老的IE浏览器，在2021年8月17日停止对其365个应用程序的IE 11支持，同时也将在2021年3月9日结束对其legacy Edge浏览器的支持。</p>\n</blockquote>\n<p><a href=\"https://github.com/browserslist/browserslist\">browserslist/browserslist: 🦔 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env</a>是一个解决方案.</p>\n<p>可以创建其配置文件,或者在<code>package.json</code>中添加<code>browerslist</code>字段去设定支持范围,前端工具链大多数都愿意直接使用这里的指定环境去做一些自定义的代码注入和设置修改.</p>\n<p>关键还是看各个开发者是如何规范自己的行为.</p>\n<p><code>swc</code>这里遵循<code>babel</code>的方案,实现了可以用来对比的效果.</p>\n<p>但是在根据使用的新语法进行自动导入<code>polyfill</code>方面依然有待加强,目前需要开发者手动根据使用的新语法在入口文件处统一导入<code>polyfill</code>,依然不够.</p>\n<p>当前任务只是设置目标环境为<code>ES6</code>,因此设置 <code>target</code>为新版本即可.</p>\n<h1>Prettier 增强</h1>\n<p>由于<code>Airbnb JavaScript style guide</code>重点关注代码质量,而在代码风格方面关注度就降低了,于是<code>Prettier</code>趁虚而入说了句\"这个我擅长\".</p>\n<p>二者其实依然有重合冲突的部分,为了让二者协调规范,需要使用<code>eslint-config-prettier</code>禁用掉跟<code>prettier</code>冲突的部分.</p>\n<p>安装<code>package</code>:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>yarn add -D eslint-plugin-perttier</code></pre> \n\n<p>只需要让<code>eslint-config-prettier</code>放在<code>extends</code>的末尾,由于执行顺序的关系就可以实现禁用冲突的部分.</p>\n<p>看看<code>eslintrc.js</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">env</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">browser</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">es2021</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">node</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">6</span>  },\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attr\">extends</span>: [\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-string\">'airbnb-base'</span>,\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-string\">'plugin:prettier/recommended'</span>\n<span class=\"lineNumber\">10</span>  ],\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attr\">parser</span>: <span class=\"hljs-string\">'@typescript-eslint/parser'</span>,\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-attr\">parserOptions</span>: {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-attr\">ecmaVersion</span>: <span class=\"hljs-number\">12</span>,\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-attr\">sourceType</span>: <span class=\"hljs-string\">'module'</span>,\n<span class=\"lineNumber\">15</span>  },\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-attr\">plugins</span>: [\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-string\">'@typescript-eslint'</span>,\n<span class=\"lineNumber\">18</span>  ],\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-attr\">rules</span>: {\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-string\">\"no-console\"</span>: <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">21</span>  },\n<span class=\"lineNumber\">22</span>};</code></pre> \n\n<h1>参考阅读</h1>\n<ul>\n<li><a href=\"https://segmentfault.com/a/1190000018013282\">vscode中的 jsconfig.json - SegmentFault 思否</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000009077086\">使用 VSCode + ESLint 实践前端编码规范 - SegmentFault 思否</a></li>\n<li><a href=\"https://github.com/browserslist/browserslist\">browserslist/browserslist: 🦔 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env</a></li>\n<li><a href=\"https://eslint.org/docs/user-guide/getting-started\">Getting Started with ESLint - ESLint - Pluggable JavaScript linter</a></li>\n<li><a href=\"https://swc.rs/\">Configuring swc | swc</a></li>\n<li><a href=\"https://babeljs.io/docs/en/babel-preset-env#corejs\">@babel/preset-env · Babel</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/80574300\">搞懂 ESLint 和 Prettier - 知乎</a></li>\n</ul>\n","title":"构建typescript练习环境","date":"2021/1/31","tags":["typescript","eslint"],"mainImg":"https://images.unsplash.com/photo-1610609130068-99e276e85734?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1610609130068-99e276e85734?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"让我缩小处理的问题的范畴,从构建一个能将 typescript 代码转化为 JavaScript 代码的环境,并且支持 eslint 代码检查和使用 Airbnb 的风格编写代码."}},"__N_SSG":true}