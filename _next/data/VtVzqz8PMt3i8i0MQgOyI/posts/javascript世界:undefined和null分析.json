{"pageProps":{"post":{"slug":"javascript世界:undefined和null分析","contentHtml":"<p>许多编程语言都有<code>空</code>的概念,并使用<code>null</code>关键字表示它,表示这个变量当前并未存在指向,换句话也可以说是这个变量未初始化.</p>\n<p>但是在<code>JavaScript</code>的世界里,存在着两种<code>空</code>的表示方法:<code>undefined</code>和<code>null</code>.本文简单描述了它们的区别以及各自适宜的使用场景.</p>\n<h1>1. Undefined vs. null</h1>\n<p>两个关键字都很常用,并且在许多场景下可以相互替换.因此,它们之间的差异是非常微妙的.</p>\n<h2>1.1 ECMAScript 关于二者的定义</h2>\n<ul>\n<li>undefined 在未分配变量的时候使用</li>\n<li>null 在变量未分配值的时候使用,表示故意缺少任何对象值,其值不存在.</li>\n</ul>\n<p>接下来将配合一些代码进行说明.</p>\n<h2>1.2 两个\"空值\"和一个错误</h2>\n<blockquote>\n<p>JavaScript 的创建者 Brendan Eich: 在 JavaScript 中具有两个\"空值\"的表示是一种设计错误.</p>\n</blockquote>\n<p>之所以不将其中之一从<code>JavaScript</code>世界中抹去,其原因是 JavaScript 遵守一个设计准则: <code>始终不破坏向前兼容性</code>.</p>\n<p>这个准则有许多好处,但是最大的坏处就是无法修复设计错误.</p>\n<h2>1.3 undefined 和 null 的历史</h2>\n<p>在<code>Java</code>的世界里,成员变量中,引用类型的变量初始化的时候默认值<code>null</code>,每一种原始类型则有自己独特的初始值,比如<code>int</code>类型的初始值是 0.</p>\n<p>在<code>JavaScript</code>的世界里,每个变量可以同时包含<code>对象值</code>和<code>原始值</code>.因此,如果<code>null</code>表示对象值,其值为<code>空</code>,则JavaScript 需要一个原始值来表示一种未定义的状态值.这个<code>未定义的值(原始值)</code>就是<code>undefined</code>.</p>\n<h2>2. undefined 出现场景</h2>\n<p>如果一个变量没有被初始化,则其具有原始值<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> foo;\n<span class=\"lineNumber\">2</span>assert.equal(foo, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果一个对象的属性某个属性没有申明,则其原始值为<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {};\n<span class=\"lineNumber\">2</span>assert.equal(obj.name, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果一个函数未指定返回值,或者不存在<code>return</code>关键字,则默认返回<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"lineNumber\">2</span>assert.equal(foo(), <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">far</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">return</span>;\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span>assert.equal(far(), <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果调用函数的时候,未提供函数定义时声明的参数,并且未指定默认值的时候,参数具有原始值<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">2</span>  assert.equal(value, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>以及<code>ES2020</code>新增的<code>Optional chaining</code>语法,默认返回值是<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {};\n<span class=\"lineNumber\">2</span>obj?.prop <span class=\"hljs-comment\">// undefined</span></code></pre> \n\n<h2>3. null 出现场景</h2>\n<h1>6. 参考</h1>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\">undefined与null的区别 - 阮一峰的网络日志(评论更精彩)</a></li>\n<li><a href=\"https://2ality.com/2021/01/undefined-null-revisited.html#occurrences-of-null-in-the-language\"><code>undefined</code> vs. <code>null</code> revisited</a></li>\n</ul>\n","title":"javascript世界:undefined和null分析","date":"2021/3/3","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1614103192137-835c33cd0685?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1614103192137-835c33cd0685?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"在 JavaScript 的世界里,存在着许多值得深入探讨和学习的知识,今天先来看看 undefined 和 null 的特性和对比."}},"__N_SSG":true}