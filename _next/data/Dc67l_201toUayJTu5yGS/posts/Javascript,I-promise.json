{"pageProps":{"post":{"slug":"Javascript,I-promise","contentHtml":"<p>2015年，<code>ECMAScript</code>新增了一个<code>Promise</code>对象，用于表示一个<code>异步操作</code>的最终完成（失败）及其结果的值。</p>\n<p>感谢<code>Promise</code>，让开发者们多了一种选择，让不喜欢回调模式的开发者们从回调的泥沼中挣脱出来。</p>\n<p>今天，我们一起来学习一下以下内容：</p>\n<ul>\n<li>函数回调</li>\n<li>Promise 浅析</li>\n<li>Async / await</li>\n<li>Promise Third Library</li>\n<li>实现一个 <code>MiniPromise</code></li>\n</ul>\n<h1>1. 回调</h1>\n<p>JavaScript 语言为了让部分任务按异步的方式进行，提供了编写<code>回调函数</code>的方法，让某些任务在达成一些条件之后再执行开发者指定的<code>回调函数</code>。</p>\n<p>举两个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// browser</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">4</span>}, <span class=\"hljs-number\">1000</span>)\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// nodejs</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"lineNumber\">8</span>fs.readFile(<span class=\"hljs-string\">'filename'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =></span> {\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">11</span>})\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// more</span>\n<span class=\"lineNumber\">13</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)</code></pre> \n\n<p>如上所示，要么延迟执行回调，要么读取文件后执行回调，二者都不会立即执行从而阻塞主线程，而是各自具有自己的执行条件，满足条件后放入任务循环队列中等待主线程空闲才得以取出并执行。</p>\n<p>上述回调函数在某些场景下曾让开发者写出如下类型的代码：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>\n<span class=\"lineNumber\">2</span>fs.readFile(<span class=\"hljs-string\">'file1.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>)</span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">5</span>  fs.readFile(<span class=\"hljs-string\">'file2.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">8</span>    fs.readFile(<span class=\"hljs-string\">'file3.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">10</span>      <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">11</span>      fs.readFile(<span class=\"hljs-string\">'file4.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">12</span>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">14</span>      });\n<span class=\"lineNumber\">15</span>    });\n<span class=\"lineNumber\">16</span>  });\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<p>为什么会这样？因为某些场景下需要对异步操作进行排序，需要保证运行逻辑具有一定的顺序，并且还需要对每一个回调进行错误处理。</p>\n<p>上述案例省略了真实的逻辑代码，我们可以看出这种回调的嵌套让代码很容易失控，并且难以阅读和维护。</p>\n<p>无论是写下这段代码的人还是阅读这段代码的人都被其所\"折磨\"，江湖人称<code>“回调地狱”</code>。</p>\n<p>即使我们将之摊开，为每一个回调函数都编写一个具名的独立函数来调用，依然可读性不佳：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>fs.readFile(<span class=\"hljs-string\">'file1.txt'</span>, step1);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">6</span>  fs.readFile(<span class=\"hljs-string\">'file2.txt'</span>, step2)\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">11</span>  fs.readFile(<span class=\"hljs-string\">'file3.txt'</span>, step3)\n<span class=\"lineNumber\">12</span>}\n<span class=\"lineNumber\">13</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step3</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">16</span>  fs.readFile(<span class=\"hljs-string\">'file4.txt'</span>, step4)\n<span class=\"lineNumber\">17</span>}\n<span class=\"lineNumber\">18</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step4</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">21</span>}</code></pre> \n\n<p>这些独立函数的命名也许会让开发者觉得非常不适，为了展开层层嵌套，我们编写了许多几乎不会被<code>重用</code>的函数，即使现代编辑器在代码跳转的功能上非常方便，阅读此类代码的时候依然会让我们不断的转移视线。</p>\n<blockquote>\n<p>“懒惰”使人进步。</p>\n</blockquote>\n<p>使用<code>Promise</code>,可以避免此类问题，显著减少编码量，提高代码的可读性。</p>\n<h1>2. Promise 体系</h1>\n<blockquote>\n<p>IE 浏览器不支持<code>Promise</code>,我们可以使用<code>es-promise</code>等第三方库.</p>\n</blockquote>\n<h2>2.1 promise 实例和状态转换</h2>\n<p>使用<code>new</code>实例化的<code>Promise</code>对象具有三种状态:</p>\n<ul>\n<li><code>Fulfilled</code> - <code>has resolution</code>: resolve 成功,调用 <code>onFulfilled</code>函数</li>\n<li><code>Rejected</code> - <code>has rejection</code>: reject, 调用<code>onRejected</code>函数</li>\n<li><code>Pending</code> - <code>unresolved</code>: 初始化状态</li>\n</ul>\n<blockquote>\n<p>短横线左边是<code>Promise/A+</code>术语,而右边则是<code>ES6 Promise</code>术语.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-1582215000590-ffa807c19d5f6959de485fc66664e123.png\" alt=\"\"></p>\n<p>初始状态为<code>pending</code>,转为<code>Fulfilled</code>或者<code>Rejected</code>之后不会再有变化.<code>Fulfilled</code>和<code>Rejected</code>状态也被称为<code>Settled</code>。</p>\n<p><code>Promise</code>的状态流转并不复杂，但是我们需要注意其中一些细节。</p>\n<blockquote>\n<p>本文不会对<code>promise</code>做面面俱到的介绍,推荐阅读官方文档.</p>\n</blockquote>\n<p>首先,我们来创建一个<code>promise</code>实例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 实例化</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// 实例状态变更，设置值</span>\n<span class=\"lineNumber\">6</span>    resolve(value) <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">7</span>    resolve(...) <span class=\"hljs-comment\">// 忽略</span>\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>  \treject(reason) <span class=\"hljs-comment\">// failure</span>\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>})\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// 链式调用，实例方法 then 返回一个新的实例</span>\n<span class=\"lineNumber\">13</span>promise\n<span class=\"lineNumber\">14</span>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">15</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">16</span>  })\n<span class=\"lineNumber\">17</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">18</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">19</span>  })\n<span class=\"lineNumber\">20</span>\t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =></span> {\n<span class=\"lineNumber\">21</span>  \t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">22</span>  })\n<span class=\"lineNumber\">23</span>\t.finally(<span class=\"hljs-function\">() =></span> {})</code></pre> \n\n<p>上述示例展示了<code>promise</code>的一些特性，如实例化、状态转换赋值、链式调用和异常处理，下面我们会讲到静态方法和实例方法。</p>\n<h2>2.1 Promise 构造器</h2>\n<p>我们通过<code>new Promise(executor)</code>实例化一个<code>promise</code>的时候,其状态为<code>pending</code>.在实例化的时候传入一个函数<code>executor</code>函数去变更实例的状态和值.</p>\n<p>上述代码的片段：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 实例化</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// 实例状态变更，设置值</span>\n<span class=\"lineNumber\">6</span>    resolve(value) <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">7</span>    resolve(...) <span class=\"hljs-comment\">// 忽略</span>\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>  \treject(reason) <span class=\"hljs-comment\">// failure</span>\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>})</code></pre> \n\n<p>需要关注以下几点：</p>\n<ul>\n<li><code>Executor</code>函数的参数没有限制，但是<code>Promise</code>的机制将会为<code>Executor</code>函数传入两个函数：<code>resolve</code>和<code>reject</code>，因此我们得以显示转换<code>Promise</code>实例的状态，设置其值。传入的<code>Executor</code>函数的形参建议直接命名为<code>resolve</code>和<code>resolve</code>，当然开发者可以任意命名，甚至不设置形参（这也意味着此实例的状态不会改变，这也写并没有什么意义）。</li>\n<li><code>resolve</code>和<code>reject</code>函数的实参可以是不同类型的值，但是会被进一步处理。也就是说，显示转换状态设置值的时候，传入的参数不一定会直接作为<code>settled</code>状态的值。</li>\n</ul>\n<p>我们来看看给<code>resolve</code>函数传入以下三种不同的值会有怎样的结果。</p>\n<ul>\n<li>原始类型值</li>\n<li>Promise 实例</li>\n<li>thenable 对象</li>\n</ul>\n<p>首先是<code>原始类型值</code>：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Symbol</span>())\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// resolve(1)</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// resolve('1')</span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-comment\">// resolve(null)</span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-comment\">// resolve(undefined)</span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-comment\">// resolve(1n)</span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-comment\">// resolve(true)</span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-comment\">// reject 也是如此</span>\n<span class=\"lineNumber\">10</span>})\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>， v);\n<span class=\"lineNumber\">14</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i);\n<span class=\"lineNumber\">16</span>})</code></pre> \n\n<p>经过测试，原始类型数据传入<code>resolve</code>函数，都能顺利将状态转为<code>fulfilled</code>并且设置为当前状态下的值。使用<code>reject</code>函数则将状态转为<code>rejected</code>,值则是原始类型的值。</p>\n<p>其次，来看看传入<code>Promise</code>对象。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">3</span>})\n<span class=\"lineNumber\">4</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, v);\n<span class=\"lineNumber\">6</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i)\n<span class=\"lineNumber\">8</span>})\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">10</span>resolve <span class=\"hljs-number\">1</span></code></pre> \n\n<p><code>then</code>方法接收到的<code>v</code>并不是一个<code>fulfilled</code>状态的<code>Promise</code>实例，而是<code>1</code>。</p>\n<p>如果传给<code>resolve</code>函数的是一个<code>rejected</code>状态的<code>Promise</code>实例，如下：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">3</span>})\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">5</span>reject <span class=\"hljs-number\">1</span></code></pre> \n\n<p>在某些特殊场景下，我们可能会<code>resolve</code>一个<code>Promise</code>实例，这时候传入的<code>Promise</code>实例的状态和值将会设置当前<code>Promise</code>实例的状态和值。</p>\n<blockquote>\n<p>具有<code>then</code>方法的对象称为<code>thenable</code>对象，<code>Promise</code>实例对象也是一种<code>thenable</code>对象。</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'youyi'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this is then'</span>, <span class=\"hljs-built_in\">arguments</span>);\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>](<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">9</span>  resolve(obj)\n<span class=\"lineNumber\">10</span>})\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, v);\n<span class=\"lineNumber\">14</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i)\n<span class=\"lineNumber\">16</span>})\n<span class=\"lineNumber\">17</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">18</span><span class=\"hljs-built_in\">this</span> is then [Arguments] {\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-string\">'0'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)],\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-string\">'1'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)]\n<span class=\"lineNumber\">21</span>}\n<span class=\"lineNumber\">22</span>resolve <span class=\"hljs-number\">1</span></code></pre> \n\n<p><code>executor</code>内<code>resolve</code>一个<code>thenable</code>对象，则会将<code>then</code>方法视作一个<code>executor</code>，在其内部可以显示编写<code>resolve</code>和<code>reject</code>的逻辑来改变整个<code>Promise</code>实例的状态和值。</p>\n<h2>2.2 Promise 实例方法</h2>\n<p><code>Promise</code>实例有三个实例方法：</p>\n<ul>\n<li><code>then</code></li>\n<li><code>catch</code></li>\n<li><code>finally</code></li>\n</ul>\n<blockquote>\n<p>重申：<code>promise</code>实例的状态转换是单向的,一旦<code>settled</code>则不可逆转,同时我们可以多次利用此<code>settled</code>状态的实例。</p>\n</blockquote>\n<p>让我们来写一个示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve ,reject</span>) =></span> resolve(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">2</span>  .then(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span>);\n<span class=\"lineNumber\">4</span>  })\n<span class=\"lineNumber\">5</span>  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'2'</span>, v);\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'my error'</span>)\n<span class=\"lineNumber\">8</span>  })\n<span class=\"lineNumber\">9</span>  .then(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'3'</span>);\n<span class=\"lineNumber\">11</span>  })\n<span class=\"lineNumber\">12</span>  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'catch any error'</span>);\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// 或者 return Promise.resolve(4)</span>\n<span class=\"lineNumber\">15</span>  })\n<span class=\"lineNumber\">16</span>  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'4'</span>, v);\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>\n<span class=\"lineNumber\">19</span>  })\n<span class=\"lineNumber\">20</span>  .finally(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'finally'</span>);\n<span class=\"lineNumber\">22</span>  })\n<span class=\"lineNumber\">23</span>  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =></span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>, v);\n<span class=\"lineNumber\">25</span>  })\n<span class=\"lineNumber\">26</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">27</span><span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">28</span><span class=\"hljs-number\">2</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">29</span><span class=\"hljs-keyword\">catch</span> any error\n<span class=\"lineNumber\">30</span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">4</span>\n<span class=\"lineNumber\">31</span><span class=\"hljs-keyword\">finally</span>\n<span class=\"lineNumber\">32</span><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">5</span></code></pre> \n\n<p>返回的<code>promise</code>实例支持链式调用,每个<code>then</code>函数内部最后将返回一个新的<code>promise</code>实例。</p>\n<p>默认返回一个值为<code>undefined</code>,状态为<code>fulfilled</code>的实例.</p>\n<blockquote>\n<p><code>回调函数</code>的写法编写可以一次性监听所有回调函数的错误处理逻辑是很困难的,<code>Promise实例</code>的实例方法<code>catch</code>能处理链式调用之前所有的<code>then</code>函数错误和显式的<code>reject</code>行为.</p>\n</blockquote>\n<p>每个实例方法都返回一个<code>Promise</code>实例，区别在于<code>then</code>和<code>catch</code>通过<code>return</code>显示返回一个新的<code>Promise</code>实例，而<code>finally</code>则让上一个<code>Promise</code>实例穿过自己，让下面的实例方法接收到。</p>\n<p><code>catch</code>方法能处理链式调用之前所有的异常，也就是说当前面的<code>Promise</code>状态转为<code>rejected</code>的时候，会跳过<code>then</code>方法，从而执行<code>catch</code>方法。</p>\n<h2>2.3 Promise 静态方法</h2>\n<p><code>Promise</code>类具有两个能创建一个新的实例的静态方法:</p>\n<ul>\n<li>Promise.resolve(value)</li>\n<li>Promise.reject(reason)</li>\n</ul>\n<p>二者区别在于返回的<code>promise</code>实例的状态,前者为<code>fulfilled</code>,后者为<code>rejected</code>.</p>\n<p><code>Promise.resolve(value)</code>可以视为以下代码的简写:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> {\n<span class=\"lineNumber\">2</span>  resolve(value)\n<span class=\"lineNumber\">3</span>})</code></pre> \n\n<p><code>Promise.reject(reason)</code>亦如此。</p>\n<p>需要注意的是，传入的实参<code>（value/reason）</code>可以有几种情形：</p>\n<ul>\n<li>如果<code>value</code>是一个原始数据类型的值，则设置<code>Promise</code>实例值为此值，状态设置为<code>fulfilled</code></li>\n<li>如果<code>value</code>是一个<code>Promise</code>实例，对于<code>Promise.resolve(value)</code>来说，如果<code>value</code>此时是<code>fulfilled</code>状态，则将其值作为<code>value</code>处理，否则将此<code>Promise</code>直接作为<code>value</code>作为值处理。对于<code>Promise.reject(reason)</code>来说，一律将此传入的<code>Promise</code>实例作为 <code>reason</code>处理，最终返回<code>rejected</code>状态的<code>Promise</code>实例，其值是一个<code>Promise</code>实例。</li>\n<li>如果传入的实参是一个非<code>Promise</code>的<code>thenable</code>对象，则调用此对象的<code>then</code>方法，并且传入<code>resolve</code>和<code>reject</code>作为实参,将<code>then</code>方法作为<code>executor</code>，在内部可以设置当前实例的状态和值, 必须显示调用<code>resolve</code>或者<code>reject</code>方法，使用<code>return</code>其他值则无效。</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'o'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this is then'</span>, <span class=\"hljs-built_in\">arguments</span>);\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>](<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-built_in\">Promise</span>.resolve(obj)\n<span class=\"lineNumber\">9</span>p\n<span class=\"lineNumber\">10</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, r))\n<span class=\"lineNumber\">11</span>  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> {\n<span class=\"lineNumber\">12</span>\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, r);\n<span class=\"lineNumber\">13</span>\t})\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">16</span><span class=\"hljs-built_in\">this</span> is then [Arguments] {\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-string\">'0'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)],\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-string\">'1'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)]\n<span class=\"lineNumber\">19</span>}\n<span class=\"lineNumber\">20</span>reject <span class=\"hljs-number\">1</span></code></pre> \n\n<p>此外,<code>Promise</code>类还有如下几个静态方法:</p>\n<ul>\n<li><code>Promise.all(iterable)</code></li>\n<li><code>Promise.race(iterable)</code></li>\n<li><code>Promise.any(iterable)</code></li>\n<li><code>Promise.allSettled(iterable)</code></li>\n</ul>\n<p>这几个静态方法各有其应用场景.</p>\n<h3>2.2.1 all</h3>\n<p>首先,<code>Promise.all(iterable)</code>方法接收一个<code>iterable</code>对象作为参数,最终返回一个<code>promise 实例</code>.</p>\n<p>首先,如果<code>iterable</code>对象是空的,则返回的结果是空数组(尽管我们基本上不会这么做).</p>\n<p>其次,如果传入的是原始数据类型则转换为<code>fulfilled</code>状态的<code>promise</code>实例,其值是原始对象.如果传入的本来就是<code>promise</code>对象,则直接按<code>promise</code>对象处理.</p>\n<p>我们通过示例代码来理解规范:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>> <span class=\"hljs-built_in\">Promise</span>.all([<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>)]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">2</span><span class=\"hljs-built_in\">Promise</span> { &#x3C;pending> }\n<span class=\"lineNumber\">3</span>> [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ]\n<span class=\"lineNumber\">4</span>> <span class=\"hljs-built_in\">Promise</span>.all([<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>), <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-number\">3</span>)])\n<span class=\"lineNumber\">5</span>  \t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">6</span>  \t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">7</span><span class=\"hljs-built_in\">Promise</span> { &#x3C;pending> }\n<span class=\"lineNumber\">8</span>> <span class=\"hljs-number\">3</span></code></pre> \n\n<p>由上可知,当可迭代对象的所有元素都是<code>fulfilled</code>状态的<code>promise 实例</code>的话,返回一个数组,数组的值是这些<code>promise 实例的值</code>.</p>\n<p>如果一旦其中之一出现<code>rejected</code>状态的<code>promise 实例</code>,则整体状态转化为<code>rejected</code>,且值为最先出现的<code>rejected</code>状态实例的值.</p>\n<p>我们可以使用<code>Promise.all</code>来执行一组异步操作,这些操作的时间花费取决于最长的那个元素,并且最终如果一切顺利,则结果的顺序是不变的.</p>\n<p><code>Promise.all()</code>方法适用于<code>合并请求</code>的场景,例如某些项目中,提交的多个数据需要调用云端接口进行数据校验,当所有数据都通过校验的时候才能执行下一步操作,来看看代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 有一个返回 promise 对象的 asyncApi 函数</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> asyncApi(value)\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">4</span>  test(<span class=\"hljs-string\">'xxx'</span>),\n<span class=\"lineNumber\">5</span>  test(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">6</span>  test(<span class=\"hljs-string\">'x'</span>)\n<span class=\"lineNumber\">7</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> {\n<span class=\"lineNumber\">8</span>  results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-comment\">// balabala 你的代码逻辑</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-comment\">// 都通过了</span>\n<span class=\"lineNumber\">11</span>  })\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-comment\">// do more...</span>\n<span class=\"lineNumber\">13</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// 失败的值, balabala</span>\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(error)\n<span class=\"lineNumber\">16</span>})</code></pre> \n\n<p>如果我们想要合并检查结果,则可以稍微修改一下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">2</span>  test(<span class=\"hljs-string\">'xxx'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err),\n<span class=\"lineNumber\">3</span>  test(<span class=\"hljs-string\">'xx'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err),\n<span class=\"lineNumber\">4</span>  test(<span class=\"hljs-string\">'x'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err)\n<span class=\"lineNumber\">5</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> {\n<span class=\"lineNumber\">6</span>  results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// balabala 你的代码逻辑</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-comment\">// 都通过了</span>\n<span class=\"lineNumber\">9</span>  })\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// do more...</span>\n<span class=\"lineNumber\">11</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-comment\">// 失败的值, balabala</span>\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(error)\n<span class=\"lineNumber\">14</span>})</code></pre> \n\n<p>如果某个<code>test函数</code>返回的<code>promise</code>状态为<code>rejected</code>,如上代码也会将错误数据作为值,<code>catch</code>函数之后返回一个<code>fulfilled</code>状态的<code>promise 新实例</code>.最终<code>results</code>数组也包含了可能出现的错误信息,我们可以操作合并的结果进行处理.</p>\n<h3>2.2.2 race</h3>\n<p><code>Promise.race(iterable)</code>如其名,类似于<code>Promise.all()</code>,接收同类型参数,一旦迭代器中某个<code>promise</code>状态转化为<code>settled</code>,立即返回此结果.</p>\n<blockquote>\n<p>传入的迭代为空的话,返回的<code>promise</code>始终<code>pending</code>.</p>\n</blockquote>\n<p><code>Promise.race()</code>非常适合做异步请求的<code>超时</code>处理.来看一个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// asyncApi() 返回 promise</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timeout</span>(<span class=\"hljs-params\">ms</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">5</span>      reject(<span class=\"hljs-string\">`timeout: <span class=\"hljs-subst\">${ms}</span> ms`</span>)\n<span class=\"lineNumber\">6</span>    }, ms)\n<span class=\"lineNumber\">7</span>  })\n<span class=\"lineNumber\">8</span>}\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-built_in\">Promise</span>.race([\n<span class=\"lineNumber\">11</span>  asyncApi(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">12</span>  timeout(<span class=\"hljs-number\">5000</span>)\n<span class=\"lineNumber\">13</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> {\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">15</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-comment\">// timeout or error</span>\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<h3>2.2.3 any</h3>\n<p><code>Promise.any(iterable)</code>是<code>Promise.all()</code>的反面,其语法无异.</p>\n<p>需要注意的是如果传入的迭代器是空的,则返回<code>rejected</code>的<code>promise </code>实例.只要有一个成功,则返回此结果.如果迭代器内的<code>promise</code>全部返回<code>rejected</code>状态,则最终返回<code>rejected</code>的<code>promise</code>实例.</p>\n<p>因此,此方法适用于验证多个异步结果中是否有<code>fulfilled</code>的<code>promise</code>实例.</p>\n<p>如果我们需要向多个数据源获取某一个数据,则可以使用此方法最快速的获取到数据,亦或者所有异步请求都失败.</p>\n<h3>2.2.4 allSettled</h3>\n<p><code>Promise.allSettled(iterable)</code>方法返回一个在所有给定的<code>promise</code>转为<code>settled</code>状态后的数组,数组元素是每一个<code>promise</code>结果.</p>\n<p>如果我们有多个互不依赖的<code>异步任务</code>,或者我们总想知道每个<code>promise</code>的结果,而不需要其中的<code>rejected</code>状态<code>promise</code>去引发<code>catch</code>,来看看<code>MDN</code>的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>);\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">'foo'</span>));\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> promises = [promise1, promise2];\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-built_in\">Promise</span>.allSettled(promises).\n<span class=\"lineNumber\">6</span>  then(<span class=\"hljs-function\">(<span class=\"hljs-params\">results</span>) =></span> results.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(result)));</code></pre> \n\n<p>输出是:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"fulfilled\"</span>, value: 3 }</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"rejected\"</span>, reason: <span class=\"hljs-string\">\"foo\"</span> }</span></code></pre> \n\n<p>如上所示,状态为<code>fulfilled</code>时,具有<code>value</code>,状态为<code>rejected</code>时,具有<code>reason</code>.</p>\n<p>还记得我们在<code>Promise.all()</code>中的迭代器返回的是<code>promise.catch(err => err)</code>吗?其实,使用<code>Promise.allSettled()</code>相对更好.</p>\n<h2>2.3 Promise 的优劣</h2>\n<p><code>Promise</code>的出现促进了<code>异步</code>编程的发展,我们可以在浏览器端和<code>node</code>端看到统一的<code>Promise</code>代码.还记得<code>callback</code>回调函数的参数约定吗?</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">param, (err, data) => {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(err) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">6</span>}</span>)</span></code></pre> \n\n<p>这种参数约定是脆弱的,开发者可以不按此约定编写回调函数,这类隐藏<code>bug</code>可能就此而生.</p>\n<p><code>Promise</code>的出现,我们必须使用其实例方法<code>then</code>和<code>catch</code>去按规范编码,否则将会出错,开发者也可以看到明显的错误提示信息.</p>\n<p>我们再来看看如下两个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// callback</span>\n<span class=\"lineNumber\">2</span>fs.readFile(name, opts?, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, string|Buffer</span>) =></span> <span class=\"hljs-keyword\">void</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// Promise</span>\n<span class=\"lineNumber\">4</span>readFilePromisified(name, opts?): <span class=\"hljs-built_in\">Promise</span>&#x3C;string | Buffer>         </code></pre> \n\n<p><code>Promise</code>方案让函数参数和回调解耦开来,所有的参数都用于此函数的输入.</p>\n<p><code>Promise</code>在处理单次异步任务的时候表现良好,但是对于多次触发的任务便显得乏力,也许我们需要学习一些<code>响应式编程</code>技术,以解决此类问题.</p>\n<p>对于<code>ES6 Promise</code>来说,缺乏两项很实用的功能:</p>\n<ul>\n<li>取消任务(在组件被删除后取消异步任务等)</li>\n<li>查阅进度(显示进度条等)</li>\n</ul>\n<p>原生<code>Promise</code>暂未支持上述两项特性,也许我们可以看看类似<code>Bluebird</code>这样的第三方库,它们实现了更多功能.</p>\n<h1>3. async / await</h1>\n<p><code>async/await</code>是一种使用 <code>Promise</code>的特殊语法，并且非常容易理解和使用。</p>\n<p>我们直接看示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// return Promise.resolve(value) 推荐写法</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>在函数前添加<code>async</code>标识此函数总是返回一个<code>Promise</code>,即使我们显示指定其他的类型值，也会被包装成一个<code>Promise</code>并返回，当然，依然推荐显示地指定返回<code>Promise</code>。</p>\n<blockquote>\n<p>Try...catch...配合 async/await 使用以处理错误。</p>\n</blockquote>\n<p>另一个关键词<code>await</code>只在<code>async</code>函数内有效：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">'your url'</span>)\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>在日常工作中无论是浏览器还是<code>Nodejs</code>，都可以看到<code>await</code>的身影。</p>\n<p>使用这两个关键字可以让<code>异步流程</code>看起来更像<code>同步流程</code>，<code>await</code>会暂停函数的执行，直到其等待的<code>Promise</code>状态变为<code>settled</code>，对于一些具有前后顺序的异步任务来说，使用<code>await</code>体验非常好。</p>\n<p>尽管其语法简单，我们也需要关注以下两点细节：</p>\n<ul>\n<li>顶层<code>await</code>：此提案当前依然是 <code>stage 3</code>，在正式进入稳定版之前，顶层对于<code>await</code>的使用依然需要立即执行表达式（IIFE），不幸的是，这种模式导致图形执行和应用程序的静态可分析性的确定性降低。由于这些原因，缺少顶层 <code>await</code> 被认为比该功能带来的危害有更高的风险。</li>\n<li>顶层 <code>await</code> 仅限于 ES 模块。明确不支持脚本或 CommonJS 模块。</li>\n<li><code>await</code>支持<code>thenable</code>对象,如果其后是一个<code>thenable</code>对象，则会执行此对象的<code>then</code>方法，并且传入<code>resolve</code>和<code>reject</code>函数作为参数，最终得到一个<code>settled</code>的<code>Promise</code>实例。</li>\n<li><code>await</code>和<code>Promise.all</code>等静态方法配合良好。</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">2</span>  promise1,\n<span class=\"lineNumber\">3</span>  promise2,\n<span class=\"lineNumber\">4</span>  ...\n<span class=\"lineNumber\">5</span>])</code></pre> \n\n<h1>4. MiniPromise</h1>\n<p>如何不借助外部库和<code>ES6 Promise</code>实现一个简单的<code>MyPromise</code>?</p>\n<p>首先,我们可以定义一个对象保存<code>Promise</code>的三种状态.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> states = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">pending</span>: <span class=\"hljs-string\">'Pending'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">fulfilled</span>: <span class=\"hljs-string\">'Fulfilled'</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">rejected</span>: <span class=\"hljs-string\">'Rejected'</span>\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>接着,我们使用<code>class</code>来定义我们的<code>MyPromise</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-built_in\">this</span>.state = states.fulfilled\n<span class=\"lineNumber\">5</span>    }\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">7</span>      <span class=\"hljs-built_in\">this</span>.state = states.rejected\n<span class=\"lineNumber\">8</span>    }\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-built_in\">this</span>.state = states.pending <span class=\"hljs-comment\">// 默认</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">11</span>      executor(resolve, reject)\n<span class=\"lineNumber\">12</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">13</span>      reject(error)\n<span class=\"lineNumber\">14</span>    }\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>}</code></pre> \n\n<p>如此一来,我们实例化的时候传入的<code>executor</code>函数内部的错误就能被<code>catch</code>处理,并且执行<code>reject</code>函数,改变<code>MyPromise</code>的<code>state</code>.</p>\n<p>为了在调用<code>resolve</code>或者<code>reject</code>的时候能改变<code>MyPromise</code>的值,我们需要对这两个函数进行优化.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    \n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">const</span> getCallback = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-built_in\">this</span>.state = state;\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-built_in\">this</span>.value = value;\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">const</span> resolve = getCallback(states.fulfilled)\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">const</span> reject = getCallback(states.rejected)\n<span class=\"lineNumber\">11</span>    \n<span class=\"lineNumber\">12</span>    <span class=\"hljs-built_in\">this</span>.state = states.pending <span class=\"hljs-comment\">// 默认</span>\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">14</span>      executor(resolve, reject)\n<span class=\"lineNumber\">15</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">16</span>      reject(error)\n<span class=\"lineNumber\">17</span>    }\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span>}</code></pre> \n\n<p>我们使用高阶函数<code>getCallback</code>来消除重复代码,减少代码量.此时,再使用<code>resolve(value)</code>或者<code>reject(value)</code>即可修改<code>MyPromise</code>的值.</p>\n<p>此外,我们还要添加<code>resolve</code>和<code>reject</code>作为<code>MyPromise</code>的静态方法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  ...\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(value))\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span>\t<span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, reject</span>) =></span> reject(value))\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>Ok,现在<code>new MyPromise(resolve => resolve(1))</code>等效于<code>MyPromise.resolve(1)</code>了.</p>\n<p>接着,我们来实现实例方法:<code>\"then\"</code>.我们知道,如果按常规的思路来,<code>then</code>方法取决于<code>MyPromise</code>的状态,不同的状态具有不同的值,也许需要写一堆<code>if</code>语句,如果不想要写这些<code>if</code>语句,我们可以换一种思路来为实例设置<code>then</code>方法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> members = {\n<span class=\"lineNumber\">4</span>      [states.fulfilled]: {\n<span class=\"lineNumber\">5</span>        <span class=\"hljs-attr\">state</span>: states.fulfilled,\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-comment\">// 链的机制</span>\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">onResolved</span> =></span> MyPromise.resolve(onResolved(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">8</span>      },\n<span class=\"lineNumber\">9</span>      [states.rejected]: {\n<span class=\"lineNumber\">10</span>        <span class=\"hljs-attr\">state</span>: states.rejected,\n<span class=\"lineNumber\">11</span>        <span class=\"hljs-comment\">// rejected 状态直接忽略返回即可</span>\n<span class=\"lineNumber\">12</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">_</span> =></span> <span class=\"hljs-built_in\">this</span>\n<span class=\"lineNumber\">13</span>      },\n<span class=\"lineNumber\">14</span>      [states.pending]: {\n<span class=\"lineNumber\">15</span>        <span class=\"hljs-attr\">state</span>: states.pending        \n<span class=\"lineNumber\">16</span>      },\n<span class=\"lineNumber\">17</span>    };\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-comment\">// 修改状态,添加 then 实例方法</span>\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-keyword\">const</span> changeState = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-built_in\">Object</span>.assign(<span class=\"hljs-built_in\">this</span>, members[state]);\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-comment\">// getCallback</span>\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">const</span> getCallback = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n<span class=\"lineNumber\">22</span>      <span class=\"hljs-built_in\">this</span>.state = state;\n<span class=\"lineNumber\">23</span>      <span class=\"hljs-built_in\">this</span>.value = value;\n<span class=\"lineNumber\">24</span>    }\n<span class=\"lineNumber\">25</span> \n<span class=\"lineNumber\">26</span>    <span class=\"hljs-keyword\">const</span> resolve = getCallback(states.fulfilled)\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-keyword\">const</span> reject = getCallback(states.rejected)\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-comment\">// 初始化状态, 我们通过对象复制的方法修改了状态</span>\n<span class=\"lineNumber\">29</span>    changeState(states.pending);\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">31</span>      executor(resolve, reject)\n<span class=\"lineNumber\">32</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">33</span>      reject(error)\n<span class=\"lineNumber\">34</span>    }\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>  \n<span class=\"lineNumber\">37</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">38</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(value))\n<span class=\"lineNumber\">39</span>  }\n<span class=\"lineNumber\">40</span> \n<span class=\"lineNumber\">41</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, reject</span>) =></span> reject(value))\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>}</code></pre> \n\n<p>如上,我们初步实现了<code>then</code>实例方法.但是,如果传入<code>then</code>的方法出现异常,依然需要做特殊处理才能得到一个<code>rejected</code>的<code>promise</code>.</p>\n<p>举个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>MyPromise.resolve(<span class=\"hljs-number\">1</span>).then(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());</code></pre> \n\n<p>按规范来看,我们需要返回的是一个<code>rejected</code>的<code>promise</code>.而不是引发异常.</p>\n<p>既然我们已经支持实例化传入的<code>executor</code>中的异常能够被<code>catch</code>,并且能处理好状态和值,或许我们可以按这个思路寻找解决方案.</p>\n<p>不妨修改一下<code>fulfilled</code>的<code>then</code>逻辑:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> members = {\n<span class=\"lineNumber\">4</span>      [states.fulfilled]: {\n<span class=\"lineNumber\">5</span>        ...\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =></span> MyPromise.try(<span class=\"hljs-function\">() =></span> callback(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span>    ...\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  ...\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">try</span>(<span class=\"hljs-params\">callback</span>)</span> {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(callback()))\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>我们通过一个<code>try</code>函数,得到一个全新的<code>Promise</code>实例.其值和状态应该取决于<code>callback</code>函数的返回值.</p>\n<p>由于我们已经支持实例化参数即使异常依然可以得到具有预期的状态和值的<code>MyPromise</code>实例,因此我们可以将麻烦的<code>then</code>函数参数作为<code>callback</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// callback 函数将使用 this.value 作为参数传递下去</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> tryCall = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =></span> MyPromise.try(<span class=\"hljs-function\">() =></span> callback(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">3</span><span class=\"hljs-attr\">then</span>: tryCall</code></pre> \n\n<p>如果我们传入<code>then</code>的<code>reactions()</code>通过<code>try</code>函数去创建一个新的<code>promise</code>实例,就能保证异常可以被内部<code>catch</code>处理了.</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"chrome-extension://bocbaocobfecmglnmeaeppambideimao/pdf/viewer.html?file=file%3A%2F%2F%2FUsers%2Fyi%2FDesktop%2Fexploring-es6.pdf\">Exploring ES6 - exploring-es6.pdf</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2069763/difference-between-event-handlers-and-callbacks\">architecture - Difference between event handlers and callbacks - Stack Overflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick\">javascript - addEventListener vs onclick - Stack Overflow</a></li>\n<li><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Getting Started | bluebird</a></li>\n<li><a href=\"https://hackernoon.com/implementing-javascript-promise-in-70-lines-of-code-b3592565af0f\">Implementing JavaScript Promise in 70 lines of code! | Hacker Noon</a></li>\n<li><a href=\"https://zh.javascript.info/\">现代 JavaScript 教程</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/javascript-promise-resolve-method/\">JavaScript | promise resolve() Method - GeeksforGeeks</a></li>\n</ul>\n","title":"Javascript,I promise - 异步编程","date":"2021/4/9","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=400","intro":"Promise, JavaScript 世界中的异步处理对象.我阅读了 Dr.Axel 前辈的电子书,充满感激."}},"__N_SSG":true}