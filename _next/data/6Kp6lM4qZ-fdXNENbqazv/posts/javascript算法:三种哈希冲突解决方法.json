{"pageProps":{"post":{"slug":"javascript算法:三种哈希冲突解决方法","contentHtml":"<p>在本文中,我们将学习到如何处理哈希冲突,如何编写健壮和优雅的代码,体会算法之美.</p>\n<h2>1. 哈希函数</h2>\n<p>散列表是根据关键码值<code>(Key value)</code>而直接进行访问的数据结构.也就是说,它通过把关键码值映射到表中一个位置来访问记录,以加快查找的速度.</p>\n<p>这个映射函数叫做<code>哈希(散列)函数</code>,存放记录的数组叫做散列表.</p>\n<p>哈希函数不是一个纯函数,函数参数和值是<code>多对一</code>的关系.因为这种特性,哈希值理论上是无法逆推的.让我们来看一个在社区中常见的哈希函数:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">loseloseHashCode</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">'number'</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> key;\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">const</span> tableKey = <span class=\"hljs-built_in\">this</span>.toStrFn(key);\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">let</span> hash = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; tableKey.length; i++) {\n<span class=\"lineNumber\">8</span>    hash += tableKey.charCodeAt(i);\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">return</span> hash % <span class=\"hljs-number\">37</span>;\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p>上述代码是从哈希表的实现中摘取出来的,大致效果是通过不同类型的<code>key</code>获取一个数字作为<code>hashValue</code>.</p>\n<h2>2. 哈希冲突</h2>\n<p>在创建我们的哈希表的时候,对于不同的键值,依据一个哈希函数生成的键值有可能出现重复的情形<code>(一对多的关系)</code>,这种场景我们称之为<code>哈希冲突</code>.</p>\n<p>为了应对哈希冲突,开发者们思考出了许多解决方案,今天我们来看看其中比较常用的三个解决方案.</p>\n<h3>分离链接法</h3>\n<p>所谓<code>分离链接</code>,指的是为哈希表的每一个位置创建一个<code>链表</code>,将元素存在链表里,这是最简单和常见的解决方法,但是在哈希表实例之外,还需要一些<code>额外的存储空间</code>.</p>\n<p>如下是图示:</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20200506160422230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzc2NzAxNQ==,size_16,color_FFFFFF,t_70\" alt=\"\"></p>\n<p>接下来看代码示例:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> { defaultToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../help\"</span>;\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">import</span> LinkedList <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../linkedList/index\"</span>;\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashTableSeparateChaining</span> </span>{\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">table</span>: { [name: <span class=\"hljs-built_in\">string</span>]: LinkedList };\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span>  toStrFn: <span class=\"hljs-built_in\">Function</span>;\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>  count: <span class=\"hljs-built_in\">number</span>;\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-built_in\">this</span>.table = {};\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-built_in\">this</span>.toStrFn = defaultToString;\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-built_in\">this</span>.count = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span> \n<span class=\"lineNumber\">17</span>  put(key: unknown, <span class=\"hljs-attr\">value</span>: unknown): <span class=\"hljs-built_in\">boolean</span> {\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">if</span> (key !== <span class=\"hljs-literal\">undefined</span> &#x26;&#x26; value !== <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">19</span>      <span class=\"hljs-keyword\">const</span> hashCode = <span class=\"hljs-built_in\">this</span>.getHashCode(key);\n<span class=\"lineNumber\">20</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[hashCode] === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">21</span>        <span class=\"hljs-keyword\">const</span> linked = <span class=\"hljs-keyword\">new</span> LinkedList();\n<span class=\"lineNumber\">22</span>        <span class=\"hljs-built_in\">this</span>.table[hashCode] = linked;\n<span class=\"lineNumber\">23</span>      }\n<span class=\"lineNumber\">24</span>      <span class=\"hljs-built_in\">this</span>.table[hashCode].push([key, value]);\n<span class=\"lineNumber\">25</span>      <span class=\"hljs-built_in\">this</span>.count++;\n<span class=\"lineNumber\">26</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">27</span>    }\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span> \n<span class=\"lineNumber\">31</span>  get(key: unknown): unknown {\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-keyword\">const</span> hashCode = <span class=\"hljs-built_in\">this</span>.getHashCode(key);\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[hashCode] &#x26;&#x26; !<span class=\"hljs-built_in\">this</span>.table[hashCode].isEmpty()) {\n<span class=\"lineNumber\">34</span>      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.table[hashCode].head;\n<span class=\"lineNumber\">35</span>      <span class=\"hljs-keyword\">while</span> (current) {\n<span class=\"lineNumber\">36</span>        <span class=\"hljs-keyword\">if</span> (current.val[<span class=\"hljs-number\">0</span>] === key) {\n<span class=\"lineNumber\">37</span>          <span class=\"hljs-keyword\">return</span> current.val[<span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">38</span>        }\n<span class=\"lineNumber\">39</span>      }\n<span class=\"lineNumber\">40</span>      current = current.next;\n<span class=\"lineNumber\">41</span>    }\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span> \n<span class=\"lineNumber\">45</span>  remove(key: unknown): <span class=\"hljs-built_in\">boolean</span> {\n<span class=\"lineNumber\">46</span>    <span class=\"hljs-keyword\">const</span> hashCode = <span class=\"hljs-built_in\">this</span>.getHashCode(key);\n<span class=\"lineNumber\">47</span>    <span class=\"hljs-keyword\">const</span> linked = <span class=\"hljs-built_in\">this</span>.table[hashCode];\n<span class=\"lineNumber\">48</span>    <span class=\"hljs-keyword\">if</span> (linked &#x26;&#x26; linked.indexOf(key) !== -<span class=\"hljs-number\">1</span>) {\n<span class=\"lineNumber\">49</span>      linked.remove(key);\n<span class=\"lineNumber\">50</span>      <span class=\"hljs-keyword\">if</span> (linked.isEmpty()) {\n<span class=\"lineNumber\">51</span>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.table[hashCode];\n<span class=\"lineNumber\">52</span>      }\n<span class=\"lineNumber\">53</span>      <span class=\"hljs-built_in\">this</span>.count--;\n<span class=\"lineNumber\">54</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">55</span>    }\n<span class=\"lineNumber\">56</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">57</span>  }\n<span class=\"lineNumber\">58</span> \n<span class=\"lineNumber\">59</span>  getHashCode(key: unknown): <span class=\"hljs-built_in\">number</span> {\n<span class=\"lineNumber\">60</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"number\"</span>) <span class=\"hljs-keyword\">return</span> key;\n<span class=\"lineNumber\">61</span>    <span class=\"hljs-keyword\">const</span> tableKey: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-built_in\">this</span>.toStrFn(key);\n<span class=\"lineNumber\">62</span>    <span class=\"hljs-keyword\">let</span> hash = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">63</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; tableKey.length; i++) {\n<span class=\"lineNumber\">64</span>      hash += tableKey.charCodeAt(i);\n<span class=\"lineNumber\">65</span>    }\n<span class=\"lineNumber\">66</span>    <span class=\"hljs-keyword\">return</span> hash % <span class=\"hljs-number\">37</span>;\n<span class=\"lineNumber\">67</span>  }\n<span class=\"lineNumber\">68</span> \n<span class=\"lineNumber\">69</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">70</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.count;\n<span class=\"lineNumber\">71</span>  }\n<span class=\"lineNumber\">72</span>}</code></pre> \n\n<blockquote>\n<p><strong>分离链接法</strong>关键在于对内部存储对象使用链表来存储\"<code>哈希碰撞</code>\"的值.</p>\n</blockquote>\n<h3>线性探查法</h3>\n<p>如果不额外使用链表空间来存储值,依然选择将值存储到表中,则可以选择使用<code>线性探查法</code>.</p>\n<p>线性探查的关键在于,<code>如果一个 position 已经被占用,则尝试 position+1 的位置,依次类推</code>.</p>\n<p><img src=\"https://haif-cloud.oss-cn-beijing.aliyuncs.com/algorithm/LinearProbing-Add.png\" alt=\"\"></p>\n<p>白色区域表示空闲位置，绿色区域表示已经存储数据.</p>\n<p>在删除的时候,有两种思路去处理收尾的代码逻辑.</p>\n<ul>\n<li>标记法: 标记已删除的位置,并且后续不可再使用,查找的时候也跳过.</li>\n<li>位置移动修复法: 检验是否需要将后续存在的一个或者多个元素移动到之前的位置,以此来防止出现通过哈希值找到一个被删除的空位置.</li>\n</ul>\n<p>对于第一种思路,也称为<code>惰性探查</code>,核心思想在于每个位置都有一个是否已删除的标记,遇到碰撞的时候递增哈希值,在移除碰撞的值的时候,将此标志位设置为<code>true</code>,方便再次插入碰撞的值的时候直接利用,或者在获取值的时候跳过具有已删除标志的位置,示例代码如下:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> { defaultToString, ValuePairLazy } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../help\"</span>;\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashTableLinearProbingLazy</span>&#x3C;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>> </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">protected</span> table: { [key: <span class=\"hljs-built_in\">string</span>]: ValuePairLazy&#x3C;K, V> };\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">public</span> size = <span class=\"hljs-number\">0</span>,\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">protected</span> toStrFn: (key: K) => <span class=\"hljs-built_in\">string</span> = defaultToString\n<span class=\"lineNumber\">9</span>  </span>)</span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">this</span>.table = {};\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">loseloseHashCode</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"number\"</span>) <span class=\"hljs-keyword\">return</span> key;\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">const</span> tableKey = <span class=\"hljs-built_in\">this</span>.toStrFn(key);\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-keyword\">let</span> hash = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; tableKey.length; i++) {\n<span class=\"lineNumber\">18</span>      hash += tableKey.charCodeAt(i);\n<span class=\"lineNumber\">19</span>    }\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-keyword\">return</span> hash % <span class=\"hljs-number\">37</span>;\n<span class=\"lineNumber\">21</span>  }\n<span class=\"lineNumber\">22</span> \n<span class=\"lineNumber\">23</span>  hashCode(key: K): <span class=\"hljs-built_in\">number</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.loseloseHashCode(key);\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span> \n<span class=\"lineNumber\">27</span>  put(key: K, <span class=\"hljs-attr\">value</span>: V): <span class=\"hljs-built_in\">boolean</span> {\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span> &#x26;&#x26; value != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">29</span>      <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">30</span>      <span class=\"hljs-keyword\">if</span> (\n<span class=\"lineNumber\">31</span>        <span class=\"hljs-built_in\">this</span>.table[position] === <span class=\"hljs-literal\">undefined</span> ||\n<span class=\"lineNumber\">32</span>        (<span class=\"hljs-built_in\">this</span>.table[position] != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-built_in\">this</span>.table[position].isDeleted)\n<span class=\"lineNumber\">33</span>      ) {\n<span class=\"lineNumber\">34</span>        <span class=\"hljs-built_in\">this</span>.table[position] = <span class=\"hljs-keyword\">new</span> ValuePairLazy(key, value);\n<span class=\"lineNumber\">35</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">36</span>        <span class=\"hljs-keyword\">let</span> index = position + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">37</span>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26; !<span class=\"hljs-built_in\">this</span>.table[position].isDeleted) {\n<span class=\"lineNumber\">38</span>          index++;\n<span class=\"lineNumber\">39</span>        }\n<span class=\"lineNumber\">40</span>        <span class=\"hljs-built_in\">this</span>.table[index] = <span class=\"hljs-keyword\">new</span> ValuePairLazy(key, value);\n<span class=\"lineNumber\">41</span>      }\n<span class=\"lineNumber\">42</span>      <span class=\"hljs-built_in\">this</span>.size++;\n<span class=\"lineNumber\">43</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">44</span>    }\n<span class=\"lineNumber\">45</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">46</span>  }\n<span class=\"lineNumber\">47</span> \n<span class=\"lineNumber\">48</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">49</span>    <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">50</span>    <span class=\"hljs-keyword\">const</span> table = <span class=\"hljs-built_in\">this</span>.table;\n<span class=\"lineNumber\">51</span>    <span class=\"hljs-keyword\">if</span> (table[position] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">52</span>      <span class=\"hljs-keyword\">if</span> (table[position].key === key &#x26;&#x26; table[position].isDeleted === <span class=\"hljs-literal\">false</span>) {\n<span class=\"lineNumber\">53</span>        <span class=\"hljs-keyword\">return</span> table[position].value;\n<span class=\"lineNumber\">54</span>      }\n<span class=\"lineNumber\">55</span>      <span class=\"hljs-keyword\">let</span> index = position + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">56</span>      <span class=\"hljs-keyword\">while</span> (\n<span class=\"lineNumber\">57</span>        table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26;\n<span class=\"lineNumber\">58</span>        (table[index].key !== key || table[index].isDeleted)\n<span class=\"lineNumber\">59</span>      ) {\n<span class=\"lineNumber\">60</span>        index++;\n<span class=\"lineNumber\">61</span>      }\n<span class=\"lineNumber\">62</span>      <span class=\"hljs-keyword\">if</span> (\n<span class=\"lineNumber\">63</span>        table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26;\n<span class=\"lineNumber\">64</span>        table[index].key === key &#x26;&#x26;\n<span class=\"lineNumber\">65</span>        !table[index].isDeleted\n<span class=\"lineNumber\">66</span>      ) {\n<span class=\"lineNumber\">67</span>        <span class=\"hljs-keyword\">return</span> table[index].value;\n<span class=\"lineNumber\">68</span>      }\n<span class=\"lineNumber\">69</span>    }\n<span class=\"lineNumber\">70</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">71</span>  }\n<span class=\"lineNumber\">72</span> \n<span class=\"lineNumber\">73</span>  remove(key: K): <span class=\"hljs-built_in\">boolean</span> {\n<span class=\"lineNumber\">74</span>    <span class=\"hljs-keyword\">let</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">75</span>    <span class=\"hljs-keyword\">const</span> { table } = <span class=\"hljs-built_in\">this</span>;\n<span class=\"lineNumber\">76</span>    <span class=\"hljs-keyword\">if</span> (table[position] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">77</span>      <span class=\"hljs-keyword\">if</span> (table[position].key === key &#x26;&#x26; !table[position].isDeleted) {\n<span class=\"lineNumber\">78</span>        table[position].isDeleted = <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">79</span>        <span class=\"hljs-built_in\">this</span>.size--;\n<span class=\"lineNumber\">80</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">81</span>      }\n<span class=\"lineNumber\">82</span>      position++;\n<span class=\"lineNumber\">83</span>      <span class=\"hljs-keyword\">while</span> (table[position].key !== key || table[position].isDeleted) {\n<span class=\"lineNumber\">84</span>        position++;\n<span class=\"lineNumber\">85</span>      }\n<span class=\"lineNumber\">86</span>      <span class=\"hljs-keyword\">if</span> (\n<span class=\"lineNumber\">87</span>        table[position] != <span class=\"hljs-literal\">null</span> &#x26;&#x26;\n<span class=\"lineNumber\">88</span>        table[position].key === key &#x26;&#x26;\n<span class=\"lineNumber\">89</span>        !table[position].isDeleted\n<span class=\"lineNumber\">90</span>      ) {\n<span class=\"lineNumber\">91</span>        table[position].isDeleted = <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">92</span>        <span class=\"hljs-built_in\">this</span>.size--;\n<span class=\"lineNumber\">93</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">94</span>      }\n<span class=\"lineNumber\">95</span>    }\n<span class=\"lineNumber\">96</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">97</span>  }\n<span class=\"lineNumber\">98</span> \n<span class=\"lineNumber\">99</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">100</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size === <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">101</span>  }\n<span class=\"lineNumber\">102</span> \n<span class=\"lineNumber\">103</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">104</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">105</span>    <span class=\"hljs-built_in\">this</span>.table = {};\n<span class=\"lineNumber\">106</span>  }\n<span class=\"lineNumber\">107</span> \n<span class=\"lineNumber\">108</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getTable</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">109</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.table;\n<span class=\"lineNumber\">110</span>  }\n<span class=\"lineNumber\">111</span> \n<span class=\"lineNumber\">112</span>  toString(): <span class=\"hljs-built_in\">string</span> {\n<span class=\"lineNumber\">113</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n<span class=\"lineNumber\">114</span>    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.table);\n<span class=\"lineNumber\">115</span>    <span class=\"hljs-keyword\">let</span> objStr = <span class=\"hljs-string\">`{<span class=\"hljs-subst\">${keys[<span class=\"hljs-number\">0</span>]}</span> => <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.table[keys[<span class=\"hljs-number\">0</span>]].toString()}</span>}`</span>;\n<span class=\"lineNumber\">116</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; keys.length; i++) {\n<span class=\"lineNumber\">117</span>      objStr = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${objStr}</span>, {<span class=\"hljs-subst\">${keys[i]}</span> => <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.table[keys[i]].toString()}</span>}`</span>;\n<span class=\"lineNumber\">118</span>    }\n<span class=\"lineNumber\">119</span>    <span class=\"hljs-keyword\">return</span> objStr;\n<span class=\"lineNumber\">120</span>  }\n<span class=\"lineNumber\">121</span>}\n<span class=\"lineNumber\">122</span></code></pre> \n\n<p>对于第二种思路,示例代码如下:</p>\n<pre><code class=\"hljs language-ts\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> { defaultToString, ValuePair } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../help\"</span>;\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">HashTableLinearProbing</span>&#x3C;<span class=\"hljs-title\">K</span>, <span class=\"hljs-title\">V</span>> </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">protected</span> table: { [key: <span class=\"hljs-built_in\">string</span>]: ValuePair&#x3C;K, V> };\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">protected</span> toStrFn: (key: K) => <span class=\"hljs-built_in\">string</span> = defaultToString,\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">public</span> size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">9</span>  </span>)</span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">this</span>.table = {};\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">loseloseHashCode</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> key === <span class=\"hljs-string\">\"number\"</span>) <span class=\"hljs-keyword\">return</span> key;\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">const</span> tableHash = <span class=\"hljs-built_in\">this</span>.toStrFn(key);\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-built_in\">console</span>.log(tableHash, <span class=\"hljs-string\">\"is table hash value\"</span>);\n<span class=\"lineNumber\">17</span> \n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">let</span> hash = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; tableHash.length; i++) {\n<span class=\"lineNumber\">20</span>      hash += tableHash.charCodeAt(i);\n<span class=\"lineNumber\">21</span>    }\n<span class=\"lineNumber\">22</span>    <span class=\"hljs-keyword\">return</span> hash % <span class=\"hljs-number\">37</span>;\n<span class=\"lineNumber\">23</span>  }\n<span class=\"lineNumber\">24</span> \n<span class=\"lineNumber\">25</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">hashCode</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">26</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.loseloseHashCode(key);\n<span class=\"lineNumber\">27</span>  }\n<span class=\"lineNumber\">28</span> \n<span class=\"lineNumber\">29</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">put</span>(<span class=\"hljs-params\">key: K, value: V</span>)</span> {\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-comment\">// 保证 key 和 value 都不能是 undefined 和 null 之一</span>\n<span class=\"lineNumber\">31</span>    <span class=\"hljs-keyword\">if</span> (key != <span class=\"hljs-literal\">null</span> &#x26;&#x26; value != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">32</span>      <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">33</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[position] == <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">34</span>        <span class=\"hljs-built_in\">this</span>.table[position] = <span class=\"hljs-keyword\">new</span> ValuePair(key, value);\n<span class=\"lineNumber\">35</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">36</span>        <span class=\"hljs-keyword\">let</span> index = position + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">37</span>        <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">38</span>          index++;\n<span class=\"lineNumber\">39</span>        }\n<span class=\"lineNumber\">40</span>        <span class=\"hljs-built_in\">this</span>.table[index] = <span class=\"hljs-keyword\">new</span> ValuePair(key, value);\n<span class=\"lineNumber\">41</span>      }\n<span class=\"lineNumber\">42</span>      <span class=\"hljs-built_in\">this</span>.size++;\n<span class=\"lineNumber\">43</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">44</span>    }\n<span class=\"lineNumber\">45</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">46</span>  }\n<span class=\"lineNumber\">47</span> \n<span class=\"lineNumber\">48</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">49</span>    <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">50</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[position] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">51</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[position].key === key) {\n<span class=\"lineNumber\">52</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.table[position].value;\n<span class=\"lineNumber\">53</span>      }\n<span class=\"lineNumber\">54</span>      <span class=\"hljs-keyword\">let</span> index = position + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">55</span>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">this</span>.table[index].key != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-built_in\">this</span>.table[index].key !== key) {\n<span class=\"lineNumber\">56</span>        index++;\n<span class=\"lineNumber\">57</span>      }\n<span class=\"lineNumber\">58</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-built_in\">this</span>.table[index].key === key)\n<span class=\"lineNumber\">59</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.table[index].value;\n<span class=\"lineNumber\">60</span>    }\n<span class=\"lineNumber\">61</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">62</span>  }\n<span class=\"lineNumber\">63</span> \n<span class=\"lineNumber\">64</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">remove</span>(<span class=\"hljs-params\">key: K</span>)</span> {\n<span class=\"lineNumber\">65</span>    <span class=\"hljs-keyword\">const</span> position = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">66</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[position] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">67</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[position].key === key) {\n<span class=\"lineNumber\">68</span>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.table[position];\n<span class=\"lineNumber\">69</span>        <span class=\"hljs-built_in\">this</span>.verifyRemoveSideEffect(key, position);\n<span class=\"lineNumber\">70</span>        <span class=\"hljs-built_in\">this</span>.size--;\n<span class=\"lineNumber\">71</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">72</span>      }\n<span class=\"lineNumber\">73</span>      <span class=\"hljs-keyword\">let</span> index = position + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">74</span>      <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-built_in\">this</span>.table[index].key !== key) {\n<span class=\"lineNumber\">75</span>        index++;\n<span class=\"lineNumber\">76</span>      }\n<span class=\"lineNumber\">77</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span> &#x26;&#x26; <span class=\"hljs-built_in\">this</span>.table[index].key === key) {\n<span class=\"lineNumber\">78</span>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.table[index];\n<span class=\"lineNumber\">79</span>        <span class=\"hljs-built_in\">this</span>.verifyRemoveSideEffect(key, index);\n<span class=\"lineNumber\">80</span>        <span class=\"hljs-built_in\">this</span>.size--;\n<span class=\"lineNumber\">81</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">82</span>      }\n<span class=\"lineNumber\">83</span>    }\n<span class=\"lineNumber\">84</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">85</span>  }\n<span class=\"lineNumber\">86</span> \n<span class=\"lineNumber\">87</span>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-function\"><span class=\"hljs-title\">verifyRemoveSideEffect</span>(<span class=\"hljs-params\">key: K, removePosition: <span class=\"hljs-built_in\">number</span></span>)</span> {\n<span class=\"lineNumber\">88</span>    <span class=\"hljs-keyword\">const</span> hash = <span class=\"hljs-built_in\">this</span>.hashCode(key);\n<span class=\"lineNumber\">89</span>    <span class=\"hljs-keyword\">let</span> index = removePosition + <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">90</span>    <span class=\"hljs-keyword\">while</span> (<span class=\"hljs-built_in\">this</span>.table[index] != <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">91</span>      <span class=\"hljs-keyword\">const</span> posHash = <span class=\"hljs-built_in\">this</span>.hashCode(<span class=\"hljs-built_in\">this</span>.table[index].key);\n<span class=\"lineNumber\">92</span>      <span class=\"hljs-keyword\">if</span> (posHash &#x3C;= hash || posHash &#x3C;= removePosition) {\n<span class=\"lineNumber\">93</span>        <span class=\"hljs-built_in\">this</span>.table[removePosition] = <span class=\"hljs-built_in\">this</span>.table[index];\n<span class=\"lineNumber\">94</span>        <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.table[index];\n<span class=\"lineNumber\">95</span>        removePosition = index; <span class=\"hljs-comment\">// eslint-disable-line</span>\n<span class=\"lineNumber\">96</span>      }\n<span class=\"lineNumber\">97</span>      index++;\n<span class=\"lineNumber\">98</span>    }\n<span class=\"lineNumber\">99</span>  }\n<span class=\"lineNumber\">100</span> \n<span class=\"lineNumber\">101</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">102</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size === <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">103</span>  }\n<span class=\"lineNumber\">104</span> \n<span class=\"lineNumber\">105</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">106</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">107</span>    <span class=\"hljs-built_in\">this</span>.table = {};\n<span class=\"lineNumber\">108</span>  }\n<span class=\"lineNumber\">109</span> \n<span class=\"lineNumber\">110</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getTable</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">111</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.table;\n<span class=\"lineNumber\">112</span>  }\n<span class=\"lineNumber\">113</span> \n<span class=\"lineNumber\">114</span>  toString(): <span class=\"hljs-built_in\">string</span> {\n<span class=\"lineNumber\">115</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">\"\"</span>;\n<span class=\"lineNumber\">116</span>    <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-built_in\">Object</span>.keys(<span class=\"hljs-built_in\">this</span>.table);\n<span class=\"lineNumber\">117</span>    <span class=\"hljs-keyword\">let</span> objStr = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${keys[<span class=\"hljs-number\">0</span>]}</span> => <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.table[keys[<span class=\"hljs-number\">0</span>]].toString()}</span>`</span>;\n<span class=\"lineNumber\">118</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; keys.length; i++) {\n<span class=\"lineNumber\">119</span>      objStr = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${objStr}</span>, <span class=\"hljs-subst\">${keys[i]}</span> => <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.table[keys[i]].toString()}</span>`</span>;\n<span class=\"lineNumber\">120</span>    }\n<span class=\"lineNumber\">121</span>    <span class=\"hljs-keyword\">return</span> objStr;\n<span class=\"lineNumber\">122</span>  }\n<span class=\"lineNumber\">123</span>}</code></pre> \n\n<p>这里的关键在于<code>remove</code>方法,删除数据之后还要对后续由于哈希冲突导致的数据位置异常进行处理,对相应的值的位置进行修复.哈希冲突越多,则<code>remove</code>的开销越大,因此我们需要一个优秀的<code>哈希函数</code>.</p>\n<h3>多重散列法</h3>\n<p>多重散列或者多重哈希,没什么区别.<code>一个</code>哈希函数不够,<code>就用两个</code>.看示例代码:</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"lineNumber\">1</span>(firstHash(key) + i * secondHash(key)) % tableSize </code></pre> \n\n<h2>3. 参考</h2>\n<ul>\n<li><a href=\"https://www.educative.io/blog/data-strucutres-hash-table-javascript\">Data Structures 101: implement hash tables in JavaScript</a></li>\n</ul>\n","title":"Javascript算法:三种哈希冲突解决方法","date":"2021/3/10","tags":["Javascript","哈希冲突","算法"],"mainImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"在学习 JavaScript 数据结构的时候,看到了三种解决哈希冲突的方法,书上记录其二,本文追加之三,聊表慰藉."}},"__N_SSG":true}