{"pageProps":{"post":{"slug":"Javascript中的栈","contentHtml":"<p><code>栈</code>是一种<code>last in first out</code>先进后出的结构.新添加的元素即为<code>栈顶</code>另一端称为<code>栈底</code>.就像摞起来的书本,先放的在低端,后方的在顶端.</p>\n<blockquote>\n<p>栈常用于保存变量和方法调用记录,在浏览器的浏览历史中也能看到栈的应用.</p>\n</blockquote>\n<p>我们将创建一个<code>基于数组的Stack</code>类来表示栈.并且支持如下四种方法.</p>\n<ul>\n<li>push(): 入栈</li>\n<li>pop(): 出栈</li>\n<li>peek(): 返回栈顶元素</li>\n<li>isEmpty(): 返回是否空栈</li>\n<li>clear(): 清除栈所有元素</li>\n<li>size():返回栈的元素个数</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>.items = []\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">this</span>.items.push(e)\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.pop();\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.items.length - <span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.length === <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">16</span>  }\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items.length\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-built_in\">this</span>.items.length = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<p>啊哈,栈如此简单不是吗?通过数组我们可以轻松创建一个<code>栈</code>来满足日常的使用.</p>\n<p>让我们来思考一些问题,如果数据量很大,数组的大部分方法的时间复杂度是 O(n) .如果数组的长度很长,查找数据所需要的时间将会变得很长,而且为了保证数组的有序性,每次访问相同的下标能得到同样的结果(在不改变数组内部结构的情况下),数组占用了<code>更多</code> 的内存空间.</p>\n<p>为了应对这些不足之处,我们可以<code>基于 JavaScript 对象</code>创建一个<code>Stack</code>类.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>.items = {}\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-built_in\">this</span>.size++\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size] = e    \n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.size === <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {   \n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-built_in\">this</span>.size--\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-built_in\">this</span>.size]\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-built_in\">this</span>.items = {}\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-built_in\">this</span>.size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span>{\n<span class=\"lineNumber\">31</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-keyword\">let</span> objString = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.items[<span class=\"hljs-number\">0</span>]}</span>`</span>\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> v = <span class=\"hljs-number\">2</span>; v &#x3C;= <span class=\"hljs-built_in\">this</span>.size; v++</span>)</span> {\n<span class=\"lineNumber\">34</span>      objString += <span class=\"hljs-string\">`, <span class=\"hljs-subst\">${<span class=\"hljs-built_in\">this</span>.items[v]}</span>`</span>\n<span class=\"lineNumber\">35</span>    }\n<span class=\"lineNumber\">36</span>    <span class=\"hljs-keyword\">return</span> objString\n<span class=\"lineNumber\">37</span>  }\n<span class=\"lineNumber\">38</span>}</code></pre> \n\n<p><code>JavaScript</code>的 class 内的方法和属性是不受保护的,我们没有类似<code>Java</code>的<code>private</code>声明方式,每个人都可以操作我们的内部数据,为了保护内部数据,业界的最佳实践和默认约定是使用下划线命名.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>._items = []\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>._size = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<p>如此一来,在其他开发者无意之下,也不会通过<code>items</code>属性破坏栈的内容数据结构.</p>\n<blockquote>\n<p>遵守约定是一种美德不是吗?</p>\n</blockquote>\n<p>可是如果开发者上来就是莽,使用<code>_items</code>,数据依然得不到保护.</p>\n<p><code>ES6</code>新增的<code>Symbol</code>基本类型提供了一种解决方案.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> _items = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'stackItems'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>[_items] = []\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">//</span>\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>然而,这依然无法确保开发者不通过<code>Object.getOwnPropertySymbols</code>方法获取类声明中的所有<code>Symbols</code></p>\n<p>属性.</p>\n<p>不过,我们还有一个解决方案可以使用:<code>ES6:WeakMap</code>.WeakMap 可以存储键值对,键是对象,值可以是任何数据类型.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">WeakMap</span>()\n<span class=\"lineNumber\">2</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Stack</span> </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    items.set(<span class=\"hljs-built_in\">this</span>, [])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">const</span> r = items.get(<span class=\"hljs-built_in\">this</span>)\n<span class=\"lineNumber\">8</span>    r.push(e)\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">pop</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">const</span> r = items.get(<span class=\"hljs-built_in\">this</span>)\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> r.pop()\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">//</span>\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p>并且,目前<code>ECMAScript</code>类属性提案,使用<code>#items = []</code>的私有属性提案已经到达了<code>Stage 3</code>.值得等待.</p>\n<p>以下是各阶段及含义的描述：</p>\n<ul>\n<li>Stage 0/Strawperson： 潜在的可能被纳入规范的一些想法。</li>\n<li>Stage 1/Proposal：为该想法设想一些适用场景，可能的 case。提出解决实现方案以及可能的变更。</li>\n<li>Stage 2/Draft：经过上一步验证讨论后，这一阶段开始起草语言层面的语义语法，准备正式的规范文档。</li>\n<li>Stage 3/Candidate：提案进入到了候选阶段。开始接收一些反馈对提案进行完善。</li>\n<li>Stage 4/Finished：可以被纳入到正式的 ECMAScript 语言规范中了。</li>\n</ul>\n<p>现在我们了解了栈是什么结构,以及通过数组和 JavaScript 对象初步实现了<code>Stack</code>类.接下来我们尝试用<code>Stack</code>解决问题.</p>\n<h3>进制转换</h3>\n<p><strong>十进制转二进制,以及任意进制转换</strong>.</p>\n<p>先来看看如何计算十进制数转二进制:</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fgss0.baidu.com%2F7Po3dSag_xI4khGko9WTAnF6hhy%2Fzhidao%2Fpic%2Fitem%2F8326cffc1e178a822eea2094f703738da977e834.jpg&#x26;refer=http%3A%2F%2Fgss0.baidu.com&#x26;app=2002&#x26;size=f9999,10000&#x26;q=a80&#x26;n=0&#x26;g=0n&#x26;fmt=jpeg?sec=1612013894&#x26;t=ca1c076b08aac87b4847d7caaa0d9cb4\" alt=\"\"></p>\n<p>如果用<code>栈</code>来保存余数,最后结果再取出即可.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">decimalToBinary</span>(<span class=\"hljs-params\">decNum</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> remStack = <span class=\"hljs-keyword\">new</span> Stack()\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">let</span> num = decNum\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">let</span> rem;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">let</span> binaryString = <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">while</span> (num > <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">7</span>    rem = <span class=\"hljs-built_in\">Math</span>.floor(num % <span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">8</span>    remStack.push(rem)\n<span class=\"lineNumber\">9</span>    num = <span class=\"hljs-built_in\">Math</span>.floor(num / <span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">!remStack.isEmpty()</span>)</span> {\n<span class=\"lineNumber\">12</span>    binaryString += remStack.pop().toString()\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">return</span> binaryString\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p>如果不是二进制,而是 2~36,开发者指定的进制,则可以适当调整此函数:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">baseConverter</span>(<span class=\"hljs-params\">decNum, base</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> remStack = <span class=\"hljs-keyword\">new</span> Stack()\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// 便于数字表示</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">const</span> digits = <span class=\"hljs-string\">'0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">let</span> num = decNum\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">let</span> rem;\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-keyword\">let</span> baseString = <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-comment\">// 基数需要在 2~36 之间</span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span>(!(base>=<span class=\"hljs-number\">2</span> &#x26;&#x26; base &#x3C;= <span class=\"hljs-number\">36</span>)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">while</span> (num > <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-comment\">// rem: 余数,</span>\n<span class=\"lineNumber\">12</span>    rem = <span class=\"hljs-built_in\">Math</span>.floor(num % base)\n<span class=\"lineNumber\">13</span>    remStack.push(rem)\n<span class=\"lineNumber\">14</span>    num = <span class=\"hljs-built_in\">Math</span>.floor(num / base)    \n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>  \n<span class=\"lineNumber\">17</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">!remStack.isEmpty()</span>)</span> {\n<span class=\"lineNumber\">18</span>    baseString += digits[remStack.pop()] <span class=\"hljs-comment\">// 余数转化,方便显示进制数</span>\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>  \n<span class=\"lineNumber\">21</span>  <span class=\"hljs-keyword\">return</span> baseString\n<span class=\"lineNumber\">22</span>}</code></pre> \n\n<h3>平衡圆括号</h3>\n<p><strong>question</strong>:给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。\n有效字符串需满足：</p>\n<ul>\n<li>左括号必须用相同类型的右括号闭合。</li>\n<li>左括号必须以正确的顺序闭合。</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">parenthesesBalance</span>(<span class=\"hljs-params\">str</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(str.length === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">const</span> pair = {<span class=\"hljs-string\">'('</span>: <span class=\"hljs-string\">')'</span>, <span class=\"hljs-string\">'['</span>: <span class=\"hljs-string\">']'</span>, <span class=\"hljs-string\">'{'</span>: <span class=\"hljs-string\">'}'</span>}\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">const</span> stack = <span class=\"hljs-keyword\">new</span> Stack()\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;i &#x3C; str.length; i++) {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">if</span>(str(i) === <span class=\"hljs-string\">'('</span> || str[i] === <span class=\"hljs-string\">'['</span> || str[i] === <span class=\"hljs-string\">'{'</span>){\n<span class=\"lineNumber\">7</span>      stack.push(str[i])\n<span class=\"lineNumber\">8</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-keyword\">let</span> last = stack.pop()\n<span class=\"lineNumber\">10</span>      <span class=\"hljs-keyword\">if</span>(str[i] !== pair[last]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">11</span>    }\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>  \n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<h3>汉诺塔</h3>\n<p>在经典汉诺塔问题中，有 3 根柱子及 N 个不同大小的穿孔圆盘，盘子可以滑入任意一根柱子。一开始，所有盘子自上而下按升序依次套在第一根柱子上(即每一个盘子只能放在更大的盘子上面)。移动圆盘时受到以下限制:\n(1) 每次只能移动一个盘子;\n(2) 盘子只能从柱子顶端滑出移到下一根柱子;\n(3) 盘子只能叠在比它大的盘子上。</p>\n<p>请编写程序，用栈将所有盘子从第一根柱子移到最后一根柱子。</p>\n<p>你需要原地修改栈。</p>\n<p>来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/hanota-lcci</p>\n<p><img src=\"https://www.programmersought.com/images/621/4856108b92aae2dde25a0325f6317d95.png\" alt=\"\"></p>\n<p><img src=\"https://upload-images.jianshu.io/upload_images/5977941-12d456543f5c31e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/375/format/webp\" alt=\"\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">2</span> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number[]}</span> <span class=\"hljs-variable\">A</span></span>\n<span class=\"lineNumber\">3</span> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number[]}</span> <span class=\"hljs-variable\">B</span></span>\n<span class=\"lineNumber\">4</span> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number[]}</span> <span class=\"hljs-variable\">C</span></span>\n<span class=\"lineNumber\">5</span> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">{void}</span> </span>Do not return anything, modify C in-place instead.\n<span class=\"lineNumber\">6</span> */</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">var</span> hanota = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">A, B, C</span>) </span>{\n<span class=\"lineNumber\">8</span>  \t<span class=\"hljs-comment\">// 当前所有碟子都在 A 栈</span>\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">const</span> length = A.length\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">const</span> move = <span class=\"hljs-function\">(<span class=\"hljs-params\">n, a, b, c</span>) =></span> {        \n<span class=\"lineNumber\">11</span>        <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">n === <span class=\"hljs-number\">1</span></span>)</span> {\n<span class=\"lineNumber\">12</span>          <span class=\"hljs-comment\">// 边界条件,最简单的移动逻辑.可以通过修改栈来实现效果.</span>\n<span class=\"lineNumber\">13</span>            c.push(a.pop())\n<span class=\"lineNumber\">14</span>        } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">15</span>          \t<span class=\"hljs-comment\">// 分解问题,缩小范围,递归调用整个处理问题的函数.</span>\n<span class=\"lineNumber\">16</span>          \t<span class=\"hljs-comment\">// 将最下面碟子上的碟子,通过中间柱子 c,移动到 b</span>\n<span class=\"lineNumber\">17</span>            move(n - <span class=\"hljs-number\">1</span>, a, c, b)\n<span class=\"lineNumber\">18</span>          \t<span class=\"hljs-comment\">// 直接移动 a 到 c</span>\n<span class=\"lineNumber\">19</span>            c.push(a.pop())\n<span class=\"lineNumber\">20</span>          \t<span class=\"hljs-comment\">// 将 b 上的碟子,通过中间柱子 a,移动到 c</span>\n<span class=\"lineNumber\">21</span>            move(n - <span class=\"hljs-number\">1</span>, b, a, c)\n<span class=\"lineNumber\">22</span>        }        \n<span class=\"lineNumber\">23</span>    }\n<span class=\"lineNumber\">24</span>    move(length, A, B, C)\n<span class=\"lineNumber\">25</span>};</code></pre> \n\n<blockquote>\n<p><a href=\"https://www.zhihu.com/question/24385418/answer/258015386\">如何理解汉诺塔的递归？ - invalids的回答 - 知乎</a></p>\n</blockquote>\n<p>看了知乎大佬的分析,勉强了解了思路.首先,将整个过程分解为:</p>\n<ul>\n<li>n-1 个碟子通过中间柱子,移动到暂时存放的柱子,移动成功后这个柱子便可以理解为一开始的时候所有碟子所在的柱子</li>\n<li>直接移动 1 个碟子到目标柱子</li>\n<li>移动 n-1 个碟子到中间柱子</li>\n</ul>\n<p>习惯于命令式编程,无法理解这种声明式编程的逻辑.难以理解如何实现这一逻辑.</p>\n<blockquote>\n<p>换句话说，只要我们：</p>\n<p>1、写程序告诉电脑“如何分解一个问题”</p>\n<p>2、写程序告诉电脑“当该问题分解到最简时如何处理”</p>\n<p>那么，“具体如何递推、如何回归”这个简单问题就不要再操心了，电脑自己能搞定。</p>\n<p>——写出问题分解方法、写出分解到最简后如何解决，这是我们的任务；把问题搞定，是电脑的任务。这就是递归的魅力。</p>\n<p>作者：invalid s\n链接：https://www.zhihu.com/question/24385418/answer/258015386\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>\n</blockquote>\n<p>当我又继续看了几个个人体会之后,似乎懂了.</p>\n<p>关键在于,缩小范围,直到最小范围.</p>\n<p>递归调用的时候,关键在于传入的参数.</p>\n<p>我真的懂了吗?</p>\n","title":"Javascript中的栈","date":"2020/12/30","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1535191042502-e6a9a3d407e7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1535191042502-e6a9a3d407e7?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"首先要明确什么是栈结构,其次是明确如何用数组和类来模拟栈,创建一个具有基本功能的 Stack 类."}},"__N_SSG":true}