{"pageProps":{"post":{"slug":"从vscode到vim","contentHtml":"<p>我小时候有一个<code>hacker</code>梦，不知从何而来，也不知在何时消失。毕业一年后下定决心做一个 web 开发者，虽然这条道路并不是那么顺利，但是至少现今可以做我喜欢的工作。</p>\n<p>很早以前接触了<code>linux</code>，接触了<code>vim</code>编辑器，后来工作用<code>vscode</code>比较多，上周买了一本<code>死月</code>译的《精通 vim》来学习，断断续续看了一遍，因此总结和分享此文。</p>\n<p>本文主要内容如下：</p>\n<ul>\n<li>vim 简介</li>\n<li>插件系统和配置</li>\n<li>刚需和方案\n<ul>\n<li>文件匹配</li>\n<li>侧边栏目录</li>\n<li>代码补全</li>\n<li>构建错误报告</li>\n<li>代码风格</li>\n<li>编辑器终端</li>\n<li>会话机制</li>\n</ul>\n</li>\n<li>vimscript 基础</li>\n</ul>\n<h2>VIM 简介</h2>\n<h3>前言</h3>\n<p><code>vim</code>是最优秀最存粹的编辑器之一，其拥有极佳的跨平台特性，几乎能在所有的计算机上运行，许多<code>unix</code>操作系统都预装了<code>vim或vi</code>，使用者可以无缝使用<code>vim</code>进行编辑工作。</p>\n<p><code>vim</code>和其他编辑器最大的区别在于操作方式和设计哲学，想熟练地使用<code>vim</code>需要花费很多时间去熟悉<code>vim</code>的诸多特性，例如：<code>模式</code>、<code>vimscript</code>编程语言、<code>扩展性</code>、<code>命令式操作</code>等等。</p>\n<p>相比于<code>vscode</code>来说，使用者需要花费很多时间才能配置好同等功能的插件，而在其他编辑器或者<code>IDE</code>上都能够轻松实现。</p>\n<blockquote>\n<p>如果你无心折腾，那么<code>vim</code>不是一个好的选择。</p>\n</blockquote>\n<p>熟练掌握<code>vim</code>能够让你更专注于代码本身，并且能够非常自由地编码，如果你想要一个自己能够完全掌握的<code>vim</code>，你得花费足够的时间和精力来学习<code>vim</code>的操作和优化方式，了解如何控制，如何驯服<code>vim</code>。</p>\n<p><code>vim</code>在不同的操作系统下，也有不同的选择，我们可以选用<code>GUI</code>或者<code>Terminal</code>版本的<code>vim</code>编辑器，也可以使用各种不同的分支，例如<code>neovim</code>或<code>macvim</code>。</p>\n<p>通常，系统自带的<code>vim</code>支持的特性不够全面，我们可以使用<code>vim --version</code>查看特性支持列表，这在我们后续安装一些插件的时候很有用。</p>\n<p>如果某些插件需要一些语言支持，而目前的<code>vim</code>暂不支持其特性，则需要我们卸载并且重新安装<code>vim</code>，如若需要更多自定义的功能支持，甚至需要编译安装。</p>\n<blockquote>\n<p>推荐安装最新版本的<code>vim</code>编辑器。</p>\n</blockquote>\n<p>对于学习使用<code>vim</code>的新人来说，强烈推荐在 shell 里运行<code>vimtutor</code>这个程序，一步步学习如何使用<code>vim</code>。</p>\n<h3>基础</h3>\n<p>我们需要了解以下几个概念：</p>\n<ul>\n<li>缓冲区（buffer）</li>\n<li>窗口（window）</li>\n<li>标签（tab）</li>\n<li>标记（marks）</li>\n<li>寄存器（register）</li>\n</ul>\n<h4>缓冲区、窗口、标签</h4>\n<p><code>vim</code>在终端调用的时候可以接收多个文件，每一个文件都有一个单独的缓冲区，缓冲区的大小取决于文件的大小，并且默认加载第一个缓冲区，显示第一个文件的内容。</p>\n<p>当我们保存文件的时候，缓冲区的内容才会写入到磁盘中去。</p>\n<p>实际上，缓冲区也分为很多种，例如：</p>\n<ul>\n<li>只读缓冲区</li>\n<li>活动缓冲区</li>\n<li>隐藏缓冲区</li>\n<li>等等</li>\n</ul>\n<blockquote>\n<p>这部分知识对于初识<code>vim</code>的用户来说属于进阶知识，在此先跳过。</p>\n</blockquote>\n<p>可以使用<code>:ls</code>列出所有缓冲区，使用<code>:bn</code>和<code>:bp</code>切换下一个和前一个缓冲区，显示不同的文件。</p>\n<p>标签可以类比为浏览器标签页，<code>vim</code>提供不同的标签页也有利于我们同时打开不同的项目，这部分笔者建议使用<code>tmux</code>来代替。</p>\n<p>窗口则是用来显示缓冲区内容的，我们可以在一个标签页下创建多个窗口，使用<code>ctrl+w</code>可以轻松切换窗口。</p>\n<p>窗口和缓冲区的关系并不是一对一的，多窗口可以对应单一的缓冲区，也可以在不同窗口载入同一个缓冲区。</p>\n<p>在打开多个窗口和文件的时候，默认共用一个缓冲区，因此<code>:wa</code>命令可以同时保存当前缓冲区内的所有内容。</p>\n<h4>标记</h4>\n<p>关于标记，这个功能笔者用得较少，因为笔者的<code>.vimrc</code>中设置了自动保存文件退出的时候的位置信息，很少需要标记一个位置用于快速跳转。</p>\n<p>但是<code>mark</code>标记的功能依然简单而有用，我们可以通过诸如<code>ma</code>命令来标记当前光标所在位置，意为<code>mark a</code>，这个标记以<code>a</code>为名，通过<code>'a</code>快速跳转到标记位置，或者通过<code>d'a</code>删除标记。</p>\n<h4>寄存器</h4>\n<p>当我们通过诸如<code>dd</code>此类的操作指令去操作文本的时候，数据将会暂存到寄存器中。</p>\n<p>我们可以通过寄存器命令来操作寄存器内容，例如：<code>\"ayy</code>可 append 当前行的内容到寄存器<code>a</code>中去，如此一来我们可以复制多行内容到寄存器：<code>\"A3yy</code>,使用大写字母定位追加到哪个寄存器，后续就可以同时取出寄存器内容粘贴到指定位置。</p>\n<blockquote>\n<p>寄存器也分为多种类型，具名的和未命名的、不同的操作例如删除一行、删除少于一行的文本、系统剪贴板等等都具有不同的类型。</p>\n</blockquote>\n<h2>插件系统和配置</h2>\n<h3>插件系统</h3>\n<p>基础功能的<code>vim</code>是一个存粹的编辑器，对于简单编辑一些文件已然足够，但是如果需要使用其进行项目开发，则相比于诸如<code>vscode</code>之类的同类软件来说在开发体验上是远远不如的。</p>\n<p>也许使用<code>vim</code>的插件系统是<code>vim</code>使用者永远绕不过的一个问题，在<code>vim 8</code>版本之前我们通常使用一些包管理插件来管理其他插件，<code>8</code>版本之后<code>vim</code>的<code>package</code>特性让我们可以不使用第三方包管理插件，也能轻松安装和管理插件。</p>\n<p>在讨论插件之前，我们需要了解以下三个概念：</p>\n<ul>\n<li>包：是<code>vim 8</code>的新特性，我们可以简单地理解为一个包含若干个<code>插件</code>的目录。</li>\n<li>脚本：vimscript 语言和指令编写的<code>.vim</code>文件</li>\n<li>插件：若干个脚本的合集，组成一个实现特定功能的插件</li>\n</ul>\n<p>编辑器启动的时候将会加载某些包里的所有插件，并且根据默认配置文件提供特定的功能特性。</p>\n<p>如下是笔者学习的第一个<code>demo.vim</code>脚本，使用<code>vim</code>编辑之后可以立即执行：<code>source %</code>激活这个脚本。</p>\n<pre><code><span>function</span>! SayHello()\n<span class=\"lineNumber\">2</span>\t<span>echo</span> <span>'Hello, world.'</span>\n<span class=\"lineNumber\">3</span>endfunction\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>command</span>! Hello call SayHello()\n<span class=\"lineNumber\">6</span>nnoremap Q :Hello&#x3C;CR></code></pre> \n\n<p>这个脚本有一个函数<code>SayHello</code>，我们为其绑定了一个指令<code>Hello</code>，并且绑定了一个普通模式下的快捷键<code>Q</code>，按下即可执行指令<code>Hello</code>，并且调用<code>sayHello</code>函数。</p>\n<p>这是一个极简却\"意义重大\"的<code>hello world</code>功能，我们可以从社区里那些优秀的插件中瞥见其浮光掠影，毕竟这是开发者们喜闻乐见的编程起点 😂。</p>\n<blockquote>\n<p>vim 默认在启动的时候加载<code>$HOME/.vimrc</code>这个默认的配置文件</p>\n</blockquote>\n<p>因此，我们可以将通用配置写入<code>.vimrc</code>，也可以将插件的特殊配置写入插件目录中的脚本或者配置文件中。</p>\n<p>也许在未来的某一天，我们灵光一闪写出了一个能解决社区开发者某个刚需的脚本，这时候我们可以将其组织成一个插件，并且发布出去让大家自由使用和分享。</p>\n<p>一个插件的基础目录如下：</p>\n<pre><code>.\n<span class=\"lineNumber\">2</span>└── demo-plugin\n<span class=\"lineNumber\">3</span>  ├── doc\n<span class=\"lineNumber\">4</span>  │  └── demo.txt\n<span class=\"lineNumber\">5</span>  └── plugin\n<span class=\"lineNumber\">6</span>      └── demo.vim</code></pre> \n\n<p><code>vim</code>根据插件目录中的命名自动 <code>source</code>上述脚本。在<code>vim 8</code>之后，我们可以方便的手动安装插件，也可以使用早已流行的诸多插件管理方案。</p>\n<p>打开一个<code>vim</code>窗口，输入命令：<code>:h packages</code>即可打开一个关于包的管理说明文件。</p>\n<p>通过阅读此文件，我们可以知道通常我们可以在<code>$HOME/.vim/pack</code>下保存我们的插件，插件文件夹中提供一个<code>start</code>目录里面存放<code>vim</code>启动的时候需要加载的脚本。</p>\n<p>某种意义上来说，只要将一个插件存放在包目录下就可以视为安装了此插件，重启<code>vim</code>编辑器即可使用插件的功能，执行<code>:helptags ALL</code>命令即可让我们索引到插件中<code>doc</code>目录下的文档说明，再使用<code>:help xxx</code>命令就可以打开特定的插件文档了，如果某些目录无法打开，则检查一下目录的权限即可。</p>\n<p>按使用来分，插件可以分为<code>常用</code>和<code>可选使用</code>两种，常用插件我们放在包的<code>start</code>目录中，可选使用的插件可以放在包的<code>opt</code>目录中，<code>vim</code>启动的时候不会主动加载这些插件，可以通过命令：<code>packadd xxx</code>手动加载插件。</p>\n<p>当我们手动管理这些插件的时候如果需要从<code>github</code>更新插件，则需要逐个进行<code>git pull</code>拉取，这无疑需要花费额外的时间。</p>\n<p>为了提高使用效率，我们可以利用特定的包管理工具来管理不同的插件，流行的包管理插件有以下几种:</p>\n<ul>\n<li>vim-plug</li>\n<li>Vundle</li>\n<li>Pathogen</li>\n<li>minpac</li>\n<li>...</li>\n</ul>\n<p>使用流行的插件管理器可以让我们在安装社区优秀的插件的时候可以获得更好的文档支持，这些插件通常会提供一些安装插件和配合插件管理器的安装配置方案描述。</p>\n<p>我们可以通过<code>github</code>轻松找到这些管理器的地址和安装使用方法，如果遇到一些问题，可以在<code>readme</code>文档和<code>issue</code>中找到一些指引。</p>\n<p>后续在增强我们的使用体验的时候，再引入各种插件支持。</p>\n<h3>配置文件</h3>\n<p>在用户层面，<code>$HOME/.vimrc</code>是<code>vim</code>的默认配置文件，如果没有则可以创建，后续可以通过<code>source %</code>命令加载此文件，或者重启<code>vim</code>让其自动加载配置文件的配置，获得某些个性化支持。</p>\n<blockquote>\n<p>Talk is cheap.</p>\n</blockquote>\n<p>这里有一个很好用的在线配置小站：<a href=\"https://vimconfig.com/\">VimConfig - Sane and simple Vim configuration</a>，用户可以在浏览器界面选择编辑器特性，最终得到一个可用的配置文件。</p>\n<p>让我们从一个简短的<code>.vimrc</code>文件开始:</p>\n<pre><code>syntax on <span>\" turn on syntax highlight\n<span class=\"lineNumber\">2</span>\"</span> undo file 实现编辑保存后撤销\n<span class=\"lineNumber\">3</span><span>set</span> undofile\n<span class=\"lineNumber\">4</span><span>set</span> undodir=~/.vim/undodir/\n<span class=\"lineNumber\">5</span><span>set</span> nocompatible <span>\" 不兼容 vi\n<span class=\"lineNumber\">6</span>set nu \"</span> 显示行号\n<span class=\"lineNumber\">7</span><span>set</span> expandtab <span>\" tab 转空格\n<span class=\"lineNumber\">8</span>set breakindent \"</span> 换行缩进\n<span class=\"lineNumber\">9</span><span>\" tab 宽度，支持退格删除\n<span class=\"lineNumber\">10</span>set shiftwidth=0 \n<span class=\"lineNumber\">11</span>set tabstop=2\n<span class=\"lineNumber\">12</span>set backspace=2\n<span class=\"lineNumber\">13</span>\"</span> 智能缩进\n<span class=\"lineNumber\">14</span><span>set</span> smartindent\n<span class=\"lineNumber\">15</span><span>set</span> showcmd <span>\" show command in status line\n<span class=\"lineNumber\">16</span>set showmatch \"</span> show matching brackets\n<span class=\"lineNumber\">17</span><span>set</span> ignorecase <span>\" do case insensitive matching 忽略大小写匹配\n<span class=\"lineNumber\">18</span>set incsearch \"</span> Incremental search\n<span class=\"lineNumber\">19</span><span>set</span> autowrite <span>\" auto save before commands like :next and :make\n<span class=\"lineNumber\">20</span>set hidden \"</span> auto save buffer before switch buffers\n<span class=\"lineNumber\">21</span><span>set</span> mouse=a <span>\"enable mouse usage\n<span class=\"lineNumber\">22</span>set ttyfast                \"</span> Faster redrawing.\n<span class=\"lineNumber\">23</span><span>set</span> lazyredraw             <span>\" Only redraw when necessary.\n<span class=\"lineNumber\">24</span> \n<span class=\"lineNumber\">25</span>\"</span> auto trailing space\n<span class=\"lineNumber\">26</span><span>\" Removes trailing spaces\n<span class=\"lineNumber\">27</span>function TrimWhiteSpace()\n<span class=\"lineNumber\">28</span>  %s/\\s*$//\n<span class=\"lineNumber\">29</span>  ''\n<span class=\"lineNumber\">30</span>endfunction\n<span class=\"lineNumber\">31</span>\"</span> 自动清除行头尾空格\n<span class=\"lineNumber\">32</span>autocmd FileWritePre * call TrimWhiteSpace()\n<span class=\"lineNumber\">33</span>autocmd FileAppendPre * call TrimWhiteSpace()\n<span class=\"lineNumber\">34</span>autocmd FilterWritePre * call TrimWhiteSpace()\n<span class=\"lineNumber\">35</span>autocmd BufWritePre * call TrimWhiteSpace()\n<span class=\"lineNumber\">36</span><span>\" file type\n<span class=\"lineNumber\">37</span>\"</span> 启动文件类型插件以支持部分插件功能\n<span class=\"lineNumber\">38</span>filetype on\n<span class=\"lineNumber\">39</span>filetype plugin on\n<span class=\"lineNumber\">40</span>filetype indent on\n<span class=\"lineNumber\">41</span><span>\" 修改 leader 键，设置强制提权保存和高亮当前行的优化\n<span class=\"lineNumber\">42</span>let mapleader = ','\n<span class=\"lineNumber\">43</span>noremap &#x3C;Leader>W :w !sudo tee % > /dev/null\n<span class=\"lineNumber\">44</span>highlight CursorLine cterm=NONE ctermbg=NONE ctermfg=NONE guibg=NONE guifg=NONE\n<span class=\"lineNumber\">45</span>set cursorline</span></code></pre> \n\n<p>当我们开始使用<code>vim</code>的时候，<code>.vimrc</code>将会跟着我们的需求变化而变化，如果在使用上有任何特性需求，都可以搜索相关解决方法。</p>\n<h2>刚需</h2>\n<blockquote>\n<p>我的刚需也许不是你的刚需，推荐使用<code>vim-Plug</code>管理插件。</p>\n</blockquote>\n<p>笔者对写代码有以下几个希望能够方便操作的需求：</p>\n<ul>\n<li>文件匹配和切换</li>\n<li>侧边栏目录</li>\n<li>代码补全和注释</li>\n<li>构建错误报告</li>\n<li>代码风格</li>\n<li>编辑器终端</li>\n<li>会话机制</li>\n</ul>\n<p>逐个寻找解决方案。</p>\n<blockquote>\n<p>插件的安装和使用不方便逐一详细说明，其中会需要解决一个个不同场景下的问题，使用者依然需要慢慢找折腾。</p>\n</blockquote>\n<h3>文件匹配和切换</h3>\n<p>我选择极具盛名的<code>fzf</code>命令行模糊查找器，在<code>github</code>上可以轻松找到其仓库，安装之后需要配合<code>vim</code>插件:<code>fzf.vim</code></p>\n<p><a href=\"https://github.com/junegunn/fzf.vim\">junegunn/fzf.vim: fzf vim</a></p>\n<p>看看这命令：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/v2-3671b2af3814a94c9aaa144f53cc02dc_720w.jpg\" alt=\"\"></p>\n<p>使用此插件可以轻松搜索到我们需要的东西，真是神器。</p>\n<p>更多详细的安装和使用知识掠去不表，我觉得网友这一篇已经写得很好了<a href=\"https://zhuanlan.zhihu.com/p/116915939\">fzf.vim 猛男必备超强 vim 搜索插件[视频]</a>，还搭配了视频食用。</p>\n<h3>侧边栏文件目录树</h3>\n<p>大名鼎鼎的<a href=\"https://github.com/preservim/nerdtree\">preservim/nerdtree: A tree explorer plugin for vim.</a>我们依然可以通过添加键盘映射的方式获得跟<code>vscode</code>类似的操作体验。</p>\n<p>例如：</p>\n<pre><code>nnoremap &#x3C;leader>n :NERDTreeFocus&#x3C;CR>\n<span class=\"lineNumber\">2</span>nnoremap &#x3C;C-n> :NERDTree&#x3C;CR>\n<span class=\"lineNumber\">3</span>nnoremap &#x3C;C-t> :NERDTreeToggle&#x3C;CR>\n<span class=\"lineNumber\">4</span>nnoremap &#x3C;C-f> :NERDTreeFind&#x3C;CR></code></pre> \n\n<p>这里对<code>map</code>简单介绍一下：</p>\n<p><code>map a b</code>表示按键映射，按<code>a</code>等于按<code>b</code>。在<code>map</code>前面可以添加默认字符：<code>v</code>/<code>n</code>/<code>i</code>分别代表<code>visual</code>可视化模式/<code>normal</code>普通模式/<code>insert</code>插入模式下的按键映射。</p>\n<p><code>nore</code>等同于<code>no recursive</code>非递归调用，以免引起按键映射异常。</p>\n<p><code>&#x3C;C-n></code>表示组合键<code>ctrl+n</code>，首字母非常好理解，其他按键组合也可以根据首字母来理解。</p>\n<p><code>vim</code>有一个<code>leader</code>键，用于和其他按键配合来实现复杂的组合按键效果。</p>\n<p>我们可以使用<code>let mapleader = ','</code>指定<code>leader</code>键为<code>','</code>。</p>\n<blockquote>\n<p>使用插件很重要的一点就是阅读文档，文档能给我们提供很多信息和解决异常的方法。</p>\n</blockquote>\n<h3>代码补全和注释</h3>\n<p>代码补全我选择了国内大佬<code>jayli</code>开发的<code>vim-easycomplete</code>:</p>\n<p><a href=\"https://github.com/jayli/vim-easycomplete/blob/master/README-cn.md\">vim-easycomplete/README-cn.md at master · jayli/vim-easycomplete</a></p>\n<p>自称为<code>余杭区最好用的vim自动补全插件</code>，不能配合<code>supertab</code>使用。这个插件支持<code>LSP</code>安装，对于需要补全的语言需要安装特定的<code>LSP Server</code>，并且支持输入目录匹配，自此可以实现跟<code>vscode</code>地址补全功能的特性。</p>\n<p><code>vim-easycomplete</code>依赖于<code>LSP Server</code>的引擎支持，可以通过<code>:EasyCompleteInstallServer ${Plugin_Name}</code>来安装插件：</p>\n<p>| 插件名称  | 补全类型/支持语言     | LSP Server 命令        | 快捷安装 LSP 依赖 | 环境依赖    |\n| --------- | --------------------- | ---------------------- | ----------------- | ----------- |\n| directory | 文件路径补全          | 不需要                 | 不需要            | 不需要      |\n| buf       | 关键词/字典补全       | 不需要                 | 不需要            | 不需要      |\n| ts        | JavaScript/TypeScript | tsserver               | Yes               | node/npm    |\n| vim       | Vim                   | vim-language-server    | Yes               | node/npm    |\n| cpp       | C/C++                 | ccls                   | Yes               | ruby/brew   |\n| css       | CSS                   | css-languageserver     | Yes               | node/npm    |\n| html      | html                  | html-languageserver    | Yes               | node/npm    |\n| sh        | Bash                  | bash-language-server   | Yes               | node/npm    |\n| json      | JSON                  | json-languageserver    | Yes               | node/npm    |\n| yml       | Yaml                  | yaml-language-server   | Yes               | node/npm    |\n| py        | Python                | pyls                   | Yes               | python/pip  |\n| java      | Java                  | eclipse-jdt-ls         | Yes               | java/jdk    |\n| go        | Go                    | gopls                  | Yes               | go          |\n| rb        | Ruby                  | solargraph             | Yes               | ruby/bundle |\n| lua       | Lua                   | emmylua-ls             | Yes               | java/jdk    |\n| nim       | Nim                   | nimlsp                 | Yes               | nim/nimble  |\n| grvy      | groovy                | groovy-language-server | Yes               | java/jdk    |\n| snips     | 代码片段补全          | ultisnips/vim-snippets | 不需要            | 不需要      |</p>\n<p>这种程度的支持，能够让我们很好的实现符合要求的代码补全功能，当然还需要安装如下两个插件：</p>\n<pre><code>Plug <span>'SirVer/ultisnips'</span>\n<span class=\"lineNumber\">2</span>Plug <span>'honza/vim-snippets'</span></code></pre> \n\n<p>视扩展管理插件的格式来替换，上述使用了<code>vim-plug</code>的格式。</p>\n<blockquote>\n<p>更多相关配置酌情参考官方文档</p>\n</blockquote>\n<p>注释我选择了：<a href=\"https://github.com/preservim/nerdcommenter\">preservim/nerdcommenter: Vim plugin for intensely nerdy commenting powers</a></p>\n<p>安装后零配置，即可使用<code>&#x3C;leader>cc</code>注释，使用<code>&#x3C;leader>c&#x3C;space></code>取消注释，其他方式请查看官方文档。</p>\n<h3>构建错误报告</h3>\n<p>当代码出现可以优化的部分，或者出现错误的时候，我们希望能够在编辑的时候自动按照某种规则检查代码，并且给出提示，如此一来我们便可以及早对错误和警告进行修复。对此，我们引入一个新的模式：<code>quickfix</code>模式。</p>\n<blockquote>\n<p><code>:copen</code>命令可以打开一个位于底部的<code>quicklist</code>信息窗口</p>\n</blockquote>\n<p><code>quickfix</code>思想即保存一个位置列表，开发者通过一系列的命令实现这个位置列表中的跳转。</p>\n<p>在前端开发中，很少有类似<code>C/C++</code>或<code>Go</code>这样的编译场景，即使是<code>Typescript</code>的编译，通常也交由<code>webpack</code>的工作流去处理，我们需要的是代码<code>linter</code>。</p>\n<p>当代码出现不符合语法和规范的时候，希望能将告警信息和<code>quickfix</code>结合，即需要在编辑器上做出标识，也能让我们拥有<code>quickfix</code>信息提示，以及快速跳转到关键行的能力。</p>\n<h2>推荐资料</h2>\n<ul>\n<li><a href=\"https://learnvimscriptthehardway.stevelosh.com/\">Learn Vimscript the Hard Way</a></li>\n<li><a href=\"https://github.com/wsdjeg/vim-galore-zh_cn\">wsdjeg/vim-galore-zh_cn: Vim 从入门到精通</a></li>\n<li><a href=\"https://item.jd.com/10025575766068.html?cu=true&#x26;utm_source=www.google.com&#x26;utm_medium=tuiguang&#x26;utm_campaign=t_1001542270_1002004306_0_1931988517&#x26;utm_term=f32ba044fccd40d193538fe185580d0d\">《精通Vim：用Vim 8和Neovim实现开发 住·尼尔 电子工业出版社 9787121383281》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/116915939\">fzf.vim 猛男必备超强 vim 搜索插件[视频] - 知乎</a></li>\n<li><a href=\"https://github.com/junegunn/fzf.vim\">junegunn/fzf.vim: fzf vim</a></li>\n</ul>\n","title":"vim之书","date":"2021/7/24","tags":["vim"],"mainImg":"https://images.unsplash.com/photo-1499673610122-01c7122c5dcb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjcxMzg1NzY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1499673610122-01c7122c5dcb?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjcxMzg1NzY&ixlib=rb-1.2.1&q=80&w=400","intro":"我买了一本书叫《精通vim》，所以打算捡起落下的 vim，替换掉现在手里的 vscode。"}},"__N_SSG":true}