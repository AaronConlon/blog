{"pageProps":{"post":{"slug":"Javascript中的数组解构与算法","contentHtml":"<p>JavaScript 中数组的基础知识不再多提.但是在此,依然希望再次巩固一次内置的数组静态方法,及其返回值.</p>\n<p>想要查看<code>JavaScript</code>数组的文档信息,可以看看:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array - JavaScript | MDN</a></p>\n<h1>创建数组</h1>\n<pre><code><span>let</span> arr = <span>new</span> <span>Array</span>() <span>// []</span>\n<span class=\"lineNumber\">2</span>arr = <span>new</span> <span>Array</span>(<span>7</span>) <span>// length is 7, [empty * 7]</span>\n<span class=\"lineNumber\">3</span>arr = <span>new</span> <span>Array</span>(<span>1</span>,<span>2</span>,<span>3</span>) <span>// [1,2,3]</span>\n<span class=\"lineNumber\">4</span>arr = [] <span>// 常用</span>\n<span class=\"lineNumber\">5</span>arr = <span>Array</span>.from({<span>length</span>: <span>3</span>}, <span>(<span>el, index</span>) =></span> index) <span>// [0, 1, 2]</span></code></pre> \n\n<h1>常用方法</h1>\n<p>主要分为:</p>\n<ul>\n<li>添加元素</li>\n<li>删除元素</li>\n<li>迭代</li>\n</ul>\n<p><code>JavaScript</code>内置的数组方法是我们处理数组逻辑的最佳实践.</p>\n<p>首先,添加元素内置从开始和从末尾添加.</p>\n<pre><code><span>const</span> arr = [<span>1</span>,<span>2</span>]\n<span class=\"lineNumber\">2</span>arr.push(<span>3</span>) <span>// arr = [1,2,3], 返回数组添加数据后的长度:3</span>\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span>arr.unshift(<span>0</span>) <span>// arr = [0,1,2,3], 同样返回新长度: 4</span></code></pre> \n\n<p>如果需要组合两个数组,并且将新数组返回可以参考如下代码:</p>\n<pre><code><span>let</span> arr1 = [<span>1</span>]\n<span class=\"lineNumber\">2</span><span>let</span> arr2 = [<span>2</span>]\n<span class=\"lineNumber\">3</span><span>let</span> arr3 = arr1.concat(arr2)\n<span class=\"lineNumber\">4</span><span>// arr3 = [1,2],没有副作用,不会修改原数组</span></code></pre> \n\n<p>其次是删除元素,非常方便:</p>\n<pre><code>arr.pop() <span>// arr = [0,1,2], 返回弹出的末尾元素 3</span></code></pre> \n\n<p>如果是需要从指定位置删除指定数量的元素,则可以使用<code>splice</code>方法.这个方法返回<code>被修改的内容</code>.例如删除了 n 个元素,则以数组的形式返回被删除的元素.如果删除元素为 0,且添加了若干元素,会返回一个<code>空数组</code>.</p>\n<pre><code>arr.splice(<span>5</span>, <span>3</span>)\n<span class=\"lineNumber\">2</span><span>// 删除 index 为 5, 6, 7 的元素,自动修正 length 属性</span>\n<span class=\"lineNumber\">3</span><span>// 如果需要在指定位置插入新数据,也可以实现</span>\n<span class=\"lineNumber\">4</span><span>let</span> a = arr.splice(<span>5</span>, <span>0</span>, <span>1</span>, <span>2</span>) \n<span class=\"lineNumber\">5</span><span>// 下标为 5 为初始插入点,从参数上看,0 指的是删除 0 个数据,后续的 1 和 2 是新插入的数据,自动修正 length</span>\n<span class=\"lineNumber\">6</span><span>// a is []</span></code></pre> \n\n<p>最后,为了灵活操作数组,<code>JavaScript</code>内置了多种迭代方式.</p>\n<pre><code><span>let</span> arr = [<span>1</span>, <span>2</span>, <span>3</span>, <span>4</span>]\n<span class=\"lineNumber\">2</span><span>// every 迭代每个元素,直到迭代函数返回 false,立刻停止并且返回 false</span>\n<span class=\"lineNumber\">3</span>arr.every(<span><span>i</span> =></span> i > <span>0</span>) <span>// 返回 boolean 值 true</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>// 同样依次使用函数迭代,直到此函数返回 true,立刻停止并且返回 true,否则返回 false</span>\n<span class=\"lineNumber\">6</span>arr.some(<span><span>i</span> =></span> i === <span>1</span>) <span>// 返回 true</span>\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span>// 依次迭代每一个元素执行传入的函数,不会提前停止.</span>\n<span class=\"lineNumber\">9</span>arr.forEach(<span><span>i</span> =></span> <span>console</span>.log(i))\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span><span>// 迭代结束后,返回新的数组</span>\n<span class=\"lineNumber\">12</span>arr.filter(<span><span>i</span> =></span> i % <span>2</span>) \n<span class=\"lineNumber\">13</span>=> [<span>1</span>, <span>3</span>]\n<span class=\"lineNumber\">14</span>arr.map(<span><span>i</span> =></span> i*i)\n<span class=\"lineNumber\">15</span>=> [<span>1</span>, <span>4</span>, <span>9</span>, <span>16</span>]\n<span class=\"lineNumber\">16</span> \n<span class=\"lineNumber\">17</span><span>// 实现累加</span>\n<span class=\"lineNumber\">18</span>arr.reduce(<span>(<span>prev, current</span>) =></span> prev + current, <span>0</span>)\n<span class=\"lineNumber\">19</span><span>// 接收的函数还支持继续添加起始 index 和数组array</span></code></pre> \n\n<p><code>ES6</code>继续带来了更多的数组功能,减少了外部库的载入和开发者的开发量.</p>\n<ul>\n<li>@@iterator: 默认与 values() 返回值一致,可以用<code>for..of..</code>迭代,返回一个迭代器,主要通过<code>Symbol.iterator</code>访问.</li>\n<li>copyWithin: 强悍的修改自身数组的方法,可以指定<code>target</code>为复制到自身的位置,<code>start</code>和<code>end</code>为复制区间,复制过程会动态调整复制内容,但是总体本身的<code>length</code>不变,最后修改自身数组并返回.</li>\n<li>entries: 返回包含数组所有键值对的@@iterator,如果使用<code>for..of</code>循环,每次<code>item</code>是一个数组,下标 0 是 key,1 是 value.</li>\n<li>includes: ES7 新增,支持查询是否包含查询目标,支持查询<code>NaN</code>.</li>\n<li>find: 数组查询,接收一个查询函数作为参数,找到则返回第一个值,否则返回<code>undefined</code>.</li>\n<li>findIndex:类似<code>find</code>,只是返回下标或者<code>-1</code></li>\n<li>fill: 有趣的静态填充方法,指定填充内容,起始位置和结束位置,不包括结束位置,无返回值.</li>\n<li>from: 根据已有数组创建新数组并且返回.注意是浅拷贝的.还支持提供<code>mapFn</code>和<code>thisArg</code>,指定每个数组的回调函数和<code>this</code>对象.可以使用<code>Array.from({length: 2}, (el, i) => i)</code>创建数组<code>[0, 1]</code>.</li>\n<li>keys: 返回数组所有索引的@@iterator.</li>\n<li>values: 返回数组所有值的@@iterator.</li>\n<li>of: 函子,根据传入的参数创建数组.每个参数都是新数组的一个值.</li>\n</ul>\n<h1>多维数组</h1>\n<p>如果我们需要存储周一到周五每天上午和下午的天气,则可以使用如下多维数组:</p>\n<pre><code><span>const</span> weather = []\n<span class=\"lineNumber\">2</span><span>// 周一</span>\n<span class=\"lineNumber\">3</span>weather[<span>0</span>][<span>0</span>] = <span>'晴'</span> <span>//上午</span>\n<span class=\"lineNumber\">4</span>weather[<span>0</span>][<span>1</span>] = <span>'阴'</span> <span>//下午</span>\n<span class=\"lineNumber\">5</span><span>// 周二</span>\n<span class=\"lineNumber\">6</span>weather[<span>1</span>][<span>0</span>] = <span>'雨'</span>\n<span class=\"lineNumber\">7</span>weather[<span>1</span>][<span>1</span>] = <span>'阴'</span></code></pre> \n\n<p>遍历的时候采用两层 for 循环即可.另外,在浏览器中可以使用<code>console.table(weather)</code>提供一个多维表格,更好的显示多维数组.</p>\n<h1>类型数组</h1>\n<p><code>JavaScript</code>默认数组支持存储多种类型数据,但是也支持类型数组,常用的类型数组比如:</p>\n<ul>\n<li>Int8Array</li>\n<li>Unit8Array</li>\n<li>...</li>\n</ul>\n<p>类型数组在操作<code>webGL</code>,处理文件和图像的时候更常用.平时我接触的实在太少,此时便是无话可说.</p>\n<p>2020年12月30日21:28:15 那么,再会.</p>\n","title":"Javascript中的数组解构与算法","date":"2020/12/29","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1580706483913-b6ea7db483a0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1580706483913-b6ea7db483a0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"几乎所有的编程语言都内置支持了数组类型,数组简单而有效,应用及其广泛.大多数编程语言的数组存储同一类型的值,而 JavaScript 则支持存储不同的值,但建议大家遵守最佳实践,避免这么做."}},"__N_SSG":true}