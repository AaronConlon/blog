{"pageProps":{"post":{"slug":"webpack-react-环境配置","contentHtml":"<p>这份配置包括以下几点：</p>\n<ul>\n<li>babel presets</li>\n<li>webpack dev server</li>\n<li>Hot module replacement</li>\n<li>miniCssExtractPlugin</li>\n<li>postCss</li>\n<li>Eslint autofix + Prettier</li>\n</ul>\n<h2>初始化</h2>\n<pre><code>yarn init -y\n<span class=\"lineNumber\">2</span>yarn add react react-dom\n<span class=\"lineNumber\">3</span>yarn add -D webpack webpack-cli webpack-dev-server@next\n<span class=\"lineNumber\">4</span>// init webpack config\n<span class=\"lineNumber\">5</span>npx webpack init</code></pre> \n\n<p>根据需求填写交互，最后得到配置文件<code>webpack.config.js</code>:</p>\n<pre><code><span>// Generated using webpack-cli https://github.com/webpack/webpack-cli</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span>const</span> path = <span>require</span>(<span>\"path\"</span>);\n<span class=\"lineNumber\">4</span><span>const</span> HtmlWebpackPlugin = <span>require</span>(<span>\"html-webpack-plugin\"</span>);\n<span class=\"lineNumber\">5</span><span>const</span> MiniCssExtractPlugin = <span>require</span>(<span>\"mini-css-extract-plugin\"</span>);\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>const</span> isProduction = process.env.NODE_ENV == <span>\"production\"</span>;\n<span class=\"lineNumber\">8</span><span>const</span> stylesHandler = MiniCssExtractPlugin.loader;\n<span class=\"lineNumber\">9</span><span>const</span> config = {\n<span class=\"lineNumber\">10</span>  <span>entry</span>: <span>\"./src/index.js\"</span>,\n<span class=\"lineNumber\">11</span>  <span>output</span>: {\n<span class=\"lineNumber\">12</span>    <span>path</span>: path.resolve(__dirname, <span>\"dist\"</span>),\n<span class=\"lineNumber\">13</span>  },\n<span class=\"lineNumber\">14</span>  <span>devServer</span>: {\n<span class=\"lineNumber\">15</span>    <span>open</span>: <span>true</span>,\n<span class=\"lineNumber\">16</span>    <span>host</span>: <span>\"localhost\"</span>,\n<span class=\"lineNumber\">17</span>    <span>hot</span>: <span>true</span>,\n<span class=\"lineNumber\">18</span>  },\n<span class=\"lineNumber\">19</span>  <span>plugins</span>: [\n<span class=\"lineNumber\">20</span>    <span>new</span> HtmlWebpackPlugin({\n<span class=\"lineNumber\">21</span>      <span>template</span>: <span>\"index.html\"</span>,\n<span class=\"lineNumber\">22</span>    }),\n<span class=\"lineNumber\">23</span> \n<span class=\"lineNumber\">24</span>    <span>// Add your plugins here</span>\n<span class=\"lineNumber\">25</span>    <span>// Learn more about plugins from https://webpack.js.org/configuration/plugins/</span>\n<span class=\"lineNumber\">26</span>  ],\n<span class=\"lineNumber\">27</span>  <span>module</span>: {\n<span class=\"lineNumber\">28</span>    <span>rules</span>: [\n<span class=\"lineNumber\">29</span>      {\n<span class=\"lineNumber\">30</span>        <span>test</span>: <span>/\\.(js|jsx)$/i</span>,\n<span class=\"lineNumber\">31</span>        loader: <span>\"babel-loader\"</span>,\n<span class=\"lineNumber\">32</span>      },\n<span class=\"lineNumber\">33</span>      {\n<span class=\"lineNumber\">34</span>        <span>test</span>: <span>/\\.s[ac]ss$/i</span>,\n<span class=\"lineNumber\">35</span>        use: [stylesHandler, <span>\"css-loader\"</span>, <span>\"postcss-loader\"</span>, <span>\"sass-loader\"</span>],\n<span class=\"lineNumber\">36</span>      },\n<span class=\"lineNumber\">37</span>      {\n<span class=\"lineNumber\">38</span>        <span>test</span>: <span>/\\.(eot|svg|ttf|woff|woff2|png|jpg|gif)$/i</span>,\n<span class=\"lineNumber\">39</span>        type: <span>\"asset\"</span>,\n<span class=\"lineNumber\">40</span>      },\n<span class=\"lineNumber\">41</span> \n<span class=\"lineNumber\">42</span>      <span>// Add your rules for custom modules here</span>\n<span class=\"lineNumber\">43</span>      <span>// Learn more about loaders from https://webpack.js.org/loaders/</span>\n<span class=\"lineNumber\">44</span>    ],\n<span class=\"lineNumber\">45</span>  },\n<span class=\"lineNumber\">46</span>};\n<span class=\"lineNumber\">47</span> \n<span class=\"lineNumber\">48</span><span>module</span>.exports = <span>() =></span> {\n<span class=\"lineNumber\">49</span>  <span>if</span> (isProduction) {\n<span class=\"lineNumber\">50</span>    config.mode = <span>\"production\"</span>;\n<span class=\"lineNumber\">51</span> \n<span class=\"lineNumber\">52</span>    config.plugins.push(\n<span class=\"lineNumber\">53</span>      <span>new</span> MiniCssExtractPlugin({\n<span class=\"lineNumber\">54</span>        <span>filename</span>: <span>\"css/[name].[hash].css\"</span>,\n<span class=\"lineNumber\">55</span>      })\n<span class=\"lineNumber\">56</span>    );\n<span class=\"lineNumber\">57</span>  } <span>else</span> {\n<span class=\"lineNumber\">58</span>    config.mode = <span>\"development\"</span>;\n<span class=\"lineNumber\">59</span>  }\n<span class=\"lineNumber\">60</span>  <span>return</span> config;\n<span class=\"lineNumber\">61</span>};</code></pre> \n\n<p>顺利安装后，我们就实现了需求，来分析分析这份配置文件：</p>\n<ul>\n<li>根据 node 环境设置开发模式</li>\n<li>使用<code>miniCssExtractPlugin</code>来单独提取<code>css</code>文件</li>\n<li>使用<code>babel</code>处理<code>js</code>文件</li>\n<li>自动配置<code>postCss</code>支持厂商前缀自动修复</li>\n<li>安装<code>prettier</code>格式化代码，保证代码风格</li>\n<li>默认初始化<code>scripts</code>，支持开发模式切换</li>\n<li>支持<code>sass</code>的开发和编译</li>\n</ul>\n<p>这是最基础的功能，<code>webpack-cli</code>就能很好的支持到。</p>\n<p>接下来就是配置<code>babel</code>相关的特性，为了支持<code>react</code>的<code>jsx</code>写法，需要使用<code>@babel/preset-react</code>的功能：</p>\n<p>首先务必安装<code>balel</code>一系列的包，并且配置好<code>.babelrc</code>:</p>\n<pre><code>yarn add @babel/core @babel/preset-env @babel/preset-react babel-loader</code></pre> \n\n<p><code>.babelrc</code>:</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>    <span>\"plugins\"</span>: [<span>\"@babel/syntax-dynamic-import\"</span>],\n<span class=\"lineNumber\">3</span>    <span>\"presets\"</span>: [\n<span class=\"lineNumber\">4</span>        [\n<span class=\"lineNumber\">5</span>            <span>\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">6</span>            {\n<span class=\"lineNumber\">7</span>                <span>\"useBuiltIns\"</span>: <span>\"usage\"</span>,\n<span class=\"lineNumber\">8</span>                <span>\"corejs\"</span>: {\n<span class=\"lineNumber\">9</span>                  <span>\"version\"</span>: <span>\"3.16\"</span>,\n<span class=\"lineNumber\">10</span>                  <span>\"proposals\"</span>: <span>false</span>,\n<span class=\"lineNumber\">11</span>                },\n<span class=\"lineNumber\">12</span>            }\n<span class=\"lineNumber\">13</span>        ],\n<span class=\"lineNumber\">14</span>        <span>\"@babel/preset-react\"</span>\n<span class=\"lineNumber\">15</span>    ]\n<span class=\"lineNumber\">16</span>}</code></pre> \n\n<p><code>@babel/preset-env</code>还要注意的一个点是代码预置需要一个<code>targets</code>，用于指定代码预置的目标，例如我们只需要支持到最新版本的<code>chrome</code>，我们可以通过<code>.browserslistrc</code>配置文件设置，<code>webpack-cli</code>会读取这个文件的配置，并且此文件还可以和多个库协作，例如<code>postcss</code>等第三方库都能无缝使用其配置。</p>\n<p>如果不配置，则使用默认值。<code>npx browserslist 'default'</code>能够查看当前版本的默认值：</p>\n<pre><code>and_chr 92\n<span class=\"lineNumber\">2</span>and_ff 90\n<span class=\"lineNumber\">3</span>and_qq 10.4\n<span class=\"lineNumber\">4</span>and_uc 12.12\n<span class=\"lineNumber\">5</span>android 92\n<span class=\"lineNumber\">6</span>baidu 7.12\n<span class=\"lineNumber\">7</span>chrome 92\n<span class=\"lineNumber\">8</span>chrome 91\n<span class=\"lineNumber\">9</span>chrome 90\n<span class=\"lineNumber\">10</span>edge 92\n<span class=\"lineNumber\">11</span>edge 91\n<span class=\"lineNumber\">12</span>firefox 90\n<span class=\"lineNumber\">13</span>firefox 89\n<span class=\"lineNumber\">14</span>firefox 78\n<span class=\"lineNumber\">15</span>ie 11\n<span class=\"lineNumber\">16</span>ios_saf 14.5-14.7\n<span class=\"lineNumber\">17</span>ios_saf 14.0-14.4\n<span class=\"lineNumber\">18</span>kaios 2.5\n<span class=\"lineNumber\">19</span>op_mini all\n<span class=\"lineNumber\">20</span>op_mob 64\n<span class=\"lineNumber\">21</span>opera 77\n<span class=\"lineNumber\">22</span>opera 76\n<span class=\"lineNumber\">23</span>safari 14.1\n<span class=\"lineNumber\">24</span>safari 14\n<span class=\"lineNumber\">25</span>safari 13.1\n<span class=\"lineNumber\">26</span>samsung 14.0\n<span class=\"lineNumber\">27</span>samsung 13.0</code></pre> \n\n<p>详情可查看<a href=\"https://github.com/browserslist/browserslist\">browserslist/browserslist: Share target browsers ... - GitHubhttps://github.com › browserslist › browserslist</a>。</p>\n<p>如此一来，我们便将代码预置环境和<code>polyfill</code>配置好了。</p>\n<p><code>@babel/preset-env</code>的<code>polyfill</code>方案会污染全局环境，并且相关的<code>helper</code>函数复用较差导致打包体积较大，但是由于目前并不需要开发库，因此在这里就不细究<code>@babel/plugin-transform-runtime</code>了。</p>\n<h2>代码检查</h2>\n<p>代码检查包括语法检查和代码风格检查，<code>eslint</code>负责主要语法检查，并且在代码风格方面使用<code>airbnb</code>的规范的同时，与<code>prettier</code>冲突的部分由<code>prettier</code>的规则决定。</p>\n<p>最后，在代码提交之前进行<code>prettier</code>代码格式化。</p>\n<p>首先来看看<code>prettier</code>和<code>eslint</code>的配置文件：</p>\n<pre><code><span>// prettier</span>\n<span class=\"lineNumber\">2</span><span>module</span>.exports = {\n<span class=\"lineNumber\">3</span>  <span>semi</span>: <span>true</span>,\n<span class=\"lineNumber\">4</span>  <span>singleQuote</span>: <span>true</span>,\n<span class=\"lineNumber\">5</span>};\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>// eslint</span>\n<span class=\"lineNumber\">8</span><span>module</span>.exports = {\n<span class=\"lineNumber\">9</span>  <span>env</span>: {\n<span class=\"lineNumber\">10</span>    <span>browser</span>: <span>true</span>,\n<span class=\"lineNumber\">11</span>    <span>es2021</span>: <span>true</span>,\n<span class=\"lineNumber\">12</span>  },\n<span class=\"lineNumber\">13</span>  <span>extends</span>: [<span>\"plugin:react/recommended\"</span>, <span>\"airbnb\"</span>, <span>\"prettier\"</span>],\n<span class=\"lineNumber\">14</span>  <span>parserOptions</span>: {\n<span class=\"lineNumber\">15</span>    <span>ecmaFeatures</span>: {\n<span class=\"lineNumber\">16</span>      <span>jsx</span>: <span>true</span>,\n<span class=\"lineNumber\">17</span>    },\n<span class=\"lineNumber\">18</span>    <span>ecmaVersion</span>: <span>12</span>,\n<span class=\"lineNumber\">19</span>    <span>sourceType</span>: <span>\"module\"</span>,\n<span class=\"lineNumber\">20</span>  },\n<span class=\"lineNumber\">21</span>  <span>plugins</span>: [<span>\"react\"</span>],\n<span class=\"lineNumber\">22</span>  <span>rules</span>: {\n<span class=\"lineNumber\">23</span>    <span>\"no-console\"</span>: <span>\"off\"</span>,\n<span class=\"lineNumber\">24</span>    <span>\"react/jsx-filename-extension\"</span>: [<span>1</span>, { <span>extensions</span>: [<span>\".js\"</span>, <span>\".jsx\"</span>] }],\n<span class=\"lineNumber\">25</span>  },\n<span class=\"lineNumber\">26</span>};</code></pre> \n\n<p><code>.eslintrc.js</code>是通过<code>npx eslint --init</code>创建的，只是添加了<code>eslint-config-prettier</code>来消除<code>eslint</code>和<code>prettier</code>的冲突。</p>\n<p>如此一来，代码在编辑的时候就能够支持到自动格式化和错误提示了。</p>\n<p>补充一点，使用<code>stylelint</code>来规范我们的<code>sass</code>样式表。</p>\n<p>首先需要安装：</p>\n<p><code>yarn add -D stylelint stylelint-scss</code></p>\n<p>针对性的，目前我只需要写一些单独的<code>sass</code>文件，因此只需要使用此插件来实现代码风格检查，如果后续需要写<code>styled-component</code>，则可以寻找其扩展。</p>\n<p>另外，依然推荐使用<a href=\"https://github.com/hudochenkov/stylelint-order\">hudochenkov/stylelint-order: A plugin pack of order related linting rules for stylelint.</a>这个语法排序的插件，能够让我们的代码保持顺序和提高可读性，另外顺序的规则最好配合<a href=\"https://github.com/ream88/stylelint-config-idiomatic-order\">ream88/stylelint-config-idiomatic-order: stylelint + idiomatic-css = ❤️</a>使用。</p>\n<p>最后，为了让<code>prettier</code>格式化的时候不跟<code>stylelint</code>冲突，我们需要：<a href=\"https://github.com/prettier/stylelint-config-prettier\">prettier/stylelint-config-prettier: Turns off all rules that are unnecessary or might conflict with prettier.</a>的支持，在<code>.stylelintrc</code>中添加最后一个扩展配置。</p>\n<h2>Git 提交</h2>\n<p>最后是<code>在 git 提交之前格式化代码，并且规范化 git info body</code>。</p>\n<p>我们将使用<code>lint-staged</code>和<code>husky</code>来实现这个需求。</p>\n<p>一把梭：</p>\n<p><code>npx mrm@2 lint-staged</code>可以根据我们已经配置好的各种<code>linter</code>的配置，生成<code>package.json</code>中的<code>lint-staged</code>配置，调用各种<code>linter</code>去处理目标文件。</p>\n<p>最后，还需要引入<code>commitlint</code>来规范提交的<code>git</code>信息。</p>\n<p>全局安装好这个非常有用的工具，并且初始化一份简单的配置文件：</p>\n<pre><code>// install package\n<span class=\"lineNumber\">2</span>npm install -g @commitlint/cli @commitlint/config-conventional\n<span class=\"lineNumber\">3</span>// init config\n<span class=\"lineNumber\">4</span><span>echo</span> <span>\"module.exports = {extends: ['@commitlint/config-conventional']}\"</span> > commitlint.config.js</code></pre> \n\n<p>最后，我们手动添加一个<code>commitlint</code>的<code>hooks</code>:</p>\n<pre><code><span># Add hook</span>\n<span class=\"lineNumber\">2</span>npx husky add .husky/commit-msg <span>'npx --no-install commitlint --edit $1'</span>\n<span class=\"lineNumber\">3</span><span># or</span>\n<span class=\"lineNumber\">4</span>yarn husky add .husky/commit-msg <span>'yarn commitlint --edit $1'</span></code></pre> \n\n<h2>优化</h2>\n<ul>\n<li>Friendly-errors-webpack-plugin 优化输出信息</li>\n<li><a href=\"https://www.toptal.com/developers/gitignore\">gitignore.io - 为你的项目创建必要的 .gitignore 文件</a></li>\n<li>其他</li>\n</ul>\n","title":"webpack-react-环境配置","date":"2021/8/8","tags":["工程化"],"mainImg":"https://images.unsplash.com/photo-1603302576837-37561b2e2302?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mjg0MTc2NjE&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1603302576837-37561b2e2302?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mjg0MTc2NjE&ixlib=rb-1.2.1&q=80&w=400","intro":"一份手动配置的 react 开发环境配置记录📝。"}},"__N_SSG":true}