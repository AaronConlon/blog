{"pageProps":{"post":{"slug":"从实现Koa文件上传接口学到的东西","contentHtml":"<h1>前言</h1>\n<blockquote>\n<p>“挺水的。”</p>\n<p>“比没有好！”</p>\n</blockquote>\n<p>我在写后端程序之前，阅读了<code>《狼书：Node.js Web 应用开发》</code>，选择了<code>koa-bodyparser</code>作为数据类型解析中间件，但是在需要实现文件上传的时候发现<code>koa-bodyparser</code>不支持<code>enctype=\"multipart/form-data\"</code>。</p>\n<p>在 GitHub 的 issue 板块，其核心开发者回复使用<code>busboy</code>这个库，但是看起来已经很多年没有更新文档了，于是我查找到了<code>koa-body</code>来代替<code>koa-bodyparser</code>。</p>\n<h1>使用过程</h1>\n<p>在<code>koa-body</code>的仓库<code>README</code>界面上可以看到其功能特性：</p>\n<p><a href=\"https://github.com/koajs/koa-body\">koajs/koa-body: koa body parser middleware</a></p>\n<ul>\n<li>can handle requests such as:\n<ul>\n<li><strong>multipart/form-data</strong></li>\n<li><strong>application/x-www-urlencoded</strong></li>\n<li><strong>application/json</strong></li>\n<li><strong>application/json-patch+json</strong></li>\n<li><strong>application/vnd.api+json</strong></li>\n<li><strong>application/csp-report</strong></li>\n<li><strong>text/xml</strong></li>\n</ul>\n</li>\n<li>option for patch to Koa or Node, or either</li>\n<li>file uploads</li>\n<li>body, fields and files size limiting</li>\n</ul>\n<p>👌🏻，支持<code>multipart/form-data</code>和文件上传，对于后端接口也提供了良好的<code>json</code>解析支持。安装好了之后，按需要的功能进行实例化，然后作为一个中间件来使用即可。</p>\n<pre><code><span>const</span> koaBody = <span>require</span>(<span>\"koa-body\"</span>)\n<span class=\"lineNumber\">2</span>...\n<span class=\"lineNumber\">3</span>app.use(koaBody({\n<span class=\"lineNumber\">4</span>  <span>json</span>: <span>true</span>, <span>// 开启 json 支持</span>\n<span class=\"lineNumber\">5</span>  <span>multipart</span>: <span>true</span>, <span>// 开启 multipart/form-data 支持</span>\n<span class=\"lineNumber\">6</span>  <span>formlimit</span>: <span>2</span> * <span>1024</span> * <span>1024</span>, <span>// 传输大小限制，默认 56 kb</span>\n<span class=\"lineNumber\">7</span>  <span>formidable</span>: {\n<span class=\"lineNumber\">8</span>    <span>uploadDir</span>: process.env.UPLOAD_PATH, <span>// 上传保存目录</span>\n<span class=\"lineNumber\">9</span>    <span>hash</span>: ‘md5’, <span>// 计算哈希值，提供算法 md1 or sha1</span>\n<span class=\"lineNumber\">10</span>    <span>keepExtensions</span>: <span>true</span>, <span>// 保留扩展名</span>\n<span class=\"lineNumber\">11</span>    <span>multiples</span>: <span>false</span>, <span>// 禁止多文件上传</span>\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>}))</code></pre> \n\n<p>可以从仓库文档看到还可以做其他操作，例如保存前重命名，这类操作都通过配置对象实例化的方式来实现。</p>\n<p>然后，我们就可以从路由函数里通过<code>ctx.request.files</code>获取到上传的文件信息，包括保存位置、扩展名‘文件名、哈希值、大小等等。</p>\n<p>我想过对于重复上传相同哈希值的文件做拦截，后来在其<code>issue</code>板块发现有人提过这个问题，这个<code>issue</code>没有关闭，有人提议使用<code>fs</code>模块做处理，暂时好像只能这样。</p>\n<h1>其他</h1>\n<h2>curl</h2>\n<p>写好了接口，我打算使用<code>curl</code>来测试，其上传命令如下：</p>\n<pre><code>$ curl -F <span>'upload_filename=@demo.jpg'</span> http://localhost/upload</code></pre> \n\n<p>提供<code>-F</code>参数指定请求POST类型并且添加<code>enctype=\"multipart/form-data</code>，指定上传文件名和文件路径。</p>\n<blockquote>\n<p>如果想上传多个文件，则继续添加 <code>-F xxx</code>即可</p>\n</blockquote>\n<h2>Vim</h2>\n<p>我最近在坚持使用<code>vim</code>进行编程，今晚遇到一个问题，我希望显示相对行数，并且当前行显示为所在行的行数。</p>\n<p>其配置为：</p>\n<pre><code><span>set</span> number relativenumber\n<span class=\"lineNumber\">2</span><span># or set nu rnu</span></code></pre> \n\n<p>单纯使用<code>set rnu</code>会让所有行都为相对行数，当前行为<code>0</code>，<code>vim7.4</code>版本后提供了<code>Hybird</code>混合模式，可以实现我的需求。</p>\n<h2>文件压缩和下载</h2>\n<p>此需求在网上看到了一个很好的方案，可以从参考 2 访问到，在这先略过。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://jeffkreeftmeijer.com/vim-number/\">Vim’s absolute, relative and hybrid line numbers</a></li>\n<li><a href=\"https://cheatcode.co/tutorials/how-to-create-and-download-a-zip-file-with-node-js-and-javascript\">How to Create and Download a Zip File with Node.js and JavaScript | CheatCode</a></li>\n</ul>\n","title":"从实现Koa文件上传接口学到的东西","date":"2021/10/31","tags":["Node","Koa"],"mainImg":"https://images.unsplash.com/photo-1593720216276-0caa6452e004?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzU2MTQwODc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1593720216276-0caa6452e004?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzU2MTQwODc&ixlib=rb-1.2.1&q=80&w=400","intro":"最近在写浏览器扩展的后端程序，框架选择了 Koa ，新实现了文件上传的功能，在这里简单记录一下。"}},"__N_SSG":true}