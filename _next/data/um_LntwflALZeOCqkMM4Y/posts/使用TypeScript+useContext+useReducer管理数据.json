{"pageProps":{"post":{"slug":"使用TypeScript+useContext+useReducer管理数据","contentHtml":"<h3>前言</h3>\n<p>在不引入第三方库的情况下，React Context 可以使用内置的<code>useContext</code>和<code>useReducer</code>两个钩子来创建状态管理模块。</p>\n<h3>代码</h3>\n<p>首先，在项目根目录下创建<code>contexts</code>目录，内部存放所有的<code>context</code>，可以根据不同的用途创建不同的目录，内层创建三个文件：</p>\n<ul>\n<li>context.ts 存放核心 context</li>\n<li>reducer.ts 存放数据变更专用的 reducer</li>\n<li>types.ts 存放 TypeScript 类型和接口定义</li>\n</ul>\n<h4>context</h4>\n<p>代码如下：</p>\n<pre><code><span>import</span> React, { createContext, useContext } <span>from</span> <span>\"react\"</span>;\n<span class=\"lineNumber\">2</span><span>import</span> { IState, IRootAction } <span>from</span> <span>\"./types\"</span>;\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span>// 定义初始状态值</span>\n<span class=\"lineNumber\">5</span><span>export</span> <span>const</span> initState: IState = {\n<span class=\"lineNumber\">6</span>  <span>count</span>: <span>0</span>,\n<span class=\"lineNumber\">7</span>  <span>profile</span>: {\n<span class=\"lineNumber\">8</span>    <span>name</span>: <span>\"Aaron\"</span>,\n<span class=\"lineNumber\">9</span>    <span>age</span>: <span>100</span>,\n<span class=\"lineNumber\">10</span>  },\n<span class=\"lineNumber\">11</span>};\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span><span>// 定义 context，使用 createContext api</span>\n<span class=\"lineNumber\">14</span><span>export</span> <span>const</span> RootContext = createContext&#x3C;{\n<span class=\"lineNumber\">15</span>  <span>state</span>: IState;\n<span class=\"lineNumber\">16</span>  dispatch: React.Dispatch&#x3C;IRootAction>;\n<span class=\"lineNumber\">17</span>}>({\n<span class=\"lineNumber\">18</span>  <span>state</span>: initState,\n<span class=\"lineNumber\">19</span>  <span>dispatch</span>: <span>() =></span> <span>null</span>,\n<span class=\"lineNumber\">20</span>});\n<span class=\"lineNumber\">21</span> \n<span class=\"lineNumber\">22</span><span>// 导出 context 的 provider，用于放置 context</span>\n<span class=\"lineNumber\">23</span><span>export</span> <span>const</span> RootContextProvider = RootContext.Provider;\n<span class=\"lineNumber\">24</span><span>// 导出 hooks ，便于获取 state 和 dispatch 函数</span>\n<span class=\"lineNumber\">25</span><span>export</span> <span>const</span> useRootContext = <span>() =></span> useContext(RootContext);</code></pre> \n\n<h4>reducer</h4>\n<p>代码如下：</p>\n<pre><code><span>import</span> { IState, IRootAction } <span>from</span> <span>\"./types\"</span>;\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span>// 定义 reducer 的参数类型</span>\n<span class=\"lineNumber\">4</span><span>export</span> <span>const</span> rootReducer = (state: IState, <span>action</span>: IRootAction): <span><span>IState</span> =></span> {\n<span class=\"lineNumber\">5</span>  <span>const</span> { <span>type</span>, payload } = action;\n<span class=\"lineNumber\">6</span>  <span>// 根据类型进行处理，返回最终的 state</span>\n<span class=\"lineNumber\">7</span>  <span>switch</span> (<span>type</span>) {\n<span class=\"lineNumber\">8</span>    <span>case</span> <span>\"add_count\"</span>:\n<span class=\"lineNumber\">9</span>      <span>return</span> {\n<span class=\"lineNumber\">10</span>        ...state,\n<span class=\"lineNumber\">11</span>        <span>count</span>: state.count + (payload <span>as</span> <span>number</span>),\n<span class=\"lineNumber\">12</span>      };\n<span class=\"lineNumber\">13</span>    <span>case</span> <span>\"sub_count\"</span>:\n<span class=\"lineNumber\">14</span>      <span>return</span> {\n<span class=\"lineNumber\">15</span>        ...state,\n<span class=\"lineNumber\">16</span>        <span>count</span>: state.count - (payload <span>as</span> <span>number</span>),\n<span class=\"lineNumber\">17</span>      };\n<span class=\"lineNumber\">18</span>    <span>case</span> <span>\"update_profile\"</span>:\n<span class=\"lineNumber\">19</span>      <span>return</span> {\n<span class=\"lineNumber\">20</span>        ...state,\n<span class=\"lineNumber\">21</span>        <span>profile</span>: payload <span>as</span> <span>typeof</span> state.profile,\n<span class=\"lineNumber\">22</span>      };\n<span class=\"lineNumber\">23</span>    <span>default</span>:\n<span class=\"lineNumber\">24</span>      <span>return</span> state;\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span>};</code></pre> \n\n<h4>types</h4>\n<p>共用的类型值：</p>\n<pre><code><span>export</span> <span>interface</span> IState {\n<span class=\"lineNumber\">2</span>  <span>count</span>: <span>number</span>;\n<span class=\"lineNumber\">3</span>  profile?: {\n<span class=\"lineNumber\">4</span>    <span>name</span>: <span>string</span>;\n<span class=\"lineNumber\">5</span>    age: <span>number</span>;\n<span class=\"lineNumber\">6</span>  };\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span>export</span> <span>interface</span> IRootAction {\n<span class=\"lineNumber\">10</span>  <span>type</span>: <span>\"add_count\"</span> | <span>\"sub_count\"</span> | <span>\"update_profile\"</span>;\n<span class=\"lineNumber\">11</span>  payload:\n<span class=\"lineNumber\">12</span>    | <span>number</span>\n<span class=\"lineNumber\">13</span>    | {\n<span class=\"lineNumber\">14</span>        <span>name</span>: <span>string</span>;\n<span class=\"lineNumber\">15</span>        age: <span>number</span>;\n<span class=\"lineNumber\">16</span>      };\n<span class=\"lineNumber\">17</span>}</code></pre> \n\n<h3>用法和解析</h3>\n<p>此时，只要在顶层使用 provider 即可：</p>\n<pre><code><span>import</span> { useReducer } <span>from</span> <span>\"react\"</span>;\n<span class=\"lineNumber\">2</span><span>import</span> { Link } <span>from</span> <span>\"react-router-dom\"</span>;\n<span class=\"lineNumber\">3</span><span>import</span> { BrowserRouter, Route, Routes } <span>from</span> <span>\"react-router-dom\"</span>;\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>import</span> <span>\"./App.css\"</span>;\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>import</span> Total <span>from</span> <span>\"routes/total\"</span>;\n<span class=\"lineNumber\">8</span><span>import</span> Home <span>from</span> <span>\"routes/home\"</span>;\n<span class=\"lineNumber\">9</span><span>import</span> { rootReducer } <span>from</span> <span>\"contexts/root/reducer\"</span>;\n<span class=\"lineNumber\">10</span><span>import</span> { initState, RootContextProvider } <span>from</span> <span>\"contexts/root/context\"</span>;\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span><span><span>function</span> <span>App</span>(<span></span>) </span>{\n<span class=\"lineNumber\">13</span>  <span>const</span> [state, dispatch] = useReducer(rootReducer, initState);\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span>  <span>return</span> (\n<span class=\"lineNumber\">16</span>    <span><span>&#x3C;<span>RootContextProvider</span> <span>value</span>=<span>{{</span> <span>state</span>, <span>dispatch</span> }}></span>\n<span class=\"lineNumber\">17</span>      <span>&#x3C;<span>BrowserRouter</span>></span>\n<span class=\"lineNumber\">18</span>        <span>&#x3C;<span>div</span> <span>className</span>=<span>\"navs\"</span>></span>\n<span class=\"lineNumber\">19</span>          <span>&#x3C;<span>Link</span> <span>to</span>=<span>{</span>\"/\"}></span>Home<span>&#x3C;/<span>Link</span>></span>\n<span class=\"lineNumber\">20</span>          <span>&#x3C;<span>Link</span> <span>to</span>=<span>{</span>\"/<span>total</span>\"}></span>Total<span>&#x3C;/<span>Link</span>></span>\n<span class=\"lineNumber\">21</span>        <span>&#x3C;/<span>div</span>></span>\n<span class=\"lineNumber\">22</span>        <span>&#x3C;<span>Routes</span>></span>\n<span class=\"lineNumber\">23</span>          <span>&#x3C;<span>Route</span> <span>path</span>=<span>{</span>\"/\"} <span>element</span>=<span>{</span>&#x3C;<span>Home</span> /></span>} />\n<span class=\"lineNumber\">24</span>          <span>&#x3C;<span>Route</span> <span>path</span>=<span>{</span>\"/<span>total</span>\"} <span>element</span>=<span>{</span>&#x3C;<span>Total</span> /></span>} />\n<span class=\"lineNumber\">25</span>        <span>&#x3C;/<span>Routes</span>></span>\n<span class=\"lineNumber\">26</span>      <span>&#x3C;/<span>BrowserRouter</span>></span>\n<span class=\"lineNumber\">27</span>    <span>&#x3C;/<span>RootContextProvider</span>></span></span>\n<span class=\"lineNumber\">28</span>  );\n<span class=\"lineNumber\">29</span>}\n<span class=\"lineNumber\">30</span> \n<span class=\"lineNumber\">31</span><span>export</span> <span>default</span> App;</code></pre> \n\n<p>关键在于使用 <code>useReducer</code>传入<code>reducer</code>和默认数据，得到包含<code>state</code>和<code>dispatch</code>的数组，将二者传给<code>Provider</code>的<code>value</code>参数即可。</p>\n<p>后续组件便可以如此：</p>\n<pre><code><span>import</span> CountBtn <span>from</span> <span>\"components/CountBtn\"</span>;\n<span class=\"lineNumber\">2</span><span>import</span> { useRootContext } <span>from</span> <span>\"../../contexts/root/context\"</span>;\n<span class=\"lineNumber\">3</span><span>import</span> Profile <span>from</span> <span>\"./Profile\"</span>;\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>export</span> <span>default</span> <span><span>function</span> <span>Total</span>(<span></span>) </span>{\n<span class=\"lineNumber\">6</span>  <span>const</span> { state } = useRootContext();\n<span class=\"lineNumber\">7</span>  <span>const</span> { profile } = state;\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>  <span>return</span> (\n<span class=\"lineNumber\">10</span>    <span><span>&#x3C;<span>div</span>\n<span class=\"lineNumber\">11</span>      <span>style</span>=<span>{{</span>\n<span class=\"lineNumber\">12</span>        <span>margin:</span> \"<span>2rem</span>\",\n<span class=\"lineNumber\">13</span>      }}\n<span class=\"lineNumber\">14</span>    ></span>\n<span class=\"lineNumber\">15</span>      <span>&#x3C;<span>p</span>></span>count is: {state.count}<span>&#x3C;/<span>p</span>></span>\n<span class=\"lineNumber\">16</span>      <span>&#x3C;<span>CountBtn</span> /></span>\n<span class=\"lineNumber\">17</span>      <span>&#x3C;<span>p</span>></span>\n<span class=\"lineNumber\">18</span>        I am {profile?.name}, {profile?.age} years old.\n<span class=\"lineNumber\">19</span>      <span>&#x3C;/<span>p</span>></span>\n<span class=\"lineNumber\">20</span>      <span>&#x3C;<span>Profile</span> <span>profile</span>=<span>{profile</span> <span>as</span> <span>any</span>} /></span>\n<span class=\"lineNumber\">21</span>    <span>&#x3C;/<span>div</span>></span></span>\n<span class=\"lineNumber\">22</span>  );\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<p>通过<code>useRootContext</code>钩子获取到<code>state</code>，同时也可以获取到<code>dispatch</code>，有需要就可以修改数据了。</p>\n<h3>重复渲染的问题</h3>\n<p>当组件内使用了<code>useRootContext</code>后，<code>context</code>内任意数据变化都会引起当前组件重新渲染，举个例子：</p>\n<p>当我使用<code>dispatch</code>更新了<code>count</code>的值，某个使用了<code>useRootContext</code>的组件即使没有使用<code>count</code>，也会重新渲染。</p>\n<p>这个问题，可以有两种类似的方法解决：</p>\n<ul>\n<li>方案 1：将组件返回的<code>jsx</code>封装成新的组件，将组件需要的数据通过<code>props</code>传入进去，并且此新组件通过<code>React.memo</code>包裹起来并导出，这时候传入的参数不变，则子组件不会重新渲染，这是利用了<code>React.memo</code>比较传入的<code>props</code>相等时不渲染的原理。</li>\n<li>方案 2：将使用了<code>useRootContext</code>的组件 return 的<code>jsx</code>部分替换成<code>useMemo(() => 原先的jsx, [deps])</code>，原先的<code>jsx</code>内依赖的数据全部放到依赖数组里，这是利用了<code>useMemo</code>缓存<code>jsx</code>的原理。</li>\n</ul>\n<p>当然还有更好的方案，比如：</p>\n<ul>\n<li>拆分 Context ，构造一套更精细的数据更新控制机制，例如《<a href=\"https://juejin.cn/post/6869340244954513421\">如何避免 useContext 重渲染</a>》中提及的思路</li>\n<li>使用第三方库，如<a href=\"https://recoiljs.org/zh-hans/\">Recoil</a>、<a href=\"https://concentjs.github.io/concent-site/\">concent · power your react</a></li>\n</ul>\n<h3>总结</h3>\n<p>没啥好总结的，用<code>Recoil</code>或者<code>concent</code>吧。</p>\n","title":"使用TypeScript+useContext+useReducer管理数据","date":"2021/12/24","tags":["TypeScript","状态管理"],"mainImg":"https://images.unsplash.com/photo-1607970669494-309137683be5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDAzNjExNjM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1607970669494-309137683be5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDAzNjExNjM&ixlib=rb-1.2.1&q=80&w=400","intro":"这是一篇学习使用 TypeScript 去写 React Context 的学习心得。"}},"__N_SSG":true}