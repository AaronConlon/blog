{"pageProps":{"post":{"slug":"web开发新手之门","contentHtml":"<p>作为程序员的第一件事，人们好像真的已经丢失了寻找编程激情的钥匙，反而不断地问自己一些问题。</p>\n<p>为什么你不应该在入门学习 web 前端开发的时候就直接学习 React 、Vue， Angular 这类框架。</p>\n<p>我该学习什么？</p>\n<p>也许该学习<code>前端框架</code>或者<code>云计算</code>，也许我更适合成为一个<code>机器学习工程师</code>,甚至是时候学习一些<code>后端开发</code>了。</p>\n<p>甚至，谈及到<code>前端开发</code>这个领域，有些观点会让你觉得舒适。例如，你不需要学习多少数学知识或者计算机科学相关的技能。你只需要学习一些<code>HTML</code>、<code>CSS</code>、<code>Javascript</code>知识就能够获得一份工作，并且这乍看一眼似乎很容易。</p>\n<p>作为一个刚入门的新手开发者，你可能会在已经掌握了一些<code>HTML</code>、<code>CSS</code>、<code>Javascript</code>知识的时候，在网上的某个论坛或者微信群组里看到别人说：</p>\n<p>“太年轻了，光学了这些有个屁用，你现在最应该做的就是去学 React，或者是 Vue、Angular 框架。”</p>\n<p>这些框架的优点、掌握它们的重要性甚至是一些夸大的宣传不断轰炸着“学艺不精”的新手们，甚至在<code>GitHub</code>上这些框架有多少<code>Star</code>、众多的生态资源和新技术、绚丽的前端<code>UI</code>库、跨平台开发、小程序和云计算技术等等，一个又一个技术词汇向你涌来，似乎你马上就需要学习它们并且很快就能<code>“精通”</code>它们，升职加薪 balabala……</p>\n<p>于是，你一步步陷入了这些高级词汇和虚幻的技术潮流的陷阱中无法自拔。</p>\n<p>当你直接按一些<code>“软文”</code>上的学习步骤一步步开始学习某种框架和技术的时候，你极有可能会因为缺少一些用于构建这些框架的编程思想或者进阶的技巧而陷入迷惑之中。</p>\n<p>就拿<code>React.js</code>来说，你可能会找一本书，或者从<code>B站</code>亦或是<code>慕课网</code>上找一些教程来学习如何使用<code>React.js</code>进行开发。例如，一些初学者在看书的时候比较心急，于是直接跳过一些看起来不那么<code>紧要</code>的介绍，一切都很简单，你很快就按第一章的内容写了一个<code>hello world</code>,然后看到如下这样的代码：</p>\n<pre><code><span> 'use strict'</span>;\n<span class=\"lineNumber\">2</span><span>var</span> Hello = React.createClass({\n<span class=\"lineNumber\">3</span>  <span>render</span>: <span><span>function</span>(<span></span>) </span>{\n<span class=\"lineNumber\">4</span>    <span>return</span> React.createElement(<span>\"h1\"</span>, <span>null</span>, <span>\"Hello World!\"</span>);\n<span class=\"lineNumber\">5</span>  },\n<span class=\"lineNumber\">6</span>});\n<span class=\"lineNumber\">7</span><span>var</span> div = <span>document</span>.getElementById(<span>\"hi\"</span>);\n<span class=\"lineNumber\">8</span>ReactDOM.render(React.createElement(Hello), div);</code></pre> \n\n<p>加入你先前只是稍微了解了点<code>JavaScript</code>和<code>HTML/CSS</code>知识就开始学习<code>React.js</code>，你会问自己：“我现在写的是什么鬼，为什么可以这样写，也许后端开发更适合我，不如看看后端开发的一些东西吧。”</p>\n<blockquote>\n<p>注意： 我说的是那些不熟悉代码的人，或者是刚刚开始学习 JavaScript 的人。</p>\n</blockquote>\n<p>就像许许多多的新手那样，你可能会在学习复杂知识的过程中遇到挑战，在缺少一些前置知识体系的前提下，学习难度将会陡增。</p>\n<p>你可能会因为一开始就学习这类前端框架类库而找到一份工作，但是我保证你将会在一些开发过程中被一些简单的问题难住。</p>\n<p>这并不是危言耸听。</p>\n<p>为了避免新入行的朋友们陷入此类容易被忽视的泥沼中，我想向你们提供一些参考和建议。</p>\n<p>如果你想要学习某个流行的前端框架，首先，你应该对<code>HTML</code>、<code>CSS</code>、<code>JavaScript</code>有更好的理解，就算是经验丰富的 web 工程师，也依然需要坚持学习这些基础知识。</p>\n<p>对于<code>CSS</code>来说，你可以创建一些优秀的动画，构建响应式的页面并且让其拥有良好的体验。网上有太多的高级<code>CSS</code>技巧能让你大开眼界，你可以尝试使用<code>CSS Grid</code>布局，学习<code>Flex</code>和<code>3D 动画</code>等等。你可能难以想象这些工具和知识具有多么大的功能，<code>CSS</code>可以做的事情实际上非常多，但是在许多人的观念里，它只是在做一些简单的样式处理。</p>\n<p>对于<code>JavaScript</code>来说，一开始学习这门语言确实非常容易，但是一旦你进入了这门语言的核心，接触到一些进阶的知识，或者涉及到众多源代码的时候，你可能会在脑海里浮现出“居然可以这样”这样的念头。</p>\n<p>所以，不要完全只是学习如何使用流行的工具及其<code>API</code>,我们可以动动脑子，深入到编程的世界中来，尝试学习模块化，学习异步编程或者函数式编程，学习面向对象和设计模式，这些知识会对你成为一个优秀的<code>React</code>开发者很有用。</p>\n<p>还有一些工具在你的 web 开发之路上也许会有帮助。</p>\n<p>例如：</p>\n<ul>\n<li><strong>Typescript</strong>：为 JavaScript 增加类型系统功能，在构建大型应用中效果显著</li>\n<li>数据结构、算法、设计模式：学习这类知识有助于你解决一些困难问题，扩宽知识面。</li>\n<li>UI 设计：虽然这些是设计师的工作，但是这方面的知识有助于我们和设计师的沟通和增强我们的设计感，提高我们的开发效率。</li>\n<li>Babel + webpack: 前端开发工程化的重点</li>\n<li>命令行和 Linux：善用命令行和了解Linux 操作能大大提高我们的效率</li>\n<li>浏览器调试：开发者离不开代码调试，没有人能每次都编写一次就通过的完美代码。</li>\n</ul>\n","title":"web开发新手之门","date":"2021/4/26","tags":["翻译","观点"],"mainImg":"https://images.unsplash.com/photo-1619127278767-8274bcee167b?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTk0NDc4MTg&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1619127278767-8274bcee167b?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTk0NDc4MTg&ixlib=rb-1.2.1&q=80&w=400","intro":"今晚炒的菜很好吃，那么就来谈谈新手入行 web 开发该怎么开始吧。"}},"__N_SSG":true}