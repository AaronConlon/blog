{"pageProps":{"post":{"slug":"github-action-浅解","contentHtml":"<h3>前言</h3>\n<p>我确实需要使用 GitHub action 来做一些事情。此前我照搬他人的配置来创建了自己的博客构建系统，但当时没有仔细🤔思考这整个过程，也没有继续了解 GitHub action 到底是什么，我想今天是时候了，让我们更多地了解 GitHub action！</p>\n<h3>What's Github action?</h3>\n<p>2018 年 10 月，GitHub 推出了<code>Github Action</code>持续集成服务，其中包括抓取代码、运行测试、发布到第三方服务、远程登录服务器等等。为了方便开发者执行一些操作，GitHub 允许开发者编写独立的可共享的脚本文件来自动化地执行相关任务。</p>\n<p>例如，在 push 新的内容到仓库后自动构建一个静态站点，亦或是通过设置好的 shell 脚本，将数据同步到 VPS 上，再在 VPS 上执行一些任务，这部分就非常灵活了。</p>\n<p>我们可以在<a href=\"https://github.com/marketplace?type=actions\">官方市场</a>或者<a href=\"https://github.com/sdras/awesome-actions\">awesome actions</a>找到具有特定功能的共享<code>action</code>脚本。</p>\n<h3>基本概念</h3>\n<p>GitHub action 常见术语如下：</p>\n<ul>\n<li>workflow：工作流程，包含以下几点\n<ul>\n<li>Job: 任务，一个工作流可以具有多个 job\n<ul>\n<li>step：job 由 step 组成，若干个步骤执行结束即表示 job 结束\n<ul>\n<li>action：每一个步骤可以执行若干个命令</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3>实践</h3>\n<p>在项目根目录创建一个<code>.github/workflows</code>目录，此目录下的所有<code>.yml</code>文件都包含着单独的<code>workflow</code>，这些工作流脚本将自动运行。</p>\n<blockquote>\n<p>详细配置链接 <a href=\"https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#on\">Workflow syntax for GitHub Actions - GitHub Docs</a></p>\n</blockquote>\n<p>让我们来看一个典型的 workflow 文件示例<code>demo.yml</code>：</p>\n<pre><code><span>name:</span> <span>GitHub</span> <span>Actions</span> <span>Demo</span>\n<span class=\"lineNumber\">2</span><span>on:</span> [<span>push</span>]\n<span class=\"lineNumber\">3</span><span>jobs:</span>\n<span class=\"lineNumber\">4</span>  <span>Explore-GitHub-Actions:</span>\n<span class=\"lineNumber\">5</span>    <span>runs-on:</span> <span>ubuntu-latest</span>\n<span class=\"lineNumber\">6</span>    <span>steps:</span>\n<span class=\"lineNumber\">7</span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"🎉 The job was automatically triggered by a $<span>{{ github.event_name }}</span> event.\"</span>\n<span class=\"lineNumber\">8</span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"🐧 This job is now running on a $<span>{{ runner.os }}</span> server hosted by GitHub!\"</span>\n<span class=\"lineNumber\">9</span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"🔎 The name of your branch is $<span>{{ github.ref }}</span> and your repository is $<span>{{ github.repository }}</span>.\"</span>\n<span class=\"lineNumber\">10</span>      <span>-</span> <span>name:</span> <span>Check</span> <span>out</span> <span>repository</span> <span>code</span>\n<span class=\"lineNumber\">11</span>        <span>uses:</span> <span>actions/checkout@v2</span>\n<span class=\"lineNumber\">12</span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"💡 The $<span>{{ github.repository }}</span> repository has been cloned to the runner.\"</span>\n<span class=\"lineNumber\">13</span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"🖥️ The workflow is now ready to test your code on the runner.\"</span>\n<span class=\"lineNumber\">14</span>      <span>-</span> <span>name:</span> <span>List</span> <span>files</span> <span>in</span> <span>the</span> <span>repository</span>\n<span class=\"lineNumber\">15</span>        <span>run:</span> <span>|\n<span class=\"lineNumber\">16</span>          ls ${{ github.workspace }}\n<span class=\"lineNumber\">17</span></span>      <span>-</span> <span>run:</span> <span>echo</span> <span>\"🍏 This job's status is $<span>{{ job.status }}</span>.\"</span></code></pre> \n\n<p>这种配置文件被称为<code>yaml</code>文件，上述官方示例中可以看到以下几个典型字段：</p>\n<ul>\n<li>\n<p>name: 工作流的名称，默认等同于文件名</p>\n</li>\n<li>\n<p>on: 运行条件，可以是数组，也可以是单独的字符串，上述表示所有<code>push</code>行为都会执行后续任务，甚至可以根据分支来指定执行时机。</p>\n</li>\n<li>\n<p>jobs: 则表示此工作流中的任务，<code>Explore-GitHub-Actions</code>就是任务<code>id</code>，用于区分多个任务，不同任务之间请保持良好的缩进格式。每个任务包括：</p>\n<ul>\n<li>name（任务名）</li>\n<li>needs（任务执行的依赖顺序，可以是单独的任务 id，或者是包含任务 id 的数组，当某个任务需要在指定的任务之后执行时，需要设置 needs）</li>\n<li>runs-on（运行环境，支持常见的服务器发行版，通常使用 ubuntu-latest）</li>\n</ul>\n</li>\n<li>\n<p>steps: 任务步骤，包含：</p>\n<ul>\n<li>name：单个步骤名</li>\n<li>uses: 使用他人的 action 脚本作为当前步骤的一部分，官方<code>强烈建议</code>我们在使用他人的 action 的时候指定 git 链接、SHA 或 Docker tag，这样能避免当他人的 action 更新时产生未知的行为，如下所示：</li>\n</ul>\n<pre><code><span>steps:</span>\n<span class=\"lineNumber\">2</span>  <span># Reference a specific commit</span>\n<span class=\"lineNumber\">3</span>  <span>-</span> <span>uses:</span> <span>actions/checkout@a81bbbf8298c0fa03ea29cdc473d45769f953675</span>\n<span class=\"lineNumber\">4</span>  <span># Reference the major version of a release</span>\n<span class=\"lineNumber\">5</span>  <span>-</span> <span>uses:</span> <span>actions/checkout@v2</span>\n<span class=\"lineNumber\">6</span>  <span># Reference a specific version</span>\n<span class=\"lineNumber\">7</span>  <span>-</span> <span>uses:</span> <span>actions/checkout@v2.2.0</span>\n<span class=\"lineNumber\">8</span>  <span># Reference a branch</span>\n<span class=\"lineNumber\">9</span>  <span>-</span> <span>uses:</span> <span>actions/checkout@main</span></code></pre> \n\n<p>使用第三方 action 的时候也要阅读其<code>README</code>文档，以避免某些需要配置的数据缺失。</p>\n<ul>\n<li>run: 执行某些操作系统 shell 命令，例如常见的<code>npm install</code>，如果有多个命令，可以这样写：</li>\n</ul>\n<pre><code><span>-</span> <span>name:</span> <span>install</span> <span>dependencies</span>\n<span class=\"lineNumber\">2</span>\t<span>run:</span> <span>|</span>\n<span class=\"lineNumber\">3</span>\t\t<span>npm</span> <span>ci</span>\n<span class=\"lineNumber\">4</span>\t\t<span>npm</span> <span>run</span> <span>build</span>\n<span class=\"lineNumber\">5</span>\t<span>working-directory:</span> <span>./src</span></code></pre> \n\n<p><code>working-directory</code>是可选的，用于指定运行此命令的目录，不指定时将在根目录下运行。</p>\n<ul>\n<li>\n<p>shell: 指定 shell 类型，可以是<code>bash</code>、<code>pwsh（powershell 用于 windows server）</code>，甚至是你喜欢的<code>fish</code>或<code>zsh</code>，甚至是<code>python</code>环境！</p>\n</li>\n<li>\n<p>with: 定义一系列的键值对数据作为环境变量使用，默认会添加前缀<code>INPUT_</code>，并且全部转化为大写字母。当 action 使用到 docker 的时候，可以设置 args 和 entrypoint 作为容器的输入，详情可查阅文档，此处不延伸。</p>\n</li>\n<li>\n<p>env：env 也可以设置单独的环境变量，并且这些变量可以非常隐秘，我们可以通过设置仓库的<code>secret</code>选项来增加受保护的环境变量，例如：<code>GITHUB_TOKEN: ${{ secrets.TOKEN }}</code>可以读取<code>secret</code>中的<code>TOKEN</code>变量添加到整个项目中来 。</p>\n</li>\n<li>\n<p>if : 添加条件，配合表达式可以实现很多功能，例如根据上一个任务是否成功而决定是否执行选定的步骤，举个例子：</p>\n</li>\n</ul>\n<pre><code><span>steps:</span>\n<span class=\"lineNumber\">2</span>  <span>-</span> <span>name:</span> <span>My</span> <span>first</span> <span>step</span>\n<span class=\"lineNumber\">3</span>    <span>uses:</span> <span>octo-org/action-name@main</span>\n<span class=\"lineNumber\">4</span>  <span>-</span> <span>name:</span> <span>My</span> <span>backup</span> <span>step</span>\n<span class=\"lineNumber\">5</span>    <span>if:</span> <span>${{</span> <span>failure()</span> <span>}}</span>\n<span class=\"lineNumber\">6</span>    <span>uses:</span> <span>actions/heroku@1.0.0</span></code></pre> \n\n<p>​\t这里就可以根据第一个步骤使用的结果来决定是否再使用另一个脚本。</p>\n</li>\n</ul>\n<h3>发布一个 React 应用</h3>\n<p>现在，我的手头有一个名为<code>emoji_search_zh</code>的应用，在这个应用里我们可以通过搜索中文关键字去检索<code>emoji</code>字符，并且可以很方便的复制到剪贴板📋（听起来似乎有点鸡肋👦🏻）。</p>\n<p>现在，一步步来部署：</p>\n<h4>配置 homepage</h4>\n<p>当应用准备好部署时，将<code>homepage</code>添加到<code>package.json</code>上。</p>\n<pre><code><span>\"homepage\"</span>: <span>\"https://&#x3C;githubusername>.github.io/&#x3C;app>\"</span></code></pre> \n\n<blockquote>\n<p>注意替换掉账户名和应用名称，这个名称可以是仓库名</p>\n</blockquote>\n<h4>启用 GitHub Pages</h4>\n<p>创建一个分支用于部署，例如：<code>gh-pages</code>:</p>\n<p><code>git checkout -b gh-pages</code></p>\n<blockquote>\n<p>创建分支有利于保持我们源代码和应用部署的独立性</p>\n</blockquote>\n<h4>创建工作流 action</h4>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://docs.github.com/cn/actions/quickstart\">GitHub Actions 快速入门 - GitHub Docs</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html\">GitHub Actions 入门教程 - 阮一峰的网络日志</a></li>\n<li></li>\n</ul>\n","title":"github action 浅解","date":"2021/11/28","tags":["Git"],"mainImg":"https://images.unsplash.com/photo-1633791583517-c828e6f851a9?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgwODk0OTQ&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1633791583517-c828e6f851a9?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgwODk0OTQ&ixlib=rb-1.2.1&q=80&w=400","intro":"我需要使用 GitHub action 来自动部署一些应用。"}},"__N_SSG":true}