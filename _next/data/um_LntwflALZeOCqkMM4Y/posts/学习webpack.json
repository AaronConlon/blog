{"pageProps":{"post":{"slug":"学习webpack","contentHtml":"<p>2021年01月13日00:33:47 休息了,早起,尽量慢慢不要熬夜.</p>\n<h1>新手眼里的 webpack</h1>\n<blockquote>\n<p>那么 webpack 是什么?</p>\n</blockquote>\n<p>简单来说,webpack 是一个模块打包工具.</p>\n<p><img src=\"https://www.ma-no.org/cache/galleries/contents-1806/webpack-how-it-works.jpeg\" alt=\"\"></p>\n<p>我们在创建为项目编写代码的时候,会用到非常多的素材和代码文件.但是类似<code>sass</code>或者<code>typescript</code>等技术需要通过一些必要的工具转译或者编译为构建项目的基础内容.</p>\n<p>就像<code>sass</code>需要转为<code>css</code>文件,<code>typescript</code>需要转化为<code>js</code>代码,而<code>js</code>代码又遇到了新的问题.</p>\n<p><code>js</code>一直在不断发展,新的功能被国际化组织制定和推广开来,作为广大开发者之一,我很开心能使用<code>ECMAScript</code>的最新特性,这些特性为我提供了强力的功能,减少了我的日常开发工作量,提高效率,增强代码的<code>美感</code>和<code>可读性</code>.</p>\n<p>举个例子,不同浏览器厂商对最新的<code>ECMAScript</code>标准支持度不同,对规范中少数并未声明的细节的技术实现也不尽相同,甚至,被广大开发者诟病的<code>IE</code>浏览器,在其<code>11</code>版本中连2015年制定的<code>ES6</code>规范都不完全支持(尽管有他自己的限制,我们也应该感激和尊重他),<code>IE 11</code>在今年8月份不再受微软的更新和支持,后续微软将转战<code>EDGE</code>.</p>\n<p>开发者为了满足不同用户的需要,需要为不同浏览器做兼容性开发,于是不同的<code>polyfill</code>应运而生,简单来说就是开发者提供一些代码模拟浏览器暂未支持的语法特性等等,加载了这些补充性的代码,我们终于可以使用一套<code>ECMAScript</code>规范进行开发.</p>\n<blockquote>\n<p>懒惰使人进步.</p>\n</blockquote>\n<p>我相信那些绝顶的技术大牛都是很懒惰的,这些重复繁杂且无趣的工作,就应该交给机器自动处理.于是乎,各种开发辅助工具和库出现了.</p>\n<blockquote>\n<p>在技术的圈子里,技术是开发者被人尊敬的绝对原因之一. (个人观点)</p>\n</blockquote>\n<p>高效地应用<code>webpack</code>进行辅助开发,定制化自己和团队的配置,能让我们减少许多枯燥的工作内容,提高效率.</p>\n<p>话说回来,正如上面的那张图一样, <code>webpack</code> 可以对不同扩展名的文件针对性的进行处理,需要转化的就使用相应默认或者指定的工具或者功能去转化.</p>\n<p><code>webpack</code>功能强大,从项目初始化,到开发,规范化,功能定制和测试,资源管理和构建压缩都能通过独特的配置和其生态中庞大的资源来支持我们需要的功能,处理特定问题.</p>\n<p>最后,打包出可以用于生产环境的资源.</p>\n<p>话不多说,让我再次一步步学习使用<code>webpack</code>构建开发工作流和熟悉其工作原理.</p>\n<h1>安装使用</h1>\n<p>首先,创建一个学习目录,进入并且初始化项目.</p>\n<pre><code><span># 初始化项目,安装依赖</span>\n<span class=\"lineNumber\">2</span>$ yarn init -y\n<span class=\"lineNumber\">3</span>$ yarn add -D webpack webpack-cli</code></pre> \n\n<p>接下来看看<code>package.json</code>文件的内容:</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>  <span>\"name\"</span>: <span>\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span>\"version\"</span>: <span>\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span>\"main\"</span>: <span>\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span>\"license\"</span>: <span>\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span>\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span>\"dev\"</span>: <span>\"webpack\"</span>\n<span class=\"lineNumber\">8</span>  },\n<span class=\"lineNumber\">9</span>  <span>\"dependencies\"</span>: {},\n<span class=\"lineNumber\">10</span>  <span>\"devDependencies\"</span>: {\n<span class=\"lineNumber\">11</span>    <span>\"webpack\"</span>: <span>\"^5.15.0\"</span>,\n<span class=\"lineNumber\">12</span>    <span>\"webpack-cli\"</span>: <span>\"^4.3.1\"</span>\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>当前<code>webpack</code>为<code>5.15.0</code>版本,在<code>scripts</code>这里写入了一个<code>dev</code>项,于是我们便可以使用<code>yarn dev</code>调用<code>webpack</code>了.</p>\n<p>再次重申,<code>webpack</code>并未全局安装,而是安装在项目目录,你可以在<code>node_modules</code>目录中看到它,通过在<code>scripts</code>中调用<code>webpack</code>,会自动使用<code>npx webpack</code>进行处理.二者本质上无太大差别.这是<code>yarn</code>或者<code>npm</code>的机制.</p>\n<blockquote>\n<p>本文统一使用<code>yarn</code>进行包管理.</p>\n</blockquote>\n<p><code>webpack</code>作为一个<code>CLI</code>,其默认支持了许多配置项,在最简单的情况下,可以直接使用其功能.不过我觉得除了演示其基础功能这种场景外,开发者都会增强和定制其配置.</p>\n<blockquote>\n<p>默认<code>webpack</code>会将项目目录下的<code>src</code>目录内的<code>index.js</code>打包到<code>dist</code>下,重命名为<code>main.js</code>.</p>\n</blockquote>\n<p>不要在默认机制上止步不前,继续.</p>\n<h1>基础配置</h1>\n<p><code>webpack</code>支持使用配置文件进行定制化功能,通常,开发者们习惯命名第一个配置文件为<code>webpack.conf.js</code>.</p>\n<p>我们不得不说,<code>webpack</code>的一切功能,都从一个<code>entry</code>开始,这个入口点指明了<code>webpack</code>应该从哪一个模块开始构建其内部依赖图谱.如上所说,这个<code>entry</code>默认是<code>src/index.js</code>.</p>\n<p>默认的输出目录是<code>dist</code>目录,以及更多内容待续.首先需要明确的是:</p>\n<p><strong>我们能做更多的定制</strong></p>\n<p>来看看一个简单的<code>webpack.conf.js</code>,这个文件将会被<code>node</code>隐式载入运行:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span>module</span>.exports = {\n<span class=\"lineNumber\">4</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">5</span>  <span>output</span>: {\n<span class=\"lineNumber\">6</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">7</span>    <span>filename</span>: <span>'my-first-webpack.bundle.js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">8</span>  }\n<span class=\"lineNumber\">9</span>};</code></pre> \n\n<p>接着,修改<code>package.json</code>的配置项:</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>  <span>\"name\"</span>: <span>\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span>\"version\"</span>: <span>\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span>\"main\"</span>: <span>\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span>\"license\"</span>: <span>\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span>\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span>\"dev\"</span>: <span>\"webpack --config webpack.conf.js\"</span> <span>// 指定了配置文件</span>\n<span class=\"lineNumber\">8</span>  },\n<span class=\"lineNumber\">9</span>  <span>\"dependencies\"</span>: {},\n<span class=\"lineNumber\">10</span>  <span>\"devDependencies\"</span>: {\n<span class=\"lineNumber\">11</span>    <span>\"webpack\"</span>: <span>\"^5.15.0\"</span>,\n<span class=\"lineNumber\">12</span>    <span>\"webpack-cli\"</span>: <span>\"^4.3.1\"</span>\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>现在,进行构建:</p>\n<pre><code><span>PS</span> C:\\Users\\yy\\test\\webpack> yarn dev\n<span class=\"lineNumber\">2</span>yarn run v1.<span>22.10</span>\n<span class=\"lineNumber\">3</span><span>$</span> webpack -<span>-config</span> webpack.conf.js\n<span class=\"lineNumber\">4</span>asset my<span>-first</span><span>-webpack</span>.bundle.js <span>811</span> bytes [<span>emitted</span>] (name: main)\n<span class=\"lineNumber\">5</span>./src/index.js <span>49</span> bytes [<span>built</span>] [<span>code</span> <span>generated</span>]\n<span class=\"lineNumber\">6</span>webpack <span>5.15</span>.<span>0</span> compiled successfully <span>in</span> <span>75</span> ms\n<span class=\"lineNumber\">7</span>Done <span>in</span> <span>1.01</span>s.\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span>PS</span> C:\\Users\\yy\\test\\webpack> <span>ls</span> .\\out\\\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>    Directory: C:\\Users\\yy\\test\\webpack\\out\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span>Mode                 LastWriteTime         Length Name\n<span class=\"lineNumber\">14</span>----                 -------------         ------ ----\n<span class=\"lineNumber\">15</span><span>-a</span>---           <span>2021</span>/<span>1</span>/<span>17</span>    <span>15</span>:<span>13</span>            <span>811</span> my<span>-first</span><span>-webpack</span>.bundle.js</code></pre> \n\n<p>现在,构建输出的到了目录<code>out</code>.命名也从<code>main.js</code>变成了我们指定的<code>my-first-webpack.bundle.js</code>.</p>\n<p>想看看构建结果?</p>\n<pre><code><span>/*\n<span class=\"lineNumber\">2</span> * ATTENTION: The \"eval\" devtool has been used (maybe by default in mode: \"development\").\n<span class=\"lineNumber\">3</span> * This devtool is neither made for production nor for readable output files.\n<span class=\"lineNumber\">4</span> * It uses \"eval()\" calls to create a separate source file in the browser devtools.\n<span class=\"lineNumber\">5</span> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n<span class=\"lineNumber\">6</span> * or disable the default devtool with \"devtool: false\".\n<span class=\"lineNumber\">7</span> * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n<span class=\"lineNumber\">8</span> */</span>\n<span class=\"lineNumber\">9</span><span>/******/</span> (<span>() =></span> { <span>// webpackBootstrap</span>\n<span class=\"lineNumber\">10</span><span>/*!**********************!*\\\n<span class=\"lineNumber\">11</span>  !*** ./src/index.js ***!\n<span class=\"lineNumber\">12</span>  \\**********************/</span>\n<span class=\"lineNumber\">13</span><span>eval</span>(<span>\"const a = () => console.log('a')\\r\\nconsole.log(a);\\n\\n//# sourceURL=webpack://webpack/./src/index.js?\"</span>);\n<span class=\"lineNumber\">14</span><span>/******/</span> })()\n<span class=\"lineNumber\">15</span>;</code></pre> \n\n<p>入口点的代码非常简单,我定义了一个简单函数而已.<code>通常情况下</code>,你可能并不需要阅读构建之后的代码,并且构建之后的代码可读性实在是没法跟源码相比,上述构建内容还没压缩,压缩之后就更没法看了.</p>\n<blockquote>\n<p>webpack 默认只能识别<code>JavaScript</code>文件.</p>\n</blockquote>\n<h1>LOADER</h1>\n<p>为了对其他类型的文件进行处理和大包,<code>webpack</code>提供了<code>loader</code>功能.关于<code>loader</code>:</p>\n<p>loader 能将所有类型的文件通过特定插件和功能,将其转化为<code>webpack</code>能有效处理的模块,然后开发者就可以利用其大包功能进行打包.</p>\n<p><code>loader</code>有两个关键选项:</p>\n<ul>\n<li>test: 标识 loader 转换的目标文件,通常用正则表达式进行类型说明</li>\n<li>use: 使用哪个或者哪些<code>loader</code></li>\n</ul>\n<p>继续,那么如何处理我们前端开发绕不开的<code>CSS</code>问题?<code>webpack</code>如何处理这一切?<code>loader</code>可以吗?</p>\n<p>答案是肯定的.</p>\n<h1>CSS &#x26; SASS</h1>\n<p>我个人喜欢<code>Sass</code>, 这项技术让我编写<code>css</code>的时候更轻松愉快.为了让<code>Sass</code>文件产生效果,需要做三件事:</p>\n<ul>\n<li>sass转译成css</li>\n<li>css转换成js</li>\n<li>js注入页面DOM,构建style</li>\n</ul>\n<p>为了实现这一需求,我们需要三个关键<code>loader</code>:</p>\n<ul>\n<li>style-loader: 将 CSS 注入 DOM 中,详情: <a href=\"https://webpack.js.org/loaders/style-loader/\">style-loader | webpack</a></li>\n<li>css-loader:  解释 <code>JS</code>中使用<code>esModule</code>的语法导入<code>CSS</code>文件的行为,支持替换<code>CSS</code>文件中的<code>@import</code>和<code>url()</code>使用<code>import/require()</code>来解析.详情:<a href=\"https://webpack.js.org/loaders/css-loader/\">css-loader | webpack</a></li>\n<li>sass-loader: 转译<code>SASS</code>文件,这里提一下支持导入<code>node_modules</code>下的<code>CSS</code>文件,详情:<a href=\"https://webpack.docschina.org/loaders/sass-loader/\">sass-loader | webpack</a></li>\n</ul>\n<p>以及安装多个依赖:</p>\n<pre><code>yarn add -D sass-loader sass style-loader css-loader</code></pre> \n\n<p>每一个<code>loader</code>基本上都支持特定的配置,如果默认配置不支持开发者需要的功能特性,则推荐阅读<code>loader</code>官方文档寻求帮助.</p>\n<p>以开发模式安装三个库之后,进行<code>webpack</code>配置:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span>module</span>.exports = {\n<span class=\"lineNumber\">4</span>  <span>mode</span>: <span>'development'</span>,\n<span class=\"lineNumber\">5</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span>output</span>: {\n<span class=\"lineNumber\">7</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">8</span>    <span>filename</span>: <span>'my-first-webpack.bundle.js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span>module</span>: {\n<span class=\"lineNumber\">11</span>    <span>rules</span>: [\n<span class=\"lineNumber\">12</span>      {\n<span class=\"lineNumber\">13</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">14</span>        use: [\n<span class=\"lineNumber\">15</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span> <span>// 注意顺序,后者先进行处理</span>\n<span class=\"lineNumber\">16</span>        ]\n<span class=\"lineNumber\">17</span>      }\n<span class=\"lineNumber\">18</span>    ]\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>};</code></pre> \n\n<p><code>Sass</code>到<code>CSS</code>,再到<code>JS</code>,最后注入到<code>HTML DOM</code>中,添加<code>Style</code>元素,内部是样式.当然,如果想要单独打包,不注入到<code>head</code>元素内的<code>style</code>内,而是通过常见的<code>css link</code>发挥效用也是可以的.</p>\n<h1>缓存清理和插件</h1>\n<p>在开发的时候,如果相关资源的名字不变,浏览器端可能会直接从硬盘读取之前缓存的资源.例如,我们每次更新代码,重新构建的出口文件都是<code>main.js</code>,那么浏览器端可能会使用缓存,而不是每次都使用最新构建的版本.</p>\n<p>在开发过程中,我们可能会经常看到一些带哈希值的文件名,例如:<code>main.jkdajkd2jdai2i.js</code>.</p>\n<p><code>webpack</code>支持输出大包的文件的时候,为出口文件提供随机的<code>hash</code>值,作为最终构建文件的文件名的一部分,这一现象非常常见.</p>\n<p>让构建的输出文件名生成<code>hash</code>值并不复杂,可以直接在<code>webpack.conf.js</code>中配置.</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span>module</span>.exports = {\n<span class=\"lineNumber\">4</span>  <span>mode</span>: <span>'development'</span>,\n<span class=\"lineNumber\">5</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span>output</span>: {\n<span class=\"lineNumber\">7</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">8</span>    <span>filename</span>: <span>'main.[contenthash].js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span>module</span>: {\n<span class=\"lineNumber\">11</span>    <span>rules</span>: [\n<span class=\"lineNumber\">12</span>      {\n<span class=\"lineNumber\">13</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">14</span>        use: [\n<span class=\"lineNumber\">15</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span>\n<span class=\"lineNumber\">16</span>        ]\n<span class=\"lineNumber\">17</span>      }\n<span class=\"lineNumber\">18</span>    ]\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>};</code></pre> \n\n<blockquote>\n<p>webpack 的配置项丰富,也可以说成繁杂,仔细研究每一个配置项需要花费相应的时间和精力,必要时也许可以跳着看,看着形成一些印象,需要用的时候,再看也许能更快理解.</p>\n</blockquote>\n<p>现在,生成的<code>output</code>文件,会自动带上<code>hash</code>值,我们不必担心浏览器的缓存问题了.</p>\n<p>但是,看起来产生了新的问题.我们看看项目目录下的<code>index.html</code>:</p>\n<pre><code><span>&#x3C;!DOCTYPE <span>html</span>></span>\n<span class=\"lineNumber\">2</span><span>&#x3C;<span>html</span> <span>lang</span>=<span>\"en\"</span>></span>\n<span class=\"lineNumber\">3</span><span>&#x3C;<span>head</span>></span>\n<span class=\"lineNumber\">4</span>  <span>&#x3C;<span>meta</span> <span>charset</span>=<span>\"UTF-8\"</span>></span>\n<span class=\"lineNumber\">5</span>  <span>&#x3C;<span>meta</span> <span>name</span>=<span>\"viewport\"</span> <span>content</span>=<span>\"width=device-width, initial-scale=1.0\"</span>></span>\n<span class=\"lineNumber\">6</span>  <span>&#x3C;<span>title</span>></span>webpack learning<span>&#x3C;/<span>title</span>></span>\n<span class=\"lineNumber\">7</span><span>&#x3C;/<span>head</span>></span>\n<span class=\"lineNumber\">8</span><span>&#x3C;<span>body</span>></span>\n<span class=\"lineNumber\">9</span>  <span>&#x3C;<span>h1</span>></span>Start...<span>&#x3C;/<span>h1</span>></span>\n<span class=\"lineNumber\">10</span>  <span>&#x3C;<span>script</span> <span>src</span>=<span>\"./out/main.js\"</span>></span><span>&#x3C;/<span>script</span>></span>\n<span class=\"lineNumber\">11</span><span>&#x3C;/<span>body</span>></span>\n<span class=\"lineNumber\">12</span><span>&#x3C;/<span>html</span>></span></code></pre> \n\n<p>没什么问题,依然是引入了<code>output</code>打包生成的结果.只是由于我们自动生成了<code>hash</code>值,文件名变得难以记忆,且每次都不一样,这里必然是不能写死成<code>./out/main.js</code>.</p>\n<p><code>webpack</code>提供了<code>plugins</code>插件机制来解决这一类问题.<code>nodejs</code>可以开发一些脚本帮助开发者自动处理这些枯燥琐碎的问题.</p>\n<p>请点开这里<a href=\"https://webpack.docschina.org/plugins/\">Plugins | webpack</a>, <code>webpack</code>生态繁荣,插件繁多,这意味这绝大多数的日常开发问题,都能通过插件系统解决掉.如果你需要处理一些<code>webpack</code>构建相关的问题,不妨看看这里是否已经有了其他开发者提供的插件解决方案.</p>\n<p>回到硬编码的<code>./out/main.js</code>的问题,插件<a href=\"https://webpack.docschina.org/plugins/html-webpack-plugin/\">HtmlWebpackPlugin | webpack</a> 为我们提供了一个解决方案.</p>\n<p>先安装库:</p>\n<pre><code>yarn add -D html-webpack-plugin@next</code></pre> \n\n<p>这个插件能够很方便的创建自动链接了<code>bundles</code>的<code>HTML</code>文件.我们可以使用这个插件帮助我们自动更新具有<code>hash</code>值的<code>bundles</code>文件引用.在很多场景下都能看到例如<code>dist/index.html</code>的存在,且此文件内部<code>body</code>的最后面插入了一个<code>script</code>标签.如果你不止有一个<code>bunddle</code>,也能够都包含在<code>script</code>标签内.</p>\n<p>并且,还可以创建一个<code>template</code>模版文件以供使用.</p>\n<p>让我们来看看<code>webpack</code>的配置:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span><span>let</span> HtmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span>module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span>mode</span>: <span>'development'</span>,\n<span class=\"lineNumber\">6</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">7</span>  <span>output</span>: {\n<span class=\"lineNumber\">8</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">9</span>    <span>filename</span>: <span>'main.[contenthash].js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">10</span>  },\n<span class=\"lineNumber\">11</span>  <span>plugins</span>: [<span>new</span> HtmlWebpackPlugin({\n<span class=\"lineNumber\">12</span>    <span>// 几乎每个插件都支持丰富的配置,默认情况下,此插件创建的index.html非常简单,对此</span>\n<span class=\"lineNumber\">13</span>    <span>// 开发者可以使用template文件代替,在template文件中添加通用代码,此插件会自动处理body最后的引入问题.</span>\n<span class=\"lineNumber\">14</span>    <span>template</span>: <span>\"./src/template.html\"</span>\n<span class=\"lineNumber\">15</span>  })],\n<span class=\"lineNumber\">16</span>  <span>module</span>: {\n<span class=\"lineNumber\">17</span>    <span>rules</span>: [\n<span class=\"lineNumber\">18</span>      {\n<span class=\"lineNumber\">19</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">20</span>        use: [\n<span class=\"lineNumber\">21</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span>\n<span class=\"lineNumber\">22</span>        ]\n<span class=\"lineNumber\">23</span>      }\n<span class=\"lineNumber\">24</span>    ]\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span>};</code></pre> \n\n<h1>开发模式问题</h1>\n<p>切换不同的开发模式,为不同的开发模式添加不同的配置和针对性的功能非常常见.</p>\n<p>有时候,我们创建了<code>webpack.dev.js</code>和<code>webpack.prod.js</code>以及<code>webpack.common.js</code>三个配置文件.通过名字就能理解三个文件的作用,并且通过第三方库和特定的<code>package.json</code>定制<code>scripts</code>,我们可以共用<code>common</code>的配置,并且根据不同的命令,使用不同的配置文件进行打包.</p>\n<p>安装插件:</p>\n<pre><code>yarn add -D webpack-merge</code></pre> \n\n<p>现在创建这三个文件:</p>\n<pre><code><span>// webpack.common.js</span>\n<span class=\"lineNumber\">2</span><span>let</span> HtmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span>module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span>plugins</span>: [<span>new</span> HtmlWebpackPlugin({\n<span class=\"lineNumber\">7</span>    <span>template</span>: <span>\"./src/template.html\"</span>\n<span class=\"lineNumber\">8</span>  })],\n<span class=\"lineNumber\">9</span>  <span>module</span>: {\n<span class=\"lineNumber\">10</span>    <span>rules</span>: [\n<span class=\"lineNumber\">11</span>      {\n<span class=\"lineNumber\">12</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">13</span>        use: [\n<span class=\"lineNumber\">14</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span>\n<span class=\"lineNumber\">15</span>        ]\n<span class=\"lineNumber\">16</span>      }\n<span class=\"lineNumber\">17</span>    ]\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span>};\n<span class=\"lineNumber\">20</span> \n<span class=\"lineNumber\">21</span><span>// webpack.dev.js</span>\n<span class=\"lineNumber\">22</span><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">23</span><span>const</span> common = <span>require</span>(<span>\"./webpack.common\"</span>);\n<span class=\"lineNumber\">24</span><span>const</span> { merge } = <span>require</span>(<span>\"webpack-merge\"</span>)\n<span class=\"lineNumber\">25</span><span>// 直接使用merge函数,合并两个配置对象</span>\n<span class=\"lineNumber\">26</span><span>module</span>.exports = merge(common, {\n<span class=\"lineNumber\">27</span>  <span>mode</span>: <span>'development'</span>,\n<span class=\"lineNumber\">28</span>  <span>output</span>: {\n<span class=\"lineNumber\">29</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">30</span>    <span>filename</span>: <span>'main.[contenthash].js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">31</span>  }\n<span class=\"lineNumber\">32</span>}<span>0</span>;\n<span class=\"lineNumber\">33</span> \n<span class=\"lineNumber\">34</span><span>// webpack.prod.js</span>\n<span class=\"lineNumber\">35</span><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">36</span><span>const</span> common = <span>require</span>(<span>\"./webpack.common\"</span>);\n<span class=\"lineNumber\">37</span><span>const</span> { merge } = <span>require</span>(<span>\"webpack-merge\"</span>)\n<span class=\"lineNumber\">38</span><span>module</span>.exports = merge(common, {\n<span class=\"lineNumber\">39</span>  <span>mode</span>: <span>'production'</span>,\n<span class=\"lineNumber\">40</span>  <span>output</span>: {\n<span class=\"lineNumber\">41</span>    <span>path</span>: path.resolve(__dirname, <span>'dist'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">42</span>    <span>filename</span>: <span>'main.js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">43</span>  }  \n<span class=\"lineNumber\">44</span>});</code></pre> \n\n<p>就如同插件的名字关键字一样,<code>merge</code>合并多个配置.接着,直接修改<code>package.json</code>的<code>scripts</code>:</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>  <span>\"name\"</span>: <span>\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span>\"version\"</span>: <span>\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span>\"main\"</span>: <span>\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span>\"license\"</span>: <span>\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span>\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span>\"dev\"</span>: <span>\"webpack --config webpack.dev.js\"</span>,\n<span class=\"lineNumber\">8</span>    <span>\"build\"</span>: <span>\"webpack --config webpack.prod.js\"</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span>\"dependencies\"</span>: {},\n<span class=\"lineNumber\">11</span>  <span>\"devDependencies\"</span>: {\n<span class=\"lineNumber\">12</span>    <span>\"css-loader\"</span>: <span>\"^5.0.1\"</span>,\n<span class=\"lineNumber\">13</span>    <span>\"html-webpack-plugin\"</span>: <span>\"^4.5.1\"</span>,\n<span class=\"lineNumber\">14</span>    <span>\"sass\"</span>: <span>\"^1.32.4\"</span>,\n<span class=\"lineNumber\">15</span>    <span>\"sass-loader\"</span>: <span>\"^10.1.1\"</span>,\n<span class=\"lineNumber\">16</span>    <span>\"style-loader\"</span>: <span>\"^2.0.0\"</span>,\n<span class=\"lineNumber\">17</span>    <span>\"webpack\"</span>: <span>\"^5.15.0\"</span>,\n<span class=\"lineNumber\">18</span>    <span>\"webpack-cli\"</span>: <span>\"^4.3.1\"</span>,\n<span class=\"lineNumber\">19</span>    <span>\"webpack-merge\"</span>: <span>\"^5.7.3\"</span>\n<span class=\"lineNumber\">20</span>  }\n<span class=\"lineNumber\">21</span>}</code></pre> \n\n<p>现在,使用<code>yarn dev</code>和<code>yarn build</code>则能根据不同的模式进行构建了. <code>webpack</code>官方支持同时导出不同的配置,但个人看来,我更喜欢这种<code>merge</code>多文件的形式.</p>\n<h1>热加载和开发服务器</h1>\n<p>如果你想要在本地开发的时候使用热加载的功能,修改代码的同时,自动进行构建和浏览器端的刷新.<code>webpack</code>依然存在很多可选的方案.</p>\n<p>现在,来看看其中一种方案:</p>\n<p><code>webpack-dev-server</code>.</p>\n<blockquote>\n<p>如果你有什么异常，请查看版本和官网说明，不同时间也许会有一定的差异。</p>\n</blockquote>\n<p>我没看过这个库的源码,不过这个库需要做的配置非常简单,效果却出奇的好.</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>  <span>\"name\"</span>: <span>\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span>\"version\"</span>: <span>\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span>\"main\"</span>: <span>\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span>\"license\"</span>: <span>\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span>\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span>\"dev\"</span>: <span>\"webpack serve --config webpack.dev.js --open\"</span>, <span>// 调用webpack-dev-server 打开浏览器</span>\n<span class=\"lineNumber\">8</span>    <span>\"build\"</span>: <span>\"webpack --config webpack.prod.js\"</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span>\"dependencies\"</span>: {},\n<span class=\"lineNumber\">11</span>  <span>\"devDependencies\"</span>: {\n<span class=\"lineNumber\">12</span>    <span>\"css-loader\"</span>: <span>\"^5.0.1\"</span>,\n<span class=\"lineNumber\">13</span>    <span>\"html-webpack-plugin\"</span>: <span>\"^4.5.1\"</span>,\n<span class=\"lineNumber\">14</span>    <span>\"sass\"</span>: <span>\"^1.32.4\"</span>,\n<span class=\"lineNumber\">15</span>    <span>\"sass-loader\"</span>: <span>\"^10.1.1\"</span>,\n<span class=\"lineNumber\">16</span>    <span>\"style-loader\"</span>: <span>\"^2.0.0\"</span>,\n<span class=\"lineNumber\">17</span>    <span>\"webpack\"</span>: <span>\"^5.15.0\"</span>,\n<span class=\"lineNumber\">18</span>    <span>\"webpack-cli\"</span>: <span>\"^4.3.1\"</span>,\n<span class=\"lineNumber\">19</span>    <span>\"webpack-dev-server\"</span>: <span>\"^3.11.2\"</span>,\n<span class=\"lineNumber\">20</span>    <span>\"webpack-merge\"</span>: <span>\"^5.7.3\"</span>\n<span class=\"lineNumber\">21</span>  }\n<span class=\"lineNumber\">22</span>}</code></pre> \n\n<p>此时，修改<code>./src/index.js</code>立刻就能看到浏览器自动刷新，终端也会提示重新构建消息。</p>\n<h1>处理图片</h1>\n<p><code>webpack</code>只能识别<code>JavaScript</code>文件,我们经常使用的图片,无法通过默认功能进行打包和对<code>output</code>文件进行跟进处理,例如无法自动转换打包后的<code>index.html</code>中的图片属性的地址.</p>\n<p>接下来使用的<code>loader</code>分别是:</p>\n<ul>\n<li>html-loader</li>\n<li>file-loader或者url-loader</li>\n</ul>\n<p>依然是使用<code>npm</code>进行安装,编辑<code>webpack.common.js</code>配置文件:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span><span>let</span> HtmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span>module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span>plugins</span>: [<span>new</span> HtmlWebpackPlugin({\n<span class=\"lineNumber\">7</span>    <span>template</span>: <span>\"./src/template.html\"</span>\n<span class=\"lineNumber\">8</span>  })],\n<span class=\"lineNumber\">9</span>  <span>module</span>: {\n<span class=\"lineNumber\">10</span>    <span>rules</span>: [\n<span class=\"lineNumber\">11</span>      {\n<span class=\"lineNumber\">12</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">13</span>        use: [\n<span class=\"lineNumber\">14</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span>\n<span class=\"lineNumber\">15</span>        ]\n<span class=\"lineNumber\">16</span>      },\n<span class=\"lineNumber\">17</span>      {\n<span class=\"lineNumber\">18</span>        <span>test</span>: <span>/\\.html$/i</span>,\n<span class=\"lineNumber\">19</span>        <span>// html文件只配置一个loader</span>\n<span class=\"lineNumber\">20</span>        loader: <span>'html-loader'</span>\n<span class=\"lineNumber\">21</span>      },\n<span class=\"lineNumber\">22</span>      {\n<span class=\"lineNumber\">23</span>        <span>test</span>: <span>/\\.(jpg|png|gif|jpeg|svg)$/</span>,\n<span class=\"lineNumber\">24</span>        use: {\n<span class=\"lineNumber\">25</span>          <span>loader</span>: <span>'file-loader'</span>,\n<span class=\"lineNumber\">26</span>          <span>options</span>: {\n<span class=\"lineNumber\">27</span>            <span>outputPath</span>: <span>'imgs'</span>,\n<span class=\"lineNumber\">28</span>            <span>publicPath</span>: <span>'cdn.example.com/static/imgs'</span>\n<span class=\"lineNumber\">29</span>          }\n<span class=\"lineNumber\">30</span>        }\n<span class=\"lineNumber\">31</span>      }\n<span class=\"lineNumber\">32</span>    ]\n<span class=\"lineNumber\">33</span>  }\n<span class=\"lineNumber\">34</span>};</code></pre> \n\n<p>针对<code>html</code>文件,使用<code>html-loader</code>进行处理,这个<code>loader</code>能对<code>html</code>中的资源进行自动化的处理,使得<code>js</code>注入的图片资源,<code>html-loader</code>将<code>img</code>中的<code>src</code>属性值,通过导入资源的方式引入.</p>\n<p>然后,我们需要配置一个新的<code>loader</code>去处理这些引入的资源.</p>\n<p>针对不同图片资源,使用<code>file-loader</code>进行处理,使用这个<code>loader</code>能让我们可以在<code>module</code>中使用<code>esModule</code>或者<code>commonjs</code>的方式导入图片资源,然后通过<code>js</code>注入到<code>html</code>文件中.</p>\n<p>针对性的<code>options</code>配置,可以实现开发者需要的效果,默认打包之后的资源名变成<code>hash</code>值,扩展名不变.我们可以设置增加一些名字,虽然上述配置中没有.</p>\n<p>上述配置中,配置了打包之后,保存资源的输出目录的名字,和注入到最终<code>html</code>文件中.</p>\n<blockquote>\n<p>每一个<code>loader</code>都有很多额外的可选配置,可以实现更多需求.</p>\n</blockquote>\n<p>有时候,你可能会听到将图片资源转为<code>base64</code>编码字符串,直接写入<code>html</code>中去的说法.</p>\n<blockquote>\n<p>将图片转成<code>base64</code>可以减少总体图片资源单独的<code>http</code>请求,这是一种优化速度的方式.</p>\n</blockquote>\n<p>这个时候,则可以使用<code>url-loader</code>.安装之后,可以直接配置<code>webpack.common.js</code>:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span><span>let</span> HtmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span>module</span>.exports = {\n<span class=\"lineNumber\">5</span>  <span>entry</span>: <span>'./src/index.js'</span>, <span>// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span>plugins</span>: [<span>new</span> HtmlWebpackPlugin({\n<span class=\"lineNumber\">7</span>    <span>template</span>: <span>\"./src/template.html\"</span>\n<span class=\"lineNumber\">8</span>  })],\n<span class=\"lineNumber\">9</span>  <span>module</span>: {\n<span class=\"lineNumber\">10</span>    <span>rules</span>: [\n<span class=\"lineNumber\">11</span>      {\n<span class=\"lineNumber\">12</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">13</span>        use: [\n<span class=\"lineNumber\">14</span>          <span>'style-loader'</span>, <span>'css-loader'</span>, <span>'sass-loader'</span>\n<span class=\"lineNumber\">15</span>        ]\n<span class=\"lineNumber\">16</span>      },\n<span class=\"lineNumber\">17</span>      {\n<span class=\"lineNumber\">18</span>        <span>test</span>: <span>/\\.html$/i</span>,\n<span class=\"lineNumber\">19</span>        <span>// html文件只配置一个loader</span>\n<span class=\"lineNumber\">20</span>        loader: <span>'html-loader'</span>\n<span class=\"lineNumber\">21</span>      },\n<span class=\"lineNumber\">22</span>      {\n<span class=\"lineNumber\">23</span>        <span>test</span>: <span>/\\.(jpg|png|gif|jpeg|svg|ico)$/</span>,\n<span class=\"lineNumber\">24</span>        use: {\n<span class=\"lineNumber\">25</span>          <span>loader</span>: <span>'url-loader'</span>,\n<span class=\"lineNumber\">26</span>          <span>options</span>: {\n<span class=\"lineNumber\">27</span>            <span>limit</span>: <span>8192</span>,\n<span class=\"lineNumber\">28</span>            <span>outputPath</span>: <span>'imgs'</span>,\n<span class=\"lineNumber\">29</span>            <span>publicPath</span>: <span>'cdn.example.com/static/imgs'</span>\n<span class=\"lineNumber\">30</span>          }\n<span class=\"lineNumber\">31</span>        }\n<span class=\"lineNumber\">32</span>      }\n<span class=\"lineNumber\">33</span>    ]\n<span class=\"lineNumber\">34</span>  }\n<span class=\"lineNumber\">35</span>};</code></pre> \n\n<p>将<code>file-loader</code>直接替换成<code>url-loader</code>,唯一需要在意的是资源大小<code>limit</code>的设置,默认<code>fallback</code>是让超过<code>limit</code>的资源,使用<code>file-loader</code>处理,且配置可以传递过去,上面的<code>outputPath</code>等依然对<code>file-loader</code>生效.</p>\n<p><code>url-loader</code>还可以单独指定回调的<code>loader</code>,如果你不想用<code>file-loader</code>,想用例如<code>responsive-loader</code>的话也是可以的.</p>\n<h1>多入口设置</h1>\n<p>之前谈论的配置中,一直使用单一的<code>entry point</code>,默认从<code>src/index.js</code>作为起点.</p>\n<p>某些场景下,如果你需要多个<code>entry point</code>也是可以的 .</p>\n<pre><code><span>// webpack.common.js</span>\n<span class=\"lineNumber\">2</span><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">3</span><span>let</span> HtmlWebpackPlugin = <span>require</span>(<span>'html-webpack-plugin'</span>);\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>module</span>.exports = {\n<span class=\"lineNumber\">6</span>  <span>entry</span>: {\n<span class=\"lineNumber\">7</span>    <span>// 多个,每个都让key作为最后打包注入的变量name</span>\n<span class=\"lineNumber\">8</span>    <span>main</span>: <span>'./src/index.js'</span>,\n<span class=\"lineNumber\">9</span>    <span>other</span>: <span>'./src/other.js'</span>\n<span class=\"lineNumber\">10</span>  }, <span>// 入口点</span>\n<span class=\"lineNumber\">11</span>  <span>// ...other</span>\n<span class=\"lineNumber\">12</span>};\n<span class=\"lineNumber\">13</span><span>// 修改 webpack.dev.js</span>\n<span class=\"lineNumber\">14</span><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">15</span><span>const</span> common = <span>require</span>(<span>\"./webpack.common\"</span>);\n<span class=\"lineNumber\">16</span><span>const</span> {merge} = <span>require</span>(<span>\"webpack-merge\"</span>)\n<span class=\"lineNumber\">17</span> \n<span class=\"lineNumber\">18</span><span>module</span>.exports = merge(common, {\n<span class=\"lineNumber\">19</span>  <span>mode</span>: <span>'development'</span>,\n<span class=\"lineNumber\">20</span>  <span>output</span>: {\n<span class=\"lineNumber\">21</span>    <span>publicPath</span>: <span>''</span>,\n<span class=\"lineNumber\">22</span>    <span>path</span>: path.resolve(__dirname, <span>'out'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">23</span>    <span>filename</span>: <span>'[name].[contenthash].js'</span> <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">24</span>  }\n<span class=\"lineNumber\">25</span>});</code></pre> \n\n<p>现在,打包的<code>index.html</code>内:</p>\n<pre><code><span>&#x3C;!DOCTYPE <span>html</span>></span>\n<span class=\"lineNumber\">2</span><span>&#x3C;<span>html</span> <span>lang</span>=<span>\"en\"</span>></span>\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span>  <span>&#x3C;<span>head</span>></span>\n<span class=\"lineNumber\">5</span>    <span>&#x3C;<span>meta</span> <span>charset</span>=<span>\"UTF-8\"</span>></span>\n<span class=\"lineNumber\">6</span>    <span>&#x3C;<span>meta</span> <span>name</span>=<span>\"viewport\"</span> <span>content</span>=<span>\"width=device-width, initial-scale=1.0\"</span>></span>\n<span class=\"lineNumber\">7</span>    <span>&#x3C;<span>title</span>></span>webpack learning<span>&#x3C;/<span>title</span>></span>\n<span class=\"lineNumber\">8</span>  <span>&#x3C;/<span>head</span>></span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>  <span>&#x3C;<span>body</span>></span>\n<span class=\"lineNumber\">11</span>    <span>&#x3C;<span>h1</span>></span>Start......<span>&#x3C;/<span>h1</span>></span>\n<span class=\"lineNumber\">12</span>    <span>&#x3C;<span>script</span> <span>src</span>=<span>\"main.3566bb7a2fe712fb86ed.js\"</span>></span><span>&#x3C;/<span>script</span>></span>\n<span class=\"lineNumber\">13</span>    <span>&#x3C;<span>script</span> <span>src</span>=<span>\"other.5cb71429ff79cddc2f96.js\"</span>></span><span>&#x3C;/<span>script</span>></span>\n<span class=\"lineNumber\">14</span>  <span>&#x3C;/<span>body</span>></span>\n<span class=\"lineNumber\">15</span> \n<span class=\"lineNumber\">16</span><span>&#x3C;/<span>html</span>></span></code></pre> \n\n<p>有时候,并不想让所有内容都写入<code>main.balabala.js</code>中,可以将独立的一部分打包到另一个入口文件,这也是一种需求衍生的解决方案.</p>\n<blockquote>\n<p>多个单独的<code>link</code>或者<code>script</code>标签下,浏览器并行下载多个文件,时间取决于最大的那个文件,有时候可以对此进行优化速度.后续优化部分再提.</p>\n</blockquote>\n<h1>优化 CSS 引入方案</h1>\n<p>之前我们通过<code>import</code>或者<code>require</code>的方式引入<code>css</code>,并且用<code>js</code>的方式注入到最终<code>DOM</code>中去,创建<code>style</code>的<code>tag</code>.</p>\n<p>有一个问题.</p>\n<p>打包的<code>js</code>文件放在<code>body</code>的底部,那么<code>css</code>效果势必在最后才体现出来.并且<code>css</code>文件可以缓存,既减小了<code>bundle</code>的大小,又提高页面渲染的速度.</p>\n<p>让我们回顾一下直接通过<code>link</code>引入单独的<code>css</code>的流程.</p>\n<p>哦不,是来回顾一下浏览器渲染原理,我找了一篇非常好的博客文章.</p>\n<p><a href=\"https://github.com/ljianshu/Blog/issues/51\">深入浅出浏览器渲染原理 · Issue #51 · ljianshu/Blog</a></p>\n<p>现在,我们知道了,如果你的<code>css</code>不是非常小部分的内容的话,单独引入的优势<code>css</code>脱离整体,单独下载,能利用到浏览器多线程的优势,减少资源拉取的时间.</p>\n<pre><code><span>// webpack.prod.js</span>\n<span class=\"lineNumber\">2</span><span>// 生产模式,打包成单独的css文件</span>\n<span class=\"lineNumber\">3</span><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">4</span><span>const</span> common = <span>require</span>(<span>\"./webpack.common\"</span>);\n<span class=\"lineNumber\">5</span><span>const</span> MiniCssExtractPlugin = <span>require</span>(<span>'mini-css-extract-plugin'</span>);\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>const</span> { merge } = <span>require</span>(<span>\"webpack-merge\"</span>)\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span>module</span>.exports = merge(common, {\n<span class=\"lineNumber\">10</span>  <span>mode</span>: <span>'production'</span>,\n<span class=\"lineNumber\">11</span>  <span>output</span>: {\n<span class=\"lineNumber\">12</span>    <span>path</span>: path.resolve(__dirname, <span>'dist'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">13</span>  },\n<span class=\"lineNumber\">14</span>  <span>plugins</span>: [\n<span class=\"lineNumber\">15</span>    <span>new</span> MiniCssExtractPlugin({\n<span class=\"lineNumber\">16</span>      <span>filename</span>: <span>\"css/[name].[hash].css\"</span>,\n<span class=\"lineNumber\">17</span>    })\n<span class=\"lineNumber\">18</span>  ],\n<span class=\"lineNumber\">19</span>  <span>module</span>: {\n<span class=\"lineNumber\">20</span>    <span>rules</span>: [\n<span class=\"lineNumber\">21</span>      {\n<span class=\"lineNumber\">22</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">23</span>        use: [\n<span class=\"lineNumber\">24</span>          MiniCssExtractPlugin.loader, <span>// 3. extract css into files</span>\n<span class=\"lineNumber\">25</span>          <span>'css-loader'</span>, <span>// 2. turns css into commonjs</span>\n<span class=\"lineNumber\">26</span>          <span>'sass-loader'</span> <span>// 1. turns sass into css</span>\n<span class=\"lineNumber\">27</span>        ]\n<span class=\"lineNumber\">28</span>      }\n<span class=\"lineNumber\">29</span>    ]\n<span class=\"lineNumber\">30</span>  }\n<span class=\"lineNumber\">31</span>});</code></pre> \n\n<p>可能会引发一些问题,例如单独的<code>css</code>文件太多,浏览器产生很多<code>http</code>请求,服务器方面需要做出非常多的响应,在用户量很大的情况下,也许不是一个良好的选择.</p>\n<p>这个时候,合并一些<code>css</code>到一个<code>css</code>文件,让整体文件数量减少,单文件变大,只要比<code>chunk</code>包小,加载时间一般就不会超过主要的<code>js</code>文件.</p>\n<blockquote>\n<p>production 模式默认对构建内容进行压缩,开发模式则无所谓,一般不压缩.</p>\n</blockquote>\n<h1>兼容性选择</h1>\n<p><strong>兼容CSS</strong>:</p>\n<p>针对不同浏览器厂商的实现,我们可以用<code>postcss-loader</code>和<code>autoprefixer</code>增加样式前缀来实现一定程度的兼容.</p>\n<pre><code><span># 安装</span>\n<span class=\"lineNumber\">2</span>$  yarn add -D postcss-loader autoprefixer</code></pre> \n\n<p>配置<code>webpack.prod.js</code>:</p>\n<pre><code><span>const</span> path = <span>require</span>(<span>'path'</span>);\n<span class=\"lineNumber\">2</span><span>const</span> common = <span>require</span>(<span>\"./webpack.common\"</span>);\n<span class=\"lineNumber\">3</span><span>const</span> MiniCssExtractPlugin = <span>require</span>(<span>'mini-css-extract-plugin'</span>);\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span>const</span> { merge } = <span>require</span>(<span>\"webpack-merge\"</span>)\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>module</span>.exports = merge(common, {\n<span class=\"lineNumber\">8</span>  <span>mode</span>: <span>'production'</span>,\n<span class=\"lineNumber\">9</span>  <span>output</span>: {\n<span class=\"lineNumber\">10</span>    <span>path</span>: path.resolve(__dirname, <span>'dist'</span>), <span>// 输出目录, path库的api</span>\n<span class=\"lineNumber\">11</span>  },\n<span class=\"lineNumber\">12</span>  <span>plugins</span>: [\n<span class=\"lineNumber\">13</span>    <span>new</span> MiniCssExtractPlugin({\n<span class=\"lineNumber\">14</span>      <span>filename</span>: <span>\"css/[name].[hash:8].css\"</span>,\n<span class=\"lineNumber\">15</span>    })\n<span class=\"lineNumber\">16</span>  ],\n<span class=\"lineNumber\">17</span>  <span>module</span>: {\n<span class=\"lineNumber\">18</span>    <span>rules</span>: [\n<span class=\"lineNumber\">19</span>      {\n<span class=\"lineNumber\">20</span>        <span>test</span>: <span>/\\.sass$/</span>,\n<span class=\"lineNumber\">21</span>        use: [\n<span class=\"lineNumber\">22</span>          MiniCssExtractPlugin.loader, <span>// 4. extract css into files</span>\n<span class=\"lineNumber\">23</span>          <span>'css-loader'</span>, <span>// 3. turns css into commonjs</span>\n<span class=\"lineNumber\">24</span>          <span>'postcss-loader'</span>, <span>// 2. autoprefixer</span>\n<span class=\"lineNumber\">25</span>          <span>'sass-loader'</span> <span>// 1. turns sass into css</span>\n<span class=\"lineNumber\">26</span>        ]\n<span class=\"lineNumber\">27</span>      }\n<span class=\"lineNumber\">28</span>    ]\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span>});</code></pre> \n\n<p>先将<code>sass</code>转译,再用<code>postcss-loader</code>增加前缀.</p>\n<p>另外创建<code>postcss.conf.js</code>指定插件为<code>autoprefixer</code>:</p>\n<pre><code><span>// postcss.conf.js</span>\n<span class=\"lineNumber\">2</span><span>module</span>.exports = {\n<span class=\"lineNumber\">3</span>  <span>plugins</span>: [\n<span class=\"lineNumber\">4</span>    <span>require</span>(<span>'autoprefixer'</span>)\n<span class=\"lineNumber\">5</span>  ]\n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<p>再修改<code>package.json</code>,增加浏览器支持度配置:</p>\n<pre><code>{\n<span class=\"lineNumber\">2</span>  <span>\"name\"</span>: <span>\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span>\"version\"</span>: <span>\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span>\"main\"</span>: <span>\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span>\"license\"</span>: <span>\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span>\"sideEffects\"</span>: [\n<span class=\"lineNumber\">7</span>    <span>\"*.css\"</span>,\n<span class=\"lineNumber\">8</span>    <span>\"*.sass\"</span>\n<span class=\"lineNumber\">9</span>  ],\n<span class=\"lineNumber\">10</span>  <span>\"browserslist\"</span>: [\n<span class=\"lineNumber\">11</span>    <span>\"> 1%\"</span>,\n<span class=\"lineNumber\">12</span>    <span>\"last 2 versions\"</span>,\n<span class=\"lineNumber\">13</span>    <span>\"not ie &#x3C;= 8\"</span>\n<span class=\"lineNumber\">14</span>  ],\n<span class=\"lineNumber\">15</span>  <span>\"scripts\"</span>: {\n<span class=\"lineNumber\">16</span>    <span>// 这里插一嘴,windows下不支持直接使用 rm 命令,因为scripts部分是给 Unix 系统写的,删除文件夹我使用了rimraf,先用npm install --save-dev rimraf安装. </span>\n<span class=\"lineNumber\">17</span>    <span>\"start\"</span>: <span>\"webpack serve --config webpack.dev.js\"</span>,\n<span class=\"lineNumber\">18</span>    <span>\"dev\"</span>: <span>\"rimraf out &#x26;&#x26; webpack --config webpack.dev.js\"</span>,\n<span class=\"lineNumber\">19</span>    <span>\"build\"</span>: <span>\"rimraf dist &#x26;&#x26; webpack --config webpack.prod.js\"</span>,\n<span class=\"lineNumber\">20</span>    <span>\"clean\"</span>: <span>\"rimraf dist &#x26;&#x26; rimraf out\"</span>\n<span class=\"lineNumber\">21</span>  }  \n<span class=\"lineNumber\">22</span>}\n<span class=\"lineNumber\">23</span></code></pre> \n\n<blockquote>\n<p>很多人使用 <code>clean-webpack-plugin</code> 来清理文件和目录,且此插件可以忽略不需要清理的目录和文件,非常方便.</p>\n</blockquote>\n<p><strong>兼容JS</strong>:</p>\n<p>还是因为不同浏览器厂商的支持度和实现不一的问题,且如果你想使用<code>ECMAScript</code>比较新的语法,而类似<code>IE</code>浏览器不支持,或者其他浏览器暂时不支持.</p>\n<p>这时候需要使用类似<code>babel</code>这些工具对我们的<code>js</code>代码进行处理,增加<code>polyfill</code>.</p>\n<p><strong>babel</strong>转换的是语法,而不是<code>API</code>,只有引入了语法<code>polyfill</code>才能将新的<code>API</code>代码进行转换,让指定范围的运行环境稳定运行我们的代码.</p>\n<blockquote>\n<p><a href=\"https://www.babeljs.cn/docs/\">Babel Doc</a>: Babel 是一个工具链，主要用于将 <code>ECMAScript 2015+</code>版本的代码转换为向后兼容的JavaScript 语法，以便能够运行在当前和旧版本的浏览器和其他环境中.</p>\n</blockquote>\n<p>安装<code>babel</code>依赖:</p>\n<pre><code>$ yarn add  -D @babel/core @babel/preset-env @babel/plugin-transform-runtime babel-loader\n<span class=\"lineNumber\">2</span>$ yarn add @babel/runtime @babel/runtime-corejs3</code></pre> \n\n<p><code>babel7</code>支持多种配置类型,比如:</p>\n<ul>\n<li>\n<p>babel.config.js</p>\n</li>\n<li>\n<p>.babelrc</p>\n</li>\n<li>\n<p>.babelrc.js</p>\n</li>\n<li>\n<p>.babelrc.json</p>\n</li>\n<li>\n<p>...</p>\n</li>\n</ul>\n<p><code>@babel/preset-env</code>是<code>babel</code>推荐的预设功能,内置了常用插件来支持<code>polyfill</code>,用户可以根据<code>target</code>指定环境去使用对应的插件.</p>\n<p><code>core.js</code>是一个<code>JavaScript标准库</code>的<code>polyfill</code>.<code>@babel/preset-env</code>依赖于<code>core.js</code>.</p>\n<p>推荐单独创建一个<code>.babel.config.js</code>文件.</p>\n<pre><code>module.exports = {\n<span class=\"lineNumber\">2</span>  presets: [\n<span class=\"lineNumber\">3</span>    [\n<span class=\"lineNumber\">4</span>      <span>\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">5</span>      {\n<span class=\"lineNumber\">6</span>        <span>// 按需引入</span>\n<span class=\"lineNumber\">7</span>        <span>\"useBuiltIns\"</span>: <span>\"usage\"</span>,\n<span class=\"lineNumber\">8</span>        <span>// \"targets\": \"defaults\",  建议关于targets都使用package.json 中的browserslist配置.可以共用给postcss的插件.</span>\n<span class=\"lineNumber\">9</span>        <span>\"corejs\"</span>: <span>3</span> <span>// version 3, 默认填充规范,可以开启填充提案.建议不优先使用体验语法,毕竟提案始终存在被放弃的可能性,这些提案依然需要时间和考验.</span>\n<span class=\"lineNumber\">10</span>      }\n<span class=\"lineNumber\">11</span>    ]\n<span class=\"lineNumber\">12</span>  ],\n<span class=\"lineNumber\">13</span>  plugins: [\n<span class=\"lineNumber\">14</span>    [\n<span class=\"lineNumber\">15</span>      <span>\"@babel/plugin-transform-runtime\"</span> <span>// 用于减少代码体积,babel-loader的文档有介绍如何解决关键的两个问题,这是其中之一.使用此插件,预设polyfill不会直接注入到全局变量中.</span>\n<span class=\"lineNumber\">16</span>    ]\n<span class=\"lineNumber\">17</span>  ]\n<span class=\"lineNumber\">18</span>}</code></pre> \n\n<p><code>webpack</code>方面的配置:</p>\n<pre><code>const path = require('path');\n<span class=\"lineNumber\">2</span>let HtmlWebpackPlugin = require('html-webpack-plugin');\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span>module.exports = {\n<span class=\"lineNumber\">5</span>  entry: {\n<span class=\"lineNumber\">6</span>    main: './src/index.js',\n<span class=\"lineNumber\">7</span>    other: './src/other.js'\n<span class=\"lineNumber\">8</span>  }, <span>// 入口点</span>\n<span class=\"lineNumber\">9</span>  output: {\n<span class=\"lineNumber\">10</span>    filename: 'js/[name].[contenthash].js' <span>// 输出构建文件名</span>\n<span class=\"lineNumber\">11</span>  },\n<span class=\"lineNumber\">12</span>  plugins: [\n<span class=\"lineNumber\">13</span>    new HtmlWebpackPlugin({\n<span class=\"lineNumber\">14</span>      template: <span>\"./src/template.html\"</span>\n<span class=\"lineNumber\">15</span>    })\n<span class=\"lineNumber\">16</span>  ],\n<span class=\"lineNumber\">17</span>  module: {\n<span class=\"lineNumber\">18</span>    rules: [\n<span class=\"lineNumber\">19</span>      {\n<span class=\"lineNumber\">20</span>        test: /\\.html$/i,\n<span class=\"lineNumber\">21</span>        <span>// html文件只配置一个loader</span>\n<span class=\"lineNumber\">22</span>        loader: 'html-loader'\n<span class=\"lineNumber\">23</span>      },\n<span class=\"lineNumber\">24</span>      {\n<span class=\"lineNumber\">25</span>        test: /\\.(jpg|png|gif|jpeg|svg|ico)$/,\n<span class=\"lineNumber\">26</span>        use: {\n<span class=\"lineNumber\">27</span>          loader: 'url-loader',\n<span class=\"lineNumber\">28</span>          options: {\n<span class=\"lineNumber\">29</span>            limit: <span>8192</span>,\n<span class=\"lineNumber\">30</span>            outputPath: 'imgs',\n<span class=\"lineNumber\">31</span>            publicPath: 'cdn.example.com/static/imgs'\n<span class=\"lineNumber\">32</span>          }\n<span class=\"lineNumber\">33</span>        }\n<span class=\"lineNumber\">34</span>      },\n<span class=\"lineNumber\">35</span>      {\n<span class=\"lineNumber\">36</span>        test: /\\.jsx?$/,\n<span class=\"lineNumber\">37</span>        exclude: /(node_modules|bower_components)/, <span>// 排除部分,提高速度</span>\n<span class=\"lineNumber\">38</span>        use: {\n<span class=\"lineNumber\">39</span>          loader: 'babel-loader' <span>// 指定loader,配置通过babel.config.js去设置</span>\n<span class=\"lineNumber\">40</span>        },\n<span class=\"lineNumber\">41</span>      }\n<span class=\"lineNumber\">42</span>    ]\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>};</code></pre> \n\n<p>也许你听过<code>babel</code>针对<code>stage-x</code>的支持度设置,但是在<code>babel7</code>后<code>preset-env</code>已经支持完全替换<code>babel-preset-es2015</code>~<code>babel-preset-latest</code>.</p>\n<blockquote>\n<p>我觉得团队开发只应该使用纳入年度版本中的提案,暂未纳入年度版本中的特性存在着不会成为<code>js</code>一部分的可能性.</p>\n</blockquote>\n<h1>最后...</h1>\n<p>还有很多内容并未写出来,暂时写到这里,后续再根据项目进行分析和深入学习,再见.</p>\n<h1>优化</h1>\n<p>这是一个很有意义的问题,需要我进一步配合项目进行深入学习,以下是我想到的一些知识点.</p>\n<ul>\n<li>使用<code>ParallelUglifyPlugin</code>代替默认压缩插件</li>\n<li>使用<code>swc</code>代替<code>babel</code>进行编译</li>\n<li>使用<code>cdn</code>对部分资源进行引用,减小打包的大小.</li>\n<li>使用缓存插件,减少不必要的重复打包.</li>\n<li>使用动态导入机制,减小打包大小.</li>\n</ul>\n<h1>参考</h1>\n<ul>\n<li>\n<p><a href=\"https://www.webpackjs.com/\">webpack 中文文档 | webpack 中文网</a></p>\n</li>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/\">What is Babel? · Babel</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.cn/post/6844904132294213639\">带你一步一步配置Babel7</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/browserslist/browserslist\">browserslist/browserslist: 🦔 Share target browsers between different front-end tools, like Autoprefixer, Stylelint and babel-preset-env</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.cn/post/6844903937900822536\">[译]Babel文档之@babel/preset-env</a></p>\n</li>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000038324347#\">一文搞懂Babel配置 - SegmentFault 思否</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/ljianshu/Blog/issues/51\">深入浅出浏览器渲染原理 · Issue #51 · ljianshu/Blog</a></p>\n</li>\n</ul>\n","title":"学习webpack","date":"2021/1/13","tags":["webpack","工程化"],"mainImg":"https://images.unsplash.com/photo-1605507139485-d0a835ec559d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1605507139485-d0a835ec559d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"今天,我想要学习 ESNext 的知识,并且运用到我的工具库中去,创建 GitHub repo,但我依然需要一个靶场.学习 webpack 让我能轻松写 ESNext 代码,走在前头,工程化技术受用无穷."}},"__N_SSG":true}