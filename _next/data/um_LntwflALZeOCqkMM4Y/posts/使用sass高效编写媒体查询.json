{"pageProps":{"post":{"slug":"使用sass高效编写媒体查询","contentHtml":"<h3>前言</h3>\n<p>此前一直使用第三方库的功能编写媒体查询代码，最近则需要单独使用 sass 来写媒体查询，本文记录如何处理这个问题 📝。</p>\n<blockquote>\n<p>愿笔者和读者皆有所得。</p>\n</blockquote>\n<h3>介绍</h3>\n<p>通常我们在处理响应式的样式表问题时会采用<code>CSS Media Queries</code>技术，这项功能可以让我们按不同设备类型或特定的设备参数来修改样式表属性。</p>\n<p>媒体查询的语法如下：</p>\n<pre><code><span>@media</span> 媒体类型和条件 {\n<span class=\"lineNumber\">2</span>  // 样式表\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>通常，我们会为某种设备类型单独添加样式，诸如：</p>\n<ul>\n<li>all 所有设备</li>\n<li>print 打印预览模式</li>\n<li>screen 屏幕</li>\n<li>speech 语音合成器</li>\n</ul>\n<p>最常用的即 screen 屏幕，用户体验设计得较好的产品则会全面考虑其他设备类型。</p>\n<p>此外便是其他条件，诸如：</p>\n<ul>\n<li>(min-width: 960px): 宽度至少为为 960px 时</li>\n<li>(max-width: 960px): 宽度最大为 960px 时</li>\n<li>(aspect-ratio: 11/5): 长宽比为 11 比 5 时</li>\n<li>...</li>\n</ul>\n<p>诸多条件，根据需求按文档处理，不同的条件可以使用逻辑操作符联和起来：</p>\n<ul>\n<li><code>and</code> 与</li>\n<li><code>not</code> 非</li>\n<li><code>only</code> 限定</li>\n<li><code>,</code> 或</li>\n</ul>\n<p>举个例子：</p>\n<pre><code><span>@media</span> screen <span>and</span> (<span>aspect-ratio</span>: <span>11</span>/<span>5</span>) {\n<span class=\"lineNumber\">2</span>  ...;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>则为长宽比为 11:5 的屏幕设备添加样式。</p>\n<h3>sass 媒体查询</h3>\n<p>ok，使用<code>sass</code>编写媒体查询之前为了方便，我们来创建一个片段文件<code>_mixins.scss</code>：</p>\n<pre><code><span>@mixin</span> responsive(<span>$breakpointer</span>) {\n<span class=\"lineNumber\">2</span>  <span>@if</span> <span>$breakpointer</span> == mobile {\n<span class=\"lineNumber\">3</span>    <span>@media</span> screen <span>and</span> (<span>max-width</span>: <span>480px</span>) {\n<span class=\"lineNumber\">4</span>      <span>@content</span>;\n<span class=\"lineNumber\">5</span>    }\n<span class=\"lineNumber\">6</span>  } <span>@else</span> if <span>$breakpointer</span> == tablet {\n<span class=\"lineNumber\">7</span>    <span>@media</span> screen <span>and</span> (<span>min-width</span>: <span>768px</span>) {\n<span class=\"lineNumber\">8</span>      <span>@content</span>;\n<span class=\"lineNumber\">9</span>    }\n<span class=\"lineNumber\">10</span>  } <span>@else</span> if <span>$breakpointer</span> == desktop {\n<span class=\"lineNumber\">11</span>    <span>@media</span> screen <span>and</span> (<span>min-width</span>: <span>960px</span>) {\n<span class=\"lineNumber\">12</span>      <span>@content</span>;\n<span class=\"lineNumber\">13</span>    }\n<span class=\"lineNumber\">14</span>  }\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p>之后便可以在其他<code>sass</code>文件中<code>@import mixins</code>引入提前准备好的<code>mixin</code>，示例如下：</p>\n<pre><code><span>@import</span> mixins .container <span>@include</span> responsive(tablet) <span>background</span>: purple <span>@include</span>\n<span class=\"lineNumber\">2</span>  responsive(mobile) <span>background</span>: blue <span>@include</span> responsive(desktop) <span>background</span>: tomato;</code></pre> \n\n<blockquote>\n<p>笔者更喜欢 .sass ，在写的时候混入了。</p>\n</blockquote>\n<p>从某种程度上看，我们已经可以直接用这个<code>mixin</code>来写诸多样式了，搞定？</p>\n<p>直到我看到这个项目：</p>\n<p><a href=\"https://github.com/eduardoboucas/include-media\">eduardoboucas/include-media: 📐 Simple, elegant and maintainable media queries in Sass</a></p>\n<p>以及这篇文章：</p>\n<p><a href=\"https://css-tricks.com/approaches-media-queries-sass/\">Approaches to Media Queries in Sass - CSS-Tricks</a></p>\n<p>还有这个：</p>\n<p><a href=\"http://breakpoint-sass.com/\">Breakpoint</a></p>\n<blockquote>\n<p>我突然意识到我得把我写的<code>mixin</code>删除干净，以免丢人现眼。</p>\n</blockquote>\n<h3>更好的方案</h3>\n<p>上述几个 🔗 链接有 GitHub 仓库，有 css-stricks 文章，还有一个断点概念介绍。</p>\n<p>每个人心里都有自己喜欢的方案，我打算就在前人栽好的树下乘凉：</p>\n<p><code>Eduardo Bouças’s</code>的作品<code>include-media</code>!</p>\n<p>我们可以通过<code>npm</code>直接安装<code>include-media</code>，然后在<code>sass</code>文件中导入并且使用：</p>\n<pre><code><span>@import</span> include-media <span>$breakpoints</span>:\n<span class=\"lineNumber\">2</span>  (<span>phone</span>: <span>480px</span>, <span>tablet</span>: <span>768px</span>, <span>desktop</span>: <span>1024px</span>) .container <span>@include</span> media(\n<span class=\"lineNumber\">3</span>    <span>\">=phone\"</span>,\n<span class=\"lineNumber\">4</span>    <span>\"&#x3C;=tablet\"</span>\n<span class=\"lineNumber\">5</span>  ) <span>background-color</span>: purple <span>@include</span> media(<span>\">=tablet\"</span>, <span>\"&#x3C;=desktop\"</span>)\n<span class=\"lineNumber\">6</span>  <span>background-color</span>: blue <span>@include</span> media(<span>\">desktop\"</span>) <span>background-color</span>: red <span>width</span>:\n<span class=\"lineNumber\">7</span>  <span>4rem</span> <span>height</span>: <span>4rem</span>;</code></pre> \n\n<p>相比较与其他的硬编码方式，<code>include-media</code>支持定义自定义的断点，并且通过\">=\"这样的比较符号来更<code>精细</code>地控制间隔。</p>\n<p>上述代码中我添加了断点变量，实际上库已经为我们设定了一系列默认变量，诸如上述几个设备类型，也支持高清屏<code>retina2x</code>等条件。使用默认变量还是自定义变量，自定义变量使用什么命名都由你选择。</p>\n<p>举个例子：</p>\n<pre><code><span>@include</span> media(<span>\"><span class=\"lineNumber\">1</span>desktop\"</span>, <span>\"&#x3C;=1150px\"</span>) {\n<span class=\"lineNumber\">2</span>  <span>font-size</span>: <span>4rem</span>;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>上述代码可以默认编译出在默认的<code>desktop</code>到<code>1150px</code>范围内的媒体查询代码，更多示例可查看官方文档。</p>\n<p>感谢！</p>\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://github.com/eduardoboucas/include-media\">eduardoboucas/include-media: 📐 Simple, elegant and maintainable media queries in Sass</a></li>\n<li><a href=\"https://css-tricks.com/approaches-media-queries-sass/\">Approaches to Media Queries in Sass - CSS-Tricks</a></li>\n<li><a href=\"http://breakpoint-sass.com/\">Breakpoint</a></li>\n</ul>\n","title":"使用sass高效编写媒体查询","date":"2021/12/19","tags":["Sass"],"mainImg":"https://images.unsplash.com/photo-1611175697352-c8a3d5719783?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4NjAwMzk&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611175697352-c8a3d5719783?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4NjAwMzk&ixlib=rb-1.2.1&q=80&w=400","intro":"此前一直使用第三方库的功能编写媒体查询代码，最近则需要单独使用 sass 来写媒体查询，本文记录如何处理这个问题。"}},"__N_SSG":true}