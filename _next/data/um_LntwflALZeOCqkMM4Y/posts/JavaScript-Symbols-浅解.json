{"pageProps":{"post":{"slug":"JavaScript-Symbols-浅解","contentHtml":"<h3>前言</h3>\n<p>在 ES6 的时候，JavaScript 宣布新增了一个<code>Symbol</code>原始数据类型。今天，我们来谈谈此数据类型的作用、特性以及应用场景。</p>\n<p>在开始之前，让我们先来探讨一些许多开发者可能不太熟悉的 JavaScript 特性。</p>\n<h3>背景</h3>\n<p>JavaScript 中的数据类型可以分为两类：</p>\n<ul>\n<li>primitive: 原始值</li>\n<li>对象（包括函数）</li>\n</ul>\n<blockquote>\n<p>object.valueOf() 返回该对象的原始值。</p>\n</blockquote>\n<p>其中<code>primitive</code>值包括：</p>\n<ul>\n<li>string</li>\n<li>number(包含浮点数和整数、NaN)</li>\n<li>undefined</li>\n<li>boolean</li>\n<li>null (尽管 typeof null === 'object'，null 依然是一种原始值)</li>\n<li>bigInt: 大整数</li>\n<li>symbol: 符号</li>\n</ul>\n<p><code>primitive</code>值的一大特性就是<code>不可变</code>，一个原始值被赋给了一个变量，这个变量可以重新赋值，但这个原始值不会改变，举个例子：</p>\n<p><code>let x = 1; x++</code></p>\n<p>显然，我们只是重新为<code>x</code>分配了一个值，但并没有改变原始值<code>1</code>。</p>\n<p>此前，笔者学习过<code>C语言</code>，其具有<code>值传递</code>和<code>引用传递</code>的概念，JavaScript 也有这样的概念，其基于被传递的数据类型来判断是哪种传递，如果我们给一个函数传入一个原始数据类型，则属于<code>值传递</code>，函数内部修改参数变量也不会改变传入的值。但是如果我们传入一个对象，并且在函数内部修改了此对象，则其他引用此对象的代码也会受到影响，因为此对象被修改了。</p>\n<p>举个例子：</p>\n<pre><code><span>const</span> foo = <span>(<span>val</span>) =></span> {\n<span class=\"lineNumber\">2</span>  val += <span>1</span>;\n<span class=\"lineNumber\">3</span>};\n<span class=\"lineNumber\">4</span><span>let</span> x = <span>1</span>;\n<span class=\"lineNumber\">5</span>foo(x);\n<span class=\"lineNumber\">6</span><span>console</span>.log(x); <span>// 1</span>\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span>const</span> bar = <span>(<span>val</span>) =></span> {\n<span class=\"lineNumber\">9</span>  val.age += <span>1</span>;\n<span class=\"lineNumber\">10</span>};\n<span class=\"lineNumber\">11</span><span>const</span> obj = { <span>age</span>: <span>1</span> };\n<span class=\"lineNumber\">12</span>bar(obj);\n<span class=\"lineNumber\">13</span><span>console</span>.log(obj.age); <span>// 2</span></code></pre> \n\n<p>原始值始终严格等于另一个具有相同值的原始值，因此无论何时我们都可以进行如下比较：</p>\n<blockquote>\n<p>NaN 除外，<code>NaN !== NaN</code></p>\n</blockquote>\n<pre><code><span>const</span> name = <span>\"Aarom\"</span>;\n<span class=\"lineNumber\">2</span><span>const</span> obj = {\n<span class=\"lineNumber\">3</span>  <span>name</span>: <span>\"Aaron\"</span>,\n<span class=\"lineNumber\">4</span>};\n<span class=\"lineNumber\">5</span><span>console</span>.log(name === obj.name); <span>// true</span></code></pre> \n\n<p>但是结构相同的非原始值（对象）则不相等。</p>\n<pre><code><span>const</span> obj1 = { <span>name</span>: <span>\"Intrinsic\"</span> };\n<span class=\"lineNumber\">2</span><span>const</span> obj2 = { <span>name</span>: <span>\"Intrinsic\"</span> };\n<span class=\"lineNumber\">3</span><span>console</span>.log(obj1 === obj2); <span>// false</span></code></pre> \n\n<p>对象在 JavaScript 语言中扮演着特殊的角色，多年前有一句广为流传的描述：<code>JavaScript 一切皆对象</code>，如果某人说此观点是错误的，或许也会有人提出质疑：<code>字符串既然不是对象，为什么它会有属性呢？</code></p>\n<p>实际上，字符串依然是原始值，当我们使用一个变量保存此字符串时并访问此变量的属性时，JavaScript 内部通过一个包装类的操作创建了一个临时对象，实际上这个字符串值并非对象，就像某人穿上了女装，我们总不能说此人是妹子吧！</p>\n<p>话说回来，对象在我们日常开发中无处不在。它们通常由一系列的键值对组成，在<code>symbol</code>出现之前，所有的对象<code>key</code>值都是字符串，即使使用某个非字符串作为<code>key</code>，这个值也会先转为字符串，举个例子：</p>\n<pre><code><span>const</span> obj = {};\n<span class=\"lineNumber\">2</span>obj.foo = <span>'foo'</span>;\n<span class=\"lineNumber\">3</span>obj[<span>'bar'</span>] = <span>'bar'</span>;\n<span class=\"lineNumber\">4</span>obj[<span>2</span>] = <span>2</span>;\n<span class=\"lineNumber\">5</span>obj[{}] = <span>'someobj'</span>\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>console</span>.log(obj);\n<span class=\"lineNumber\">8</span><span>// { '2': 2, foo: 'foo', bar: 'bar',</span>\n<span class=\"lineNumber\">9</span>     <span>'[object Object]'</span>: <span>'someobj'</span> }</code></pre> \n\n<blockquote>\n<p>Note: 题外话，<code>Map</code>可以使用非字符串作为<code>key</code>。</p>\n</blockquote>\n<h3>Symbol</h3>\n<p><code>ES6</code>规范支持了一种新的原始数据类型：<code>symbol</code>！</p>\n<p>按张鑫旭老师的说法：</p>\n<p>此原始值类型的作用只有一个：<code>作为对象属性的唯一标识符</code>，防止对象属性冲突发生。</p>\n<p><code>symbol</code>是一个不可以重新创建的原始值，举个例子：</p>\n<pre><code><span>const</span> s1 = <span>Symbol</span>();\n<span class=\"lineNumber\">2</span><span>const</span> s2 = <span>Symbol</span>();\n<span class=\"lineNumber\">3</span><span>console</span>.log(s1 === s2); <span>// false</span></code></pre> \n\n<blockquote>\n<p>不支持 <code>new Symbol()</code> 操作，其不具有完整的构造函数，而诸如<code>Boolean</code>、<code>String</code>、<code>Number</code>可以使用<code>new</code>是历史遗留原因。</p>\n</blockquote>\n<p>上述示例中可以这样添加一个调试信息：</p>\n<pre><code><span>const</span> s = <span>Symbol</span>(<span>\"debug info!\"</span>);\n<span class=\"lineNumber\">2</span><span>console</span>.log(s); <span>// Symbol(debug info)</span></code></pre> \n\n<p>参数<code>debug info</code>唯一的作用就是作为调试信息使用，切勿理解为当参数相同时，创建的<code>symbol</code>是相等的。</p>\n<p>当我们将<code>symbol</code>用做对象的<code>key</code>时，情况跟字符串有所差别：</p>\n<pre><code><span>const</span> obj = {};\n<span class=\"lineNumber\">2</span><span>const</span> s1 = <span>Symbol</span>();\n<span class=\"lineNumber\">3</span>obj[s1] = <span>\"s1\"</span>;\n<span class=\"lineNumber\">4</span>obj.age = <span>100</span>;\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span>console</span>.log(obj); <span>// { age: 100 }</span>\n<span class=\"lineNumber\">7</span><span>console</span>.log(s1 <span>in</span> obj); <span>// true</span>\n<span class=\"lineNumber\">8</span><span>console</span>.log(obj[s1]); <span>// s1</span>\n<span class=\"lineNumber\">9</span><span>console</span>.log(<span>Object</span>.keys(obj));\n<span class=\"lineNumber\">10</span>[<span>\"age\"</span>];</code></pre> \n\n<p>注意，对象所有的符号属性都不会在<code>Object.keys()</code>的返回结果中，之所以如此是因为：<code>向后兼容</code>，旧代码不应该处理新的符号属性，因此不在此方法中返回任何的符号属性。</p>\n<p>乍一看绝对可以使用符号属性作为对象的私有属性！许多其他语言都支持类对象中具有隐藏的私有属性，这一特性在 JavaScript 中没有原生的解决方案，因此长久以来被诟病。</p>\n<blockquote>\n<p><a href=\"https://github.com/tc39/proposal-class-fields\">tc39/proposal-class-fields: Orthogonally-informed combination of public and private fields proposals</a> ES2020 草案中增加了私有实例字段的支持 🎉🎉🎉，现已进入 stage 3</p>\n</blockquote>\n<p>不幸的是，我们依然无法使用符号属性实现私有属性，<code>Reflect.ownKeys()</code>方法可以获取到对象上的所有<code>key</code>值，包括<code>symbol</code>类型的<code>key</code>!</p>\n<pre><code><span><span>function</span> <span>tryToAddPrivate</span>(<span>o</span>) </span>{\n<span class=\"lineNumber\">2</span>  o[<span>Symbol</span>(<span>\"Pseudo Private\"</span>)] = <span>42</span>;\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span><span>const</span> obj = { <span>prop</span>: <span>\"hello\"</span> };\n<span class=\"lineNumber\">5</span>tryToAddPrivate(obj);\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>console</span>.log(<span>Reflect</span>.ownKeys(obj));\n<span class=\"lineNumber\">8</span><span>// [ 'prop', Symbol(Pseudo Private) ]</span>\n<span class=\"lineNumber\">9</span><span>console</span>.log(obj[<span>Reflect</span>.ownKeys(obj)[<span>1</span>]]); <span>// 42</span></code></pre> \n\n<p>尽管符号属性不能直接为 JavaScript 对象提供私有属性的功能，但符号属性的出现解决了另一个方面的问题：<code>“防止属性名冲突”</code>。</p>\n<p>试想如果有两个库都想对某个对象进行修改，并且在无意识之下都修改了此对象的某个字符串属性<code>id</code>，那么势必会有一方发现此对象的数据与预料中不同。但是，如果库的作者在操作目标对象时使用了符号属性，举个例子：</p>\n<pre><code><span>const</span> library1property = <span>Symbol</span>(<span>\"lib1\"</span>);\n<span class=\"lineNumber\">2</span><span><span>function</span> <span>lib1tag</span>(<span>obj</span>) </span>{\n<span class=\"lineNumber\">3</span>  obj[library1property] = <span>42</span>;\n<span class=\"lineNumber\">4</span>}\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span>const</span> library2property = <span>Symbol</span>(<span>\"lib2\"</span>);\n<span class=\"lineNumber\">7</span><span><span>function</span> <span>lib2tag</span>(<span>obj</span>) </span>{\n<span class=\"lineNumber\">8</span>  obj[library2property] = <span>369</span>;\n<span class=\"lineNumber\">9</span>}</code></pre> \n\n<p>显然，<code>obj</code>对象不会具有无意识的属性操作冲突，库作者可以尽情为对象添加新的属性而不必担心其他人无意识之间造成属性冲突。</p>\n<p>在此之前，开发者们或许会使用诸如<code>uuid()</code>这样的方法创建及其特殊且难以冲突的字符串作为对象的<code>key</code>，但是这种方法跟使用符号属性非常相似，但却有其他缺陷。</p>\n<p>使用字符串作为属性的<code>key</code>很容易被发现，无论是打印出来，还是通过<code>Object.keys()</code>获取其<code>keys</code>，亦或是通过<code>JSON.stringify()</code>都可以察觉到此属性，当我们不希望此属性被发现时，尽量通过符号属性来隐藏它是很好的选择。</p>\n<blockquote>\n<p>题外话：JSON 只允许字符串作为属性，符号属性会被忽略。</p>\n</blockquote>\n<p>如若是想让字符串属性无法被枚举，则可以在定义时使用<code>Object.defineProperty</code>方法定义某个属性的值和属性类型，举个例子：</p>\n<pre><code><span>const</span> library2property = uuid(); <span>// namespaced approach</span>\n<span class=\"lineNumber\">2</span><span><span>function</span> <span>lib2tag</span>(<span>obj</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span>Object</span>.defineProperty(obj, library2property, {\n<span class=\"lineNumber\">4</span>    <span>enumerable</span>: <span>false</span>,\n<span class=\"lineNumber\">5</span>    <span>value</span>: <span>369</span>\n<span class=\"lineNumber\">6</span>  });\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span>const</span> user = {\n<span class=\"lineNumber\">9</span>  <span>name</span>: <span>'Thomas Hunter II'</span>,\n<span class=\"lineNumber\">10</span>  <span>age</span>: <span>32</span>\n<span class=\"lineNumber\">11</span>};\n<span class=\"lineNumber\">12</span>lib2tag(user);\n<span class=\"lineNumber\">13</span> \n<span class=\"lineNumber\">14</span><span>console</span>.log(<span>JSON</span>.stringify(user));\n<span class=\"lineNumber\">15</span><span>// '{\"name\":\"Thomas Hunter II\",</span>\n<span class=\"lineNumber\">16</span>   <span>\"age\"</span>:<span>32</span>,<span>\"f468c902-26ed-4b2e-81d6-5775ae7eec5d\"</span>:<span>369</span>}<span>'\n<span class=\"lineNumber\">17</span> \n<span class=\"lineNumber\">18</span>console.log(user[library2property]); // 369</span></code></pre> \n\n<p>字符串<code>key</code>可以通过设置<code>enumerable</code>描述符为<code>false</code>来实现不可枚举的属性，<code>JSON</code>序列化时也会忽略此不可枚举属性。</p>\n<p><code>Object.keys()</code>不会返回不可枚举的字符串<code>key</code>值（symbol 值无论是否可枚举都不会返回），但是无论如何都可以通过<code>Reflect.ownKeys()</code>方法获取到所有的属性，举个例子：</p>\n<pre><code><span>const</span> obj = {};\n<span class=\"lineNumber\">2</span>obj[<span>Symbol</span>()] = <span>1</span>;\n<span class=\"lineNumber\">3</span><span>Object</span>.defineProperty(obj, <span>\"foo\"</span>, {\n<span class=\"lineNumber\">4</span>  <span>enumberable</span>: <span>false</span>,\n<span class=\"lineNumber\">5</span>  <span>value</span>: <span>2</span>,\n<span class=\"lineNumber\">6</span>});\n<span class=\"lineNumber\">7</span><span>console</span>.log(<span>Object</span>.keys(obj)); <span>// []</span>\n<span class=\"lineNumber\">8</span><span>console</span>.log(<span>Reflect</span>.ownKeys(obj)); <span>// [ 'foo', Symbol() ]</span>\n<span class=\"lineNumber\">9</span><span>console</span>.log(<span>JSON</span>.stringify(obj)); <span>// {}</span></code></pre> \n\n<p>尽管依然无法创建对象的私有隐藏属性，但使用这种随机值作为对象属性名的方案确实可以消除不同的库之间的属性名冲突。</p>\n<h3>其他</h3>\n<p>除此之外，<code>symbol</code>还有其他的关注点，以下一一举例：</p>\n<h4>全局注册表</h4>\n<p>JavaScript 运行时会创建 symbol <code>全局注册表</code>，我们可以通过<code>Symbol.for(key)</code>（其中<code>key</code>是一个字符串）的方式查找或创建全局的唯一<code>symbol</code>，如果此<code>key</code>不存在则创建，否则直接返回此全局<code>symbol</code>。另外，<code>Symbol.keyFor(symbol)</code>则通过<code>symbol</code>去检索创建此<code>symbol</code>的<code>key</code>。</p>\n<h4>包装器</h4>\n<p>当使用<code>Object()</code>包装一个<code>symbol</code>符号，再用此包装对象作为属性<code>key</code>时，会自动进行转化，举个例子：</p>\n<pre><code><span>const</span> s = <span>Symbol</span>();\n<span class=\"lineNumber\">2</span><span>const</span> obj = { [s]: <span>1</span> };\n<span class=\"lineNumber\">3</span><span>console</span>.log(obj[<span>Object</span>(s)]); <span>// 1</span></code></pre> \n\n<h3>参考</h3>\n<ul>\n<li><a href=\"https://medium.com/intrinsic-blog/javascript-symbols-but-why-6b02768f4a5c\">JavaScript Symbols: But Why?. Symbols, the newest JavaScript… | by Thomas Hunter II | intrinsic | Medium</a></li>\n<li><a href=\"https://www.zhangxinxu.com/wordpress/2018/04/known-es6-symbol-function/\">简单了解 ES6/ES2015 Symbol() 方法 - 张鑫旭</a></li>\n</ul>\n","title":"JavaScript Symbol 浅解","date":"2021/12/25","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1576836165612-8bc9b07e7778?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDAzODA0MDg&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1576836165612-8bc9b07e7778?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDAzODA0MDg&ixlib=rb-1.2.1&q=80&w=400","intro":"在 JavaScript 世界里，Symbol 的两个问题：是什么和为什么"}},"__N_SSG":true}