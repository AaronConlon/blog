{"pageProps":{"post":{"slug":"Powershell随写","contentHtml":"<h2>chapter1：getting started with powershell</h2>\n<h3>1.1 允许在你的机器上运行脚本</h3>\n<pre><code><span># 以管理员身份运行,这条命令将修改注册表,注册表中保存了powershell很多默认配置项</span>\n<span class=\"lineNumber\">2</span><span>Set-ExecutionPolicy</span> RemoteSigned</code></pre> \n\n<p>将powershell的运行策略修改为运行未签名的脚本运行.或者通过管理员权限打开一个终端,执行脚本的时候指明使用<code>bypass</code>策略.</p>\n<pre><code>powershell.exe <span>-ExecutionPolicy</span> Bypass <span>-File</span> <span>\"c:\\MyScript.ps1\"</span>\n<span class=\"lineNumber\">2</span><span># 或者在此控制台先执行</span>\n<span class=\"lineNumber\">3</span><span>Set-ExecutionPolicy</span> Bypass <span>Process</span></code></pre> \n\n<h3>1.2 alias和简单函数</h3>\n<p>举个例子,<code>write-output</code>和<code>write-host</code>都能接受字符并且输出到屏幕,但是<code>write-output</code>还能返回输出的值作为结果,这在变量引用和管道传递方面很有用.简单函数不同但是结果相同,这在powershell中非常常见.</p>\n<p>同一个命令,可以有不同的别名,例如<code>write-output</code>的<code>alias</code>有<code>echo</code>和<code>write</code>.甚至,可以直接用单引号或者双引号括起来直接输出:</p>\n<pre><code><span>\"hello world\"</span>\n<span class=\"lineNumber\">2</span><span>'hello world'</span>\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span># alias即别名,一条命令可以有不同的别名,就像人可以有不同的外号,如下举例</span>\n<span class=\"lineNumber\">5</span><span>ls</span>\n<span class=\"lineNumber\">6</span><span>dir</span>\n<span class=\"lineNumber\">7</span><span># 都是get-childitem的alias</span></code></pre> \n\n<p>这些是系统自带的alias,我们可以自己增加,例如:</p>\n<pre><code><span>set-alias</span> <span>-Name</span> ping <span>-value</span> <span>test-netconnection</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span># 如下所示</span>\n<span class=\"lineNumber\">4</span>➜  Markdown笔记 <span>Test-NetConnection</span> www.baidu.com\n<span class=\"lineNumber\">5</span>ComputerName           : www.baidu.com\n<span class=\"lineNumber\">6</span>RemoteAddress          : <span>14.215</span>.<span>177.39</span>\n<span class=\"lineNumber\">7</span>InterfaceAlias         : WLAN\n<span class=\"lineNumber\">8</span>SourceAddress          : <span>192.168</span>.<span>124.11</span>\n<span class=\"lineNumber\">9</span>PingSucceeded          : True\n<span class=\"lineNumber\">10</span>PingReplyDetails (RTT) : <span>8</span> ms\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>➜  Markdown笔记 <span>Set-Alias</span> ping <span>Test-NetConnection</span>\n<span class=\"lineNumber\">13</span> \n<span class=\"lineNumber\">14</span>➜  Markdown笔记 ping www.baidu.com\n<span class=\"lineNumber\">15</span>ComputerName           : www.baidu.com\n<span class=\"lineNumber\">16</span>RemoteAddress          : <span>14.215</span>.<span>177.39</span>\n<span class=\"lineNumber\">17</span>InterfaceAlias         : WLAN\n<span class=\"lineNumber\">18</span>SourceAddress          : <span>192.168</span>.<span>124.11</span>\n<span class=\"lineNumber\">19</span>PingSucceeded          : True</code></pre> \n\n<p>但是,不同的终端属于不同的<code>session</code>,你可以在当前终端设置<code>alias</code>,此时其他终端并不会生效.并且,本终端设置的<code>alias</code>会重写默认存在的命令,如上所述,我重写了<code>ping</code>命令.本来<code>ping</code>命令是这样的:</p>\n<pre><code>➜  ~ ping www.baidu.com\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>正在 Ping www.a.shifen.com [<span>14.215</span><span>.177.39</span>] 具有 <span>32</span> 字节的数据:\n<span class=\"lineNumber\">4</span>来自 <span>14.215</span>.<span>177.39</span> 的回复: 字节=<span>32</span> 时间=<span>8</span>ms TTL=<span>55</span>\n<span class=\"lineNumber\">5</span>来自 <span>14.215</span>.<span>177.39</span> 的回复: 字节=<span>32</span> 时间=<span>8</span>ms TTL=<span>55</span>\n<span class=\"lineNumber\">6</span>来自 <span>14.215</span>.<span>177.39</span> 的回复: 字节=<span>32</span> 时间=<span>9</span>ms TTL=<span>55</span>\n<span class=\"lineNumber\">7</span>来自 <span>14.215</span>.<span>177.39</span> 的回复: 字节=<span>32</span> 时间=<span>8</span>ms TTL=<span>55</span>\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span>14.215</span>.<span>177.39</span> 的 Ping 统计信息:\n<span class=\"lineNumber\">10</span>    数据包: 已发送 = <span>4</span>，已接收 = <span>4</span>，丢失 = <span>0</span> (<span>0</span>% 丢失)，\n<span class=\"lineNumber\">11</span>往返行程的估计时间(以毫秒为单位):\n<span class=\"lineNumber\">12</span>    最短 = <span>8</span>ms，最长 = <span>9</span>ms，平均 = <span>8</span>ms</code></pre> \n\n<h3>1.3 管道</h3>\n<p>管道符<code>|</code>放在一条命令的末尾,可以将命令的返回值传递到下一个命令上去,并且作为下一条命令的<code>最后一个参数</code>使用.</p>\n<pre><code><span>Get-ChildItem</span> | <span>Select-Object</span> Name\n<span class=\"lineNumber\">2</span><span>#This may be shortened to:</span>\n<span class=\"lineNumber\">3</span><span>gci</span> | <span>Select</span> Name\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span># gci就是命令的alias</span>\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span>Get-ChildItem</span> | <span>ForEach-Object</span> {\n<span class=\"lineNumber\">8</span> <span>Copy-Item</span> <span>-Path</span> <span>$_</span>.FullName <span>-destination</span> C:\\NewDirectory\\\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span><span>#This may be shortened to:</span>\n<span class=\"lineNumber\">11</span><span>gci</span> | % { <span>Copy</span> <span>$_</span>.FullName C:\\NewDirectory\\ }</code></pre> \n\n<h3>1.4 使用<code>.net</code>库的方法</h3>\n<p>powershell天生支持<code>.net</code>的各种方法.毕竟是微软一家子的成员.例如:</p>\n<pre><code><span>#calling Path.GetFileName()</span>\n<span class=\"lineNumber\">2</span>C:\\> [<span>System.IO.Path</span>]::GetFileName(<span>'C:\\Windows\\explorer.exe'</span>)\n<span class=\"lineNumber\">3</span>explorer.exe</code></pre> \n\n<p>如果你熟悉<code>.net</code> 的话,使用它的库函数就能如虎添翼事半功倍.</p>\n<p>使用静态方法可以很直接,但是如果有些方法不是静态方法,则需要对<code>class</code>进行实例化.举例:</p>\n<pre><code>➜  Markdown笔记 <span>$object</span> = [<span>System.DateTime</span>]::now\n<span class=\"lineNumber\">2</span>➜  Markdown笔记 <span>$object</span>.AddHours(<span>1</span>)\n<span class=\"lineNumber\">3</span><span>2020</span>年<span>8</span>月<span>3</span>日 <span>3</span>:<span>00</span>:<span>07</span></code></pre> \n\n<p>直接就输出一个修改过的时间结果.</p>\n<h3>1.5 安装或者设置</h3>\n<p>现在默认windows7以上自带<code>powershell</code>,但是在其他平台,则需要手动安装,例如支持在Ubuntu上安装<code>powershell v6</code>.</p>\n<p>powershell脚本的注释使用<code>#</code>.或者长注释使用<code>&#x3C;# comment #></code>内部添加注释,支持换行.</p>\n<h3>1.6 简述创建对象</h3>\n<p>powershell以管道传递对象,对象在powershell中具有独特的地位.举个例子.</p>\n<pre><code><span># 创建一个时间对象</span>\n<span class=\"lineNumber\">2</span><span>$var</span> = <span>new-object</span> system<span>-datetime</span>\n<span class=\"lineNumber\">3</span><span># 创建一个流对象</span>\n<span class=\"lineNumber\">4</span><span>$sr</span> = <span>new-object</span> system.io.streamreader <span>-argumentList</span> <span>\"file stream\"</span>\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span># 创建一个复杂对象</span>\n<span class=\"lineNumber\">7</span><span>$newObj</span> = [<span>PScustomObject</span>]<span>@</span>{\n<span class=\"lineNumber\">8</span>\tComputerName = <span>'server1'</span>,\n<span class=\"lineNumber\">9</span>\tEnv = <span>'Production'</span>\n<span class=\"lineNumber\">10</span>}\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span><span># 创建一个ie浏览器对象</span>\n<span class=\"lineNumber\">13</span><span>$IE1</span> = <span>New-Object</span> <span>-COMObject</span> InternetExplorer.Application <span>-Property</span> <span>@</span>{Navigate2=<span>\"www.microsoft.com\"</span>; Visible = <span>$True</span>}\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span><span># The following command gets the same results as the example above.</span>\n<span class=\"lineNumber\">16</span><span>$IE2</span> = <span>New-Object</span> <span>-COMObject</span> InternetExplorer.Application`\n<span class=\"lineNumber\">17</span><span>$IE2</span>.Navigate2(<span>\"www.microsoft.com\"</span>)`\n<span class=\"lineNumber\">18</span><span>$IE2</span>.Visible = <span>$True</span>`</code></pre> \n\n<p>上述可以看出创建对象的时候可以设置一些属性,或者创建基础实例之后再设置属性.所有的对象都可以通过管道进行传输.对象的集合在导入和导出特定的格式,例如csv或者xml的时候非常有效,例如命令<code>export-csv</code>的每一行都是一个对象.</p>\n<h2>chapter2: variable in powershell</h2>\n<blockquote>\n<p>变量用于保存数据,以便于后续使用.</p>\n</blockquote>\n<h3>2.1 简单变量和数组</h3>\n<pre><code><span>$name</span> = <span>\"root\"</span>\n<span class=\"lineNumber\">2</span><span>$numArray</span> = <span>1</span>,<span>2</span>,<span>3</span>,<span>4</span>\n<span class=\"lineNumber\">3</span><span>$newArray</span> = <span>1</span>,<span>\"2\"</span> <span># 不限类型,比较灵活</span>\n<span class=\"lineNumber\">4</span><span>$numArray</span> = <span>$numArray</span> +<span>5</span>\n<span class=\"lineNumber\">5</span><span>$newArray</span> = <span>$newAarray</span> + <span>$numArray</span></code></pre> \n\n<h3>2.2 拆分变量为数组</h3>\n<pre><code><span>$input</span>=<span>\"foo.bar.baz\"</span>\n<span class=\"lineNumber\">2</span><span>$parts</span>=<span>$input</span>.Split(<span>\".\"</span>)\n<span class=\"lineNumber\">3</span><span>$foo</span>=<span>$parts</span>[<span>0</span>]\n<span class=\"lineNumber\">4</span><span>$bar</span>=<span>$parts</span>[<span>1</span>]\n<span class=\"lineNumber\">5</span><span>$baz</span>=<span>$parts</span>[<span>2</span>]\n<span class=\"lineNumber\">6</span><span>#You can simply do this:</span>\n<span class=\"lineNumber\">7</span><span>$foo</span>,<span>$bar</span>,<span>$baz</span>=<span>$input</span>.Split(<span>\".\"</span>)</code></pre> \n\n<p>灵活处理字符串和数组.类似<code>js</code>,也可以根据变量的数量去分配.</p>\n<pre><code><span>$foo</span>, <span>$_</span> = <span>$input</span>.Split(<span>\".\"</span>)\n<span class=\"lineNumber\">2</span><span># foo则保存首个拆分的值,_保存剩下的数组.</span></code></pre> \n\n<h3>2.3 Scope</h3>\n<p>作用域范围跟分为局部和全局,函数内部只在内部有效,支持闭包.如果你想要指定外部的变量,以便于和函数内部同名变量区分.则可以使用如下方式:</p>\n<p><code>$local:foo</code> 和 <code>$global:foo</code>,如果存在多层嵌套,则<code>global</code>为最外层.</p>\n<h3>2.4 移除变量</h3>\n<pre><code><span># 需要指定类型为 Variable,再指定变量名</span>\n<span class=\"lineNumber\">2</span><span>Remove-Item</span> Variable:\\foo</code></pre> \n\n<p>变量支持像处理文件系统项目的大多数的<code>*-item</code>命令进行处理.</p>\n<p>更显式的删除变量,可以使用<code>remove-variable</code>命令.其简写是<code>rv</code>.命令如<code>rv foo</code></p>\n<h2>chapter 3: Operators</h2>\n<h3>3.1 比较运算符</h3>\n<p>类似<code>bash</code>,使用如下方式进行比较,返回<code>true</code>或者<code>false</code>的<code>boolean</code>值.</p>\n<pre><code><span>2</span> <span>-eq</span> <span>2</span>\n<span class=\"lineNumber\">2</span><span>2</span> <span>-ne</span> <span>2</span>\n<span class=\"lineNumber\">3</span><span>2</span> <span>-lt</span> <span>2</span>\n<span class=\"lineNumber\">4</span><span>2</span> <span>-gt</span> <span>2</span>\n<span class=\"lineNumber\">5</span><span>2</span> <span>-ge</span> <span>2</span>\n<span class=\"lineNumber\">6</span><span>2</span> <span>-le</span> <span>2</span>\n<span class=\"lineNumber\">7</span><span># 针对大小写是否敏感</span>\n<span class=\"lineNumber\">8</span>a <span>-eqi</span> A <span># true,字符串不敏感,eqc则敏感</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span># 字符串比较</span>\n<span class=\"lineNumber\">11</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:39:32]</span>\n<span class=\"lineNumber\">12</span>➜ <span>\"string\"</span> <span>-like</span> <span>\"*ing\"</span>\n<span class=\"lineNumber\">13</span>True\n<span class=\"lineNumber\">14</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:40:00]</span>\n<span class=\"lineNumber\">15</span>➜ <span>\"string\"</span> <span>-like</span> <span>\"ing\"</span>\n<span class=\"lineNumber\">16</span>False\n<span class=\"lineNumber\">17</span> \n<span class=\"lineNumber\">18</span><span># 加not取反</span>\n<span class=\"lineNumber\">19</span>➜ <span>\"string\"</span> <span>-notlike</span> <span>\"ing\"</span>\n<span class=\"lineNumber\">20</span>True\n<span class=\"lineNumber\">21</span> \n<span class=\"lineNumber\">22</span><span># 支持正则表达式</span>\n<span class=\"lineNumber\">23</span>➜ <span>\"string\"</span> <span>-match</span> <span>\"ing\"</span>\n<span class=\"lineNumber\">24</span>True\n<span class=\"lineNumber\">25</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:41:15]</span>\n<span class=\"lineNumber\">26</span>➜ <span>\"string\"</span> <span>-match</span> <span>\"inge\"</span>\n<span class=\"lineNumber\">27</span>False\n<span class=\"lineNumber\">28</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:41:22]</span>\n<span class=\"lineNumber\">29</span>➜ <span>\"string\"</span> <span>-match</span> <span>\"ing&#x26;\"</span>\n<span class=\"lineNumber\">30</span>False\n<span class=\"lineNumber\">31</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:41:33]</span>\n<span class=\"lineNumber\">32</span>➜ <span>\"string\"</span> <span>-match</span> <span>\"ing<span>$</span>\"</span>\n<span class=\"lineNumber\">33</span>True\n<span class=\"lineNumber\">34</span> \n<span class=\"lineNumber\">35</span><span># 集合数据比较</span>\n<span class=\"lineNumber\">36</span> \n<span class=\"lineNumber\">37</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:41:37]</span>\n<span class=\"lineNumber\">38</span>➜ <span>\"12\"</span>,<span>\"abc\"</span> <span>-contains</span> <span>\"1\"</span>\n<span class=\"lineNumber\">39</span>False\n<span class=\"lineNumber\">40</span><span># root at LAPTOP-G92L1V81 in D:\\pw7 workstation\\git-repos\\nextjs_blog\\posts on git:master ≣ +0 ~1 -0 ! [1:44:14]</span>\n<span class=\"lineNumber\">41</span>➜ <span>\"12\"</span>,<span>\"abc\"</span> <span>-contains</span> <span>\"12\"</span>\n<span class=\"lineNumber\">42</span>True\n<span class=\"lineNumber\">43</span> \n<span class=\"lineNumber\">44</span>➜ <span>\"12\"</span> <span>-in</span> <span>\"aaa\"</span>,<span>\"12\"</span>\n<span class=\"lineNumber\">45</span>True</code></pre> \n\n<h3>3.2 算数运算</h3>\n<pre><code><span>1</span>+<span>2</span>\t<span># Addition</span>\n<span class=\"lineNumber\">2</span><span>1</span><span>-2</span>\t<span># Subtraction</span>\n<span class=\"lineNumber\">3</span><span>-1</span>\t<span># Set negative value</span>\n<span class=\"lineNumber\">4</span><span>1</span>*<span>2</span>\t<span># Multiplication</span>\n<span class=\"lineNumber\">5</span><span>1</span>/<span>2</span>\t<span># Division</span>\n<span class=\"lineNumber\">6</span><span>1</span>%<span>2</span>\t<span># Modulus</span>\n<span class=\"lineNumber\">7</span><span>100</span> <span>-shl</span> <span>2</span> <span># 按位左移</span>\n<span class=\"lineNumber\">8</span><span>100</span> <span>-shr</span> <span>2</span> <span># 按位右移</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span># 变量计算</span>\n<span class=\"lineNumber\">11</span><span>$var</span> = <span>1</span>\n<span class=\"lineNumber\">12</span><span>$var</span> += <span>2</span>\n<span class=\"lineNumber\">13</span><span>$var</span>++\n<span class=\"lineNumber\">14</span><span>$var</span> += <span>\"2\"</span> <span># 也支持,自动类型转换</span></code></pre> \n\n<h3>3.3 输出重定向操作</h3>\n<blockquote>\n<p>大神详解:<a href=\"https://devblogs.microsoft.com/scripting/understanding-streams-redirection-and-write-host-in-powershell/\">Understanding Streams, Redirection, and Write-Host in PowerShell | Scripting Blog</a></p>\n</blockquote>\n<p>执行命令或者程序,将产生不同类型的输出信息流.</p>\n<p><img src=\"https://devblogs.microsoft.com/wp-content/uploads/sites/29/2019/02/2570.1.png\" alt=\"\"></p>\n<p>顺利执行将产生success的输出流,举个例子:</p>\n<pre><code>cmdlet > file <span># 发送success输出流重写file的内容</span>\n<span class=\"lineNumber\">2</span>cmdlet >> file <span># 追加success输出流到file的文件末尾</span>\n<span class=\"lineNumber\">3</span>cmdlet <span>1</span>>&#x26;<span>2</span> <span># 1代表success状态的输出流,此时指的是将success(1)和error(2)的输出重定向到error流中去</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span>cmdlet <span>2</span>> file <span># error(2) 输出流</span>\n<span class=\"lineNumber\">6</span>cmdlet <span>3</span>> file <span># powershell v3+支持的warning数据流</span>\n<span class=\"lineNumber\">7</span>cmdlet <span>4</span>> file <span># powershell v3+支持的verbose输出流,详细消息流通常用于提供命令处理的相关信息,便于调试</span>\n<span class=\"lineNumber\">8</span>cmdlet <span>5</span>> file <span># Debug</span>\n<span class=\"lineNumber\">9</span>cmdlet <span>6</span>> file <span># information level</span></code></pre> \n\n<p>不同的流是平行的,在管道之间传递对象,我们并不希望接受cmdlet各种类型的流式数据.且管道符默认接收了<code>success</code>级别的信息.其他的流的数据发往了其他的接收处.</p>\n<blockquote>\n<p>Windows PowerShell inventor, Jeffrey Snover, says that <a href=\"http://www.jsnover.com/blog/2013/12/07/write-host-considered-harmful/\">Write-Host is harmful</a></p>\n</blockquote>\n<p><strong>Write-Host is not written to any stream</strong>.<code>write-host</code>不会污染输出流,且<code>不向任何流进行输入</code>.单纯向屏幕输出.</p>\n<p>也就是说你无法将<code>write-host</code>的message定向到其他流,也没法分配给变量.</p>\n<p>还可以看看这里:<a href=\"https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_redirection?view=powershell-7\">about_Redirection - PowerShell | Microsoft Docs</a></p>\n<p>另外举个例子:</p>\n<pre><code><span># 同时ls查看两个目录,如下命令可以将错误信息重定向转移走,输入到z文件,而不会只是将success的ls d:结果输出z</span>\n<span class=\"lineNumber\">2</span>▶ <span>ls</span> D:,fake *> z\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span># 如果不重定向</span>\n<span class=\"lineNumber\">5</span>▶ <span>ls</span> D:,fake > z\n<span class=\"lineNumber\">6</span><span>Get-ChildItem</span>: Cannot find path <span>'C:\\Users\\root\\fake'</span> because it does not exist.\n<span class=\"lineNumber\">7</span>~ ⨯\n<span class=\"lineNumber\">8</span>▶ <span>cat</span> z\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>\n<span class=\"lineNumber\">11</span>    Directory: D:\\pw7 workstation\\git<span>-repos</span>\\nextjs_blog\\posts\n<span class=\"lineNumber\">12</span><span># 则z保存了success的信息</span></code></pre> \n\n<p>至于,将<code>success</code>消息重定向到<code>error流</code>的操作,终端提示错误,跟书本不符.不过不会真有人想要做这种事吧.</p>\n<p>另外,我用过几次将没必要的错误信息流重定向到<code>$null</code>中去.或者将没必要的所有流都扔掉:</p>\n<pre><code>cmdlet *><span>$null</span></code></pre> \n\n<h3>3.4 混合操作类型</h3>\n<p>举例如下:</p>\n<pre><code>▶ <span>\"2\"</span>+<span>2</span>\n<span class=\"lineNumber\">2</span><span>22</span>\n<span class=\"lineNumber\">3</span>~\n<span class=\"lineNumber\">4</span>▶ <span>2</span>+<span>\"22\"</span>\n<span class=\"lineNumber\">5</span><span>24</span>\n<span class=\"lineNumber\">6</span>~\n<span class=\"lineNumber\">7</span>➜ <span>\"2\"</span> * <span>2</span>\n<span class=\"lineNumber\">8</span><span>22</span>\n<span class=\"lineNumber\">9</span>➜ <span>2</span> * <span>\"2\"</span>\n<span class=\"lineNumber\">10</span><span>4</span>\n<span class=\"lineNumber\">11</span>➜ <span>$a</span> = <span>Read-Host</span>\n<span class=\"lineNumber\">12</span><span>33</span>\n<span class=\"lineNumber\">13</span>➜ <span>$a</span> <span>-gt</span> <span>5</span>\n<span class=\"lineNumber\">14</span>False\n<span class=\"lineNumber\">15</span>➜ <span>5</span> <span>-gt</span> <span>$a</span>\n<span class=\"lineNumber\">16</span>False</code></pre> \n\n<p>左边的数据类型决定了整体的计算和数据转换方式.</p>\n<h3>3.5 逻辑操作和字符串变换操作</h3>\n<p>举例:</p>\n<pre><code><span>-and</span> <span># 与</span>\n<span class=\"lineNumber\">2</span><span>-or</span> <span># 或</span>\n<span class=\"lineNumber\">3</span><span>-xor</span> <span># 异或</span>\n<span class=\"lineNumber\">4</span><span>-not</span> <span># not</span>\n<span class=\"lineNumber\">5</span>! <span># not</span>\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span># 常见替换</span>\n<span class=\"lineNumber\">8</span>➜ <span>\"just a demo\"</span> <span>-replace</span> <span>\"demo\"</span>,<span>\"test\"</span>\n<span class=\"lineNumber\">9</span>just a test\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span><span># 正则表达式单引号替换</span>\n<span class=\"lineNumber\">12</span>➜ <span>\"root@gmail.com\"</span> <span>-replace</span> <span>'^[\\w]+@(.+)'</span>,<span>'$1'</span>\n<span class=\"lineNumber\">13</span>gmail.com\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span><span># 拆分数组</span>\n<span class=\"lineNumber\">16</span>➜ <span>\"root@gmail.com\"</span> <span>-split</span> <span>\"@\"</span>\n<span class=\"lineNumber\">17</span>root\n<span class=\"lineNumber\">18</span>gmail.com\n<span class=\"lineNumber\">19</span> \n<span class=\"lineNumber\">20</span><span># join数组</span>\n<span class=\"lineNumber\">21</span>➜ <span>\"1\"</span>,<span>\"1\"</span>,<span>\"0\"</span> <span>-join</span> <span>\":\"</span>\n<span class=\"lineNumber\">22</span><span>1</span>:<span>1</span>:<span>0</span></code></pre> \n\n<h2>Chapter 4: Special Operators</h2>\n<h3>4.1 数组表达运算符</h3>\n<p>通过一个表达式返回一个数组:</p>\n<pre><code>➜  posts git:(master) <span>@</span>(<span>Get-ChildItem</span> C:\\Windows\\System32\\ntdll.dll)\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>\n<span class=\"lineNumber\">4</span>    Directory: C:\\Windows\\System32\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>Mode                 LastWriteTime         Length Name\n<span class=\"lineNumber\">7</span>----                 -------------         ------ ----\n<span class=\"lineNumber\">8</span><span>-a</span>---           <span>2020</span>/<span>7</span>/<span>17</span>    <span>20</span>:<span>10</span>        <span>1999968</span> ntdll.dll\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>➜  posts git:(master) <span>@</span>(<span>Get-ChildItem</span> C:\\Windows\\System32\\ntdll.dll)[<span>0</span>]\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>\n<span class=\"lineNumber\">13</span>    Directory: C:\\Windows\\System32\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span>Mode                 LastWriteTime         Length Name\n<span class=\"lineNumber\">16</span>----                 -------------         ------ ----\n<span class=\"lineNumber\">17</span><span>-a</span>---           <span>2020</span>/<span>7</span>/<span>17</span>    <span>20</span>:<span>10</span>        <span>1999968</span> ntdll.dll\n<span class=\"lineNumber\">18</span> \n<span class=\"lineNumber\">19</span>➜  posts git:(master) <span>@</span>(<span>Get-ChildItem</span> C:\\Windows\\System32\\ntdll.dll)[<span>1</span>]\n<span class=\"lineNumber\">20</span>➜  posts git:(master)</code></pre> \n\n<p>如上所述,<code>@()</code>内部的表达式处理返回值将得到一个数组.</p>\n<h3>4.2 调用运算符</h3>\n<pre><code><span>$command</span> = <span>'ls'</span>\n<span class=\"lineNumber\">2</span>&#x26;<span>$command</span> <span># 等于直接调用字符串的内容,视为命令并执行</span></code></pre> \n\n<h3>4.3 点源操作(dot sourcing operator)</h3>\n<p><code>. $profile</code>是我很常用的一个命令,因为我经常修改预加载的配置文件<code>$profile</code>.这个变量指向一个<code>.ps1</code>文件,每个console打开的时候都会<code>run</code>这个文件.因此,可以在这里面设置一下alias或者function.</p>\n<p>当我们在当前terminal下使用<code>. xxx.ps1</code>命令执行此脚本的时候,即将此脚本的执行环境范围设置为当前<code>terminal session</code>.</p>\n<p>回到<code>$profile</code>的例子,我修改了这个脚本,并且在当前<code>terminal</code>执行了<code>. $profile</code>,则此脚本内的函数即加载到我的<code>terminal session</code>内了.我可以轻松调用此脚本内的函数处理我的事务.</p>\n<h2>Chapter 5: Basic set Operations</h2>\n<h3>5.1 对象选择</h3>\n<p>使用条件表达式<code>where-object</code> 过滤枚举对象,其常用alias是<code>where</code>和<code>?</code>.</p>\n<pre><code>➜  ~ <span>$names</span>= <span>@</span>(<span>\"Aaron\"</span>,<span>\"Albert\"</span>,<span>\"Alphonse\"</span>,<span>\"Bernie\"</span>,<span>\"Charlie\"</span>,<span>\"Danny\"</span>,<span>\"Ernie\"</span>,<span>\"Frank\"</span>)\n<span class=\"lineNumber\">2</span>➜  ~ <span>$name</span> | <span>Where-Object</span> {<span>$_</span> <span>-like</span> <span>\"*yi\"</span>}\n<span class=\"lineNumber\">3</span>youyi\n<span class=\"lineNumber\">4</span>➜  ~ <span>$name</span> | <span>Where</span> {<span>$_</span> <span>-like</span> <span>\"*yi\"</span>}\n<span class=\"lineNumber\">5</span>youyi\n<span class=\"lineNumber\">6</span>➜  ~ <span>$name</span> | ? {<span>$_</span> <span>-like</span> <span>\"*yi\"</span>}\n<span class=\"lineNumber\">7</span>youyi</code></pre> \n\n<h3>5.2 对象排序</h3>\n<p>对可迭代对象进行升序和降序排序:</p>\n<pre><code>➜  ~ <span>$names</span>= <span>@</span>(<span>\"Aaron\"</span>,<span>\"Albert\"</span>,<span>\"Alphonse\"</span>,<span>\"Bernie\"</span>,<span>\"Charlie\"</span>,<span>\"Danny\"</span>,<span>\"Ernie\"</span>,<span>\"Frank\"</span>)\n<span class=\"lineNumber\">2</span>➜  ~ <span>$names</span> | <span>sort</span>\n<span class=\"lineNumber\">3</span>Aaron\n<span class=\"lineNumber\">4</span>Albert\n<span class=\"lineNumber\">5</span>Alphonse\n<span class=\"lineNumber\">6</span>Bernie\n<span class=\"lineNumber\">7</span>Charlie\n<span class=\"lineNumber\">8</span>Danny\n<span class=\"lineNumber\">9</span>Ernie\n<span class=\"lineNumber\">10</span>Frank\n<span class=\"lineNumber\">11</span>➜  ~ <span>$names</span> | <span>Sort-Object</span> <span>-Descending</span>\n<span class=\"lineNumber\">12</span>Frank\n<span class=\"lineNumber\">13</span>Ernie\n<span class=\"lineNumber\">14</span>Danny\n<span class=\"lineNumber\">15</span>Charlie\n<span class=\"lineNumber\">16</span>Bernie\n<span class=\"lineNumber\">17</span>Alphonse\n<span class=\"lineNumber\">18</span>Albert\n<span class=\"lineNumber\">19</span>Aaron\n<span class=\"lineNumber\">20</span> \n<span class=\"lineNumber\">21</span><span># 指定属性</span>\n<span class=\"lineNumber\">22</span>➜  ~ <span>$names</span> | <span>Sort-Object</span> <span>-Top</span> <span>3</span> <span>-Property</span> Length\n<span class=\"lineNumber\">23</span>Aaron\n<span class=\"lineNumber\">24</span>Danny\n<span class=\"lineNumber\">25</span>Ernie\n<span class=\"lineNumber\">26</span>➜  ~ <span>$names</span> | <span>Sort-Object</span> {<span>$_</span>.length} <span>-Top</span> <span>3</span>\n<span class=\"lineNumber\">27</span>Aaron\n<span class=\"lineNumber\">28</span>Danny\n<span class=\"lineNumber\">29</span>Ernie</code></pre> \n\n<h3>5.3 分组排序</h3>\n<p>可以通过设置表达式,实现分组的排序.</p>\n<pre><code>➜  ~ <span>$names</span> | <span>Group-Object</span> <span>-Property</span> length <span># group-object alias is group</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>Count Name                      <span>Group</span>\n<span class=\"lineNumber\">4</span>----- ----                      -----\n<span class=\"lineNumber\">5</span>    <span>4</span> <span>5</span>                         {Aaron, Danny, Ernie, Frank}\n<span class=\"lineNumber\">6</span>    <span>2</span> <span>6</span>                         {Albert, Bernie}\n<span class=\"lineNumber\">7</span>    <span>1</span> <span>7</span>                         {Charlie}\n<span class=\"lineNumber\">8</span>    <span>1</span> <span>8</span>                         {Alphonse}</code></pre> \n\n<h3>5.4 对象投影</h3>\n<p>这个小节标题让我想起当初上SQL的课的时候了.投影一个可迭代对象的部分item,可以对单独的对象进行展开操作.获取自己想要的部分数据.</p>\n<pre><code>➜  ~ <span>$dir</span> = <span>ls</span>\n<span class=\"lineNumber\">2</span>➜  ~ <span>$dir</span> | <span>select</span> name, FullName, LastAccessTime\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span>Name                     FullName                               Last\n<span class=\"lineNumber\">5</span>                                                                Acce\n<span class=\"lineNumber\">6</span>                                                                ssTi\n<span class=\"lineNumber\">7</span>                                                                me\n<span class=\"lineNumber\">8</span>----                     --------                               ----\n<span class=\"lineNumber\">9</span>.atom                    C:\\Users\\root\\.atom                    <span>202</span>…\n<span class=\"lineNumber\">10</span>.config                  C:\\Users\\root\\.config                  <span>202</span>…\n<span class=\"lineNumber\">11</span>.ssh                     C:\\Users\\root\\.ssh                     <span>202</span>…\n<span class=\"lineNumber\">12</span>.vscode                  C:\\Users\\root\\.vscode                  <span>202</span>…\n<span class=\"lineNumber\">13</span><span>3</span>D Objects               C:\\Users\\root\\<span>3</span>D Objects               <span>202</span>…\n<span class=\"lineNumber\">14</span>Contacts                 C:\\Users\\root\\Contacts                 <span>202</span>…\n<span class=\"lineNumber\">15</span>Documents                C:\\Users\\root\\Documents                <span>202</span>…\n<span class=\"lineNumber\">16</span>Downloads                C:\\Users\\root\\Downloads                <span>202</span>…\n<span class=\"lineNumber\">17</span>Favorites                C:\\Users\\root\\Favorites                <span>202</span>…\n<span class=\"lineNumber\">18</span>Links                    C:\\Users\\root\\Links                    <span>202</span>…\n<span class=\"lineNumber\">19</span>Music                    C:\\Users\\root\\Music                    <span>202</span>…\n<span class=\"lineNumber\">20</span>OneDrive                 C:\\Users\\root\\OneDrive                 <span>202</span>…\n<span class=\"lineNumber\">21</span>Pictures                 C:\\Users\\root\\Pictures                 <span>202</span>…\n<span class=\"lineNumber\">22</span>Saved Games              C:\\Users\\root\\Saved Games              <span>202</span>…\n<span class=\"lineNumber\">23</span>scoop                    C:\\Users\\root\\scoop                    <span>202</span>…\n<span class=\"lineNumber\">24</span>Searches                 C:\\Users\\root\\Searches                 <span>202</span>…\n<span class=\"lineNumber\">25</span>Videos                   C:\\Users\\root\\Videos                   <span>202</span>…\n<span class=\"lineNumber\">26</span>.bash_history            C:\\Users\\root\\.bash_history            <span>202</span>…\n<span class=\"lineNumber\">27</span>.bash_profile            C:\\Users\\root\\.bash_profile            <span>202</span>…\n<span class=\"lineNumber\">28</span>.bashrc                  C:\\Users\\root\\.bashrc                  <span>202</span>…\n<span class=\"lineNumber\">29</span>.bashrc.swp              C:\\Users\\root\\.bashrc.swp              <span>202</span>…\n<span class=\"lineNumber\">30</span>.gitconfig               C:\\Users\\root\\.gitconfig               <span>202</span>…\n<span class=\"lineNumber\">31</span>.git<span>-for</span><span>-windows</span><span>-updater</span> C:\\Users\\root\\.git<span>-for</span><span>-windows</span><span>-updater</span> <span>202</span>…\n<span class=\"lineNumber\">32</span>.node_repl_history       C:\\Users\\root\\.node_repl_history       <span>202</span>…\n<span class=\"lineNumber\">33</span>.viminfo                 C:\\Users\\root\\.viminfo                 <span>202</span>…\n<span class=\"lineNumber\">34</span>.vuerc                   C:\\Users\\root\\.vuerc                   <span>202</span>…\n<span class=\"lineNumber\">35</span>.yarnrc                  C:\\Users\\root\\.yarnrc                  <span>202</span>…\n<span class=\"lineNumber\">36</span> \n<span class=\"lineNumber\">37</span>➜  ~</code></pre> \n\n","title":"Powershell随写","date":"2020-08-03","tags":["powershell"],"mainImg":"https://images.unsplash.com/photo-1599418268698-b5a48a743a8e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1599418268698-b5a48a743a8e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"powershell 很棒,我想任何一个善用 windows 的开发者都应该学习 powershell ,系统自带环境的优势让开发者能够使用 powershell 轻松辅助开发,提高工作效率,本文献给对 powershell 感兴趣的朋友.如果你有任何关于 powershell 的内容想要与我沟通,欢迎发邮件."}},"__N_SSG":true}