{"pageProps":{"post":{"slug":"javascript之对象转换","contentHtml":"<p>在机缘巧合之下,我看到了国外大神<code>Dr.Axel Rauschmayer</code>的博客:<a href=\"https://2ality.com/index.html\">2ality – JavaScript and more</a>,其中一篇文章针对<code>类型转换</code>这个问题作了分享,本着求知的想法我静下心阅读了此文,所得所想记录于此.</p>\n<p><strong>2021年03月22日18:52:54</strong></p>\n<h2>1. 起始</h2>\n<p><code>JavaScript</code> 是优秀的动态语言,数据类型的转换在日常编程开发中十分常见.本文将结合一些实际问题和个人疑惑对<code>类型转换</code>进行学习和解析,尽量深入<code>ECMAScript规范</code>,追索玄机.</p>\n<blockquote>\n<p>如果喜欢,不妨亲自阅读 <a href=\"https://tc39.es/ecma262/multipage/\">ECMAScript® 2022 Language Specification</a></p>\n</blockquote>\n<h2>2. 何为类型转换?</h2>\n<p>首先我们要明确一点,<code>JavaScript</code>数据分为:</p>\n<ul>\n<li>原始数据类型(without methods)\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>string</li>\n<li>number</li>\n<li>biginit</li>\n<li>boolean</li>\n<li>symbol</li>\n</ul>\n</li>\n<li>对象</li>\n</ul>\n<p>看看这一行代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'3'</span>) * <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'2'</span>)</code></pre> \n\n<p>两个数字之间使用乘法操作符相乘,数字类型是明确的从字符串通过<code>Number()</code>函数<code>显式</code>转过来的.</p>\n<p>字符串之间<code>\"不能\"</code>直接执行乘法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-string\">'a'</span> * <span class=\"hljs-string\">'b'</span> <span class=\"hljs-comment\">// NaN</span></code></pre> \n\n<p>也许你会举出如下可行的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-string\">'1'</span> * <span class=\"hljs-string\">'2'</span> <span class=\"hljs-comment\">// 2</span></code></pre> \n\n<p>此时,字符串之间的乘法得出了我们想要的结果.究其实质是因为解释器对字符串进行了<code>强制类型转换(coercion)</code>.</p>\n<p>JavaScript 语言初期并没有异常捕获(<code>exceptions</code>)的规范设计,这也是为什么你会看到现今解释器对如下代码的解释.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 1</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// Infinity , 很明显, 0 作为分母是错误的,但是解释器最后的值是 Infinity</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'a'</span>) <span class=\"hljs-comment\">// NaN </span></code></pre> \n\n<p>为了实现兼容,<code>ECMAScript</code>不得不\"允许\"这部分错误的设计继续存在.但是,对于一些相对较新的特性来说,修复了这个错误的设计.</p>\n<p>例如:</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"lineNumber\">1</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">// except error: can not cover a symbol value to a number</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2n</span> <span class=\"hljs-comment\">// except error: can not mix BigInt and other types,use explicit conversions</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-number\">1</span>() <span class=\"hljs-comment\">// except error: 1 is not a function</span>\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// except error: 1 is not a constructor</span>\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-string\">'ab'</span>.length = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 只读属性不可改</span></code></pre> \n\n<h2>3. ECMAScript 的规范是如何使用类型转换函数的?</h2>\n<p>先来看看如下一个使用<code>Typescript</code>编写的函数:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>如上所示,此函数的两个参数的类型都是<code>number</code>,在转译为<code>JavaScript</code>的过程中,转译器做了什么?</p>\n<p>为了在转译后保证参数类型正确,其过程简述为如下代码:</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> _a = ToNumberic(a);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">let</span> _b = ToNumberic(b);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">/// ...</span>\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>在解释器内部可以通过如下<code>抽象操作</code>函数将目标数据进行类型强制转换:</p>\n<ul>\n<li>ToBoolean()</li>\n<li>ToNumber()</li>\n<li>ToBigInt()</li>\n<li>ToString()</li>\n<li>ToObject()</li>\n</ul>\n<blockquote>\n<p>上述函数是<code>ECMAScript</code>定义的函数,用于描述伪代码,便于编写规范,我们无法在 JavaScript 中调用它.</p>\n</blockquote>\n<p>加法操作对不同类型的数据将进行三种类型的转换,最终将得到一致的数据类型.最终数据都将转换为原始数据类型.</p>\n<p><code>{} + {}</code>将对两个空对象进行类型转换,因为<code>object</code>不是<code>原始数据(primitive)</code>类型.</p>\n<blockquote>\n<p>TC39: \"负责将对象转换为原始数据类型的函数是<code>ToPrimitive()</code>\".</p>\n</blockquote>\n<p>函数如其名,此函数的签名如下:</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"lineNumber\">1</span>ToPrimitive(input, PreferredType?)</code></pre> \n\n<p><code>input</code>易于理解,可选的<code>PreferredType(首选类型)</code>则接受一个用于表示期待转换结果的原始类型标识字符串,最终返回一个原始类型值.</p>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://2ality.com/2019/10/type-coercion.html\">Type coercion in JavaScript</a></li>\n</ul>\n","title":"javascript语言中的类型转换","date":"2021/3/22","tags":["javascript","tc39"],"mainImg":"https://images.unsplash.com/photo-1472437774355-71ab6752b434?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTY0MTAxMzQ&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1472437774355-71ab6752b434?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTY0MTAxMzQ&ixlib=rb-1.2.1&q=80&w=400","intro":"你好,TC39.请问 JavaScript 世界中的对象转换是如何实现的呢?"}},"__N_SSG":true}