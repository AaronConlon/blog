{"pageProps":{"post":{"slug":"动态规划浅解","contentHtml":"<h3>前言</h3>\n<p>为了能通过大厂的笔试,算法这一关是必须闯的,其中动态规划可以单独拉出来学习.</p>\n<h3>思想</h3>\n<blockquote>\n<p>简而言之</p>\n</blockquote>\n<p>动态规划的核心在于<code>拆</code>和<code>解</code>!在于<code>尽可能缩小可能的解的空间</code>!</p>\n<p>将一个问题拆成几个子问题,求解这些子问题,把子问题的答案保存起来,最终推断出最大的问题的解.</p>\n<p>最大的问题的<code>最优解</code>通常是某个算法问题的答案,这个最优解可以由小问题的最优解推出.</p>\n<p>对于使用<code>DP</code>算法解决问题,需要明确以下三点:</p>\n<ul>\n<li>设计状态</li>\n<li>设计状态转移方程</li>\n<li>转移状态</li>\n</ul>\n<h3>实例解析</h3>\n<p><a href=\"https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/\">剑指 Offer 10- II. 青蛙跳台阶问题 - 力扣（LeetCode）</a></p>\n<p>当年校招时,我一直以为这种笔试题是脑筋急转弯,现在才知道当时有多可笑.</p>\n<p>首先,定义一个数组保存若干台阶时有多少种跳法,数组为<code>dp</code>,跳上<code>i</code>级的台阶的跳法有<code>dp[i]</code>种.\n那么最终的结果就是：dp[n] = dp[n-1] + dp[n-2]</p>\n<p>这里我们就思考初始化状态是什么？显然 dp[0] = 1, dp[1] = 1</p>\n<p>代码如下：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">2</span> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number}</span> <span class=\"hljs-variable\">n</span></span>\n<span class=\"lineNumber\">3</span> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">{number}</span></span>\n<span class=\"lineNumber\">4</span> */</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">var</span> numWays = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">n</span>) </span>{\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">let</span> dp = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-keyword\">if</span> (n &#x3C; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">2</span>; i &#x3C;= n; i++) {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">let</span> types = (dp[<span class=\"hljs-number\">0</span>] + dp[<span class=\"hljs-number\">1</span>]) % <span class=\"hljs-number\">1000000007</span>;\n<span class=\"lineNumber\">10</span>    dp[<span class=\"hljs-number\">0</span>] = dp[<span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">11</span>    dp[<span class=\"hljs-number\">1</span>] = types;\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">return</span> dp[<span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">14</span>};</code></pre> \n\n<p>初始化其状态，得出跳 2 次以下都只有 1 种方法的初始状态，然后逐步求新增的台阶直到 n 级。在上述代码中，使用固定长度的数组能节省空间，实质上依然是取最后两个选择的结果，这两个选择的结果被保存到了数组开头而已。</p>\n<p><a href=\"https://leetcode-cn.com/problems/unique-paths/\">62. 不同路径 - 力扣（LeetCode）</a></p>\n<p>首先，如何设计状态？用函数的思路来设计，那么可以用 f(i,j) 表示从左上角走到坐标 (i,j) 的总路径数。\n显然，要走到最后只有两种选择：</p>\n<ul>\n<li>从目标的上面往下</li>\n<li>从目标的左边往右</li>\n</ul>\n<p>那么最终的状态转移方程可得：\n<code>f(i,j) = f(i-1, j) + f(i, j-1)</code></p>\n<p>接着，我们来初始化一些状态。根据实际题目可知，我们需要用一个二维数组来保存每一个坐标的路径总数。并且无论是第一行还是第一列，都只有一条路可走。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> uniquePaths = <span class=\"hljs-function\">(<span class=\"hljs-params\">m, n</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// 初始化二维数组</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">const</span> f = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(m).fill(<span class=\"hljs-number\">0</span>).map(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(n).fill(<span class=\"hljs-number\">0</span>));\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// 初始化第一行和第一列的路径总数</span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; m; i++) {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-comment\">// 第一行</span>\n<span class=\"lineNumber\">7</span>    f[<span class=\"hljs-number\">0</span>][i] = <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">8</span>  }\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">0</span>; j &#x3C; n; j++) {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-comment\">// 第一列</span>\n<span class=\"lineNumber\">11</span>    f[j][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-comment\">// 其他位置</span>\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &#x3C; m; i++) {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> j = <span class=\"hljs-number\">1</span>; j &#x3C; n; j++) {\n<span class=\"lineNumber\">16</span>      <span class=\"hljs-comment\">// 某坐标的路径总数可以根据此前的历史数据计算出来，最终得到 f(i, j)</span>\n<span class=\"lineNumber\">17</span>      f[i][j] = f[i - <span class=\"hljs-number\">1</span>][j] + f[i][j - <span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">18</span>    }\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-keyword\">return</span> f[m - <span class=\"hljs-number\">1</span>][n - <span class=\"hljs-number\">1</span>];\n<span class=\"lineNumber\">21</span>};</code></pre> \n\n","title":"动态规划浅解","date":"12/11/2021","tags":["算法"],"mainImg":"https://images.unsplash.com/photo-1555066931-bf19f8fd1085?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzkyMTEzNDE&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1555066931-bf19f8fd1085?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzkyMTEzNDE&ixlib=rb-1.2.1&q=80&w=400","intro":"动态规划到底是什么玩意?"}},"__N_SSG":true}