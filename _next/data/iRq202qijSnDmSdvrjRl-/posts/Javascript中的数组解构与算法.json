{"pageProps":{"post":{"slug":"Javascript中的数组解构与算法","contentHtml":"<p>JavaScript 中数组的基础知识不再多提.但是在此,依然希望再次巩固一次内置的数组静态方法,及其返回值.</p>\n<p>想要查看<code>JavaScript</code>数组的文档信息,可以看看:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array\">Array - JavaScript | MDN</a></p>\n<h1>创建数组</h1>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>() <span class=\"hljs-comment\">// []</span>\n<span class=\"lineNumber\">2</span>arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">7</span>) <span class=\"hljs-comment\">// length is 7, [empty * 7]</span>\n<span class=\"lineNumber\">3</span>arr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Array</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// [1,2,3]</span>\n<span class=\"lineNumber\">4</span>arr = [] <span class=\"hljs-comment\">// 常用</span>\n<span class=\"lineNumber\">5</span>arr = <span class=\"hljs-built_in\">Array</span>.from({<span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">3</span>}, <span class=\"hljs-function\">(<span class=\"hljs-params\">el, index</span>) =></span> index) <span class=\"hljs-comment\">// [0, 1, 2]</span></code></pre> \n\n<h1>常用方法</h1>\n<p>主要分为:</p>\n<ul>\n<li>添加元素</li>\n<li>删除元素</li>\n<li>迭代</li>\n</ul>\n<p><code>JavaScript</code>内置的数组方法是我们处理数组逻辑的最佳实践.</p>\n<p>首先,添加元素内置从开始和从末尾添加.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>]\n<span class=\"lineNumber\">2</span>arr.push(<span class=\"hljs-number\">3</span>) <span class=\"hljs-comment\">// arr = [1,2,3], 返回数组添加数据后的长度:3</span>\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span>arr.unshift(<span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// arr = [0,1,2,3], 同样返回新长度: 4</span></code></pre> \n\n<p>如果需要组合两个数组,并且将新数组返回可以参考如下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> arr1 = [<span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">let</span> arr2 = [<span class=\"hljs-number\">2</span>]\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">let</span> arr3 = arr1.concat(arr2)\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// arr3 = [1,2],没有副作用,不会修改原数组</span></code></pre> \n\n<p>其次是删除元素,非常方便:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>arr.pop() <span class=\"hljs-comment\">// arr = [0,1,2], 返回弹出的末尾元素 3</span></code></pre> \n\n<p>如果是需要从指定位置删除指定数量的元素,则可以使用<code>splice</code>方法.这个方法返回<code>被修改的内容</code>.例如删除了 n 个元素,则以数组的形式返回被删除的元素.如果删除元素为 0,且添加了若干元素,会返回一个<code>空数组</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>arr.splice(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// 删除 index 为 5, 6, 7 的元素,自动修正 length 属性</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// 如果需要在指定位置插入新数据,也可以实现</span>\n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">let</span> a = arr.splice(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) \n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">// 下标为 5 为初始插入点,从参数上看,0 指的是删除 0 个数据,后续的 1 和 2 是新插入的数据,自动修正 length</span>\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// a is []</span></code></pre> \n\n<p>最后,为了灵活操作数组,<code>JavaScript</code>内置了多种迭代方式.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// every 迭代每个元素,直到迭代函数返回 false,立刻停止并且返回 false</span>\n<span class=\"lineNumber\">3</span>arr.every(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> i > <span class=\"hljs-number\">0</span>) <span class=\"hljs-comment\">// 返回 boolean 值 true</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">// 同样依次使用函数迭代,直到此函数返回 true,立刻停止并且返回 true,否则返回 false</span>\n<span class=\"lineNumber\">6</span>arr.some(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> i === <span class=\"hljs-number\">1</span>) <span class=\"hljs-comment\">// 返回 true</span>\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// 依次迭代每一个元素执行传入的函数,不会提前停止.</span>\n<span class=\"lineNumber\">9</span>arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> <span class=\"hljs-built_in\">console</span>.log(i))\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span><span class=\"hljs-comment\">// 迭代结束后,返回新的数组</span>\n<span class=\"lineNumber\">12</span>arr.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> i % <span class=\"hljs-number\">2</span>) \n<span class=\"lineNumber\">13</span>=> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>]\n<span class=\"lineNumber\">14</span>arr.map(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> i*i)\n<span class=\"lineNumber\">15</span>=> [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">16</span>]\n<span class=\"lineNumber\">16</span> \n<span class=\"lineNumber\">17</span><span class=\"hljs-comment\">// 实现累加</span>\n<span class=\"lineNumber\">18</span>arr.reduce(<span class=\"hljs-function\">(<span class=\"hljs-params\">prev, current</span>) =></span> prev + current, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">19</span><span class=\"hljs-comment\">// 接收的函数还支持继续添加起始 index 和数组array</span></code></pre> \n\n<p><code>ES6</code>继续带来了更多的数组功能,减少了外部库的载入和开发者的开发量.</p>\n<ul>\n<li>@@iterator: 默认与 values() 返回值一致,可以用<code>for..of..</code>迭代</li>\n<li>copyWithin:</li>\n</ul>\n<h1>多维数组</h1>\n<p>如果我们需要存储周一到周五每天上午和下午的天气,则可以使用如下多维数组:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> weather = []\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// 周一</span>\n<span class=\"lineNumber\">3</span>weather[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'晴'</span> <span class=\"hljs-comment\">//上午</span>\n<span class=\"lineNumber\">4</span>weather[<span class=\"hljs-number\">0</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">'阴'</span> <span class=\"hljs-comment\">//下午</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">// 周二</span>\n<span class=\"lineNumber\">6</span>weather[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">0</span>] = <span class=\"hljs-string\">'雨'</span>\n<span class=\"lineNumber\">7</span>weather[<span class=\"hljs-number\">1</span>][<span class=\"hljs-number\">1</span>] = <span class=\"hljs-string\">'阴'</span></code></pre> \n\n<p>遍历的时候采用两层 for 循环即可.另外,在浏览器中可以使用<code>console.table(weather)</code>提供一个多维表格,更好的显示多维数组.</p>\n","title":"Javascript中的数组解构与算法","date":"2020/12/29","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1580706483913-b6ea7db483a0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1580706483913-b6ea7db483a0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"几乎所有的编程语言都内置支持了数组类型,数组简单而有效,应用及其广泛.大多数编程语言的数组存储同一类型的值,而 JavaScript 则支持存储不同的值,但建议大家遵守最佳实践,避免这么做."}},"__N_SSG":true}