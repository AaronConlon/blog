{"pageProps":{"post":{"slug":"常见算法题解题思路","contentHtml":"<h3>前文提要</h3>\n<p>在学校那时候并不喜欢算法，也不关心编程。毕业后发现算法思维是如此重要，算法能力在面试大厂的时候是如此重要。</p>\n<blockquote>\n<p>种下一个树的最佳时机是十年前，其次是现在。</p>\n</blockquote>\n<p>为了弥补那些年的缺失，我买了算法书📚，看了算法博客文章和视频讲解，从头开始学习算法。本文记录📝算法题常见的解题思路和应对方案。</p>\n<h3>常见思路</h3>\n<h4>快慢指针</h4>\n<p>先来一张网图，源自知乎：</p>\n<p><img src=\"https://pic1.zhimg.com/v2-08f27cd5063b6e2542ffd362ea8e3914_r.jpg\" alt=\"\"></p>\n<p>只要链表是有环的，快指针都会从回环部分开始追慢指针，由于二者速度只差一个单位，因此无论是落后多少个单位，最后再相遇之前都会落后一个单位，下一步将会指向同一个节点，当发生这种情况的时候就可以判定这个链表是有环的。</p>\n<p>在写题的时候要注意无环判断条件，例如头是<code>null</code>或者只有头节点一个节点，亦或是尾节点存在，无下一个节点。</p>\n<p>来一份<code>JS</code>代码实例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasCycle</span>(<span class=\"hljs-params\"> head </span>) </span>{\n<span class=\"lineNumber\">2</span>    <span class=\"hljs-comment\">// write code here</span>\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">if</span>(head === <span class=\"hljs-literal\">null</span> || head.next === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">let</span> slow = head;\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">let</span> fast = head.next;\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">slow !== fast</span>)</span> {\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-keyword\">if</span>(fast === <span class=\"hljs-literal\">null</span> || fast.next === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">8</span>        slow = slow.next;\n<span class=\"lineNumber\">9</span>        fast = fast.next.next;\n<span class=\"lineNumber\">10</span>    }\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n<p>另外，如果要搜索环的入口节点，则需要在快慢指针重叠的时候，在头链表和重叠位置链表同时设置两个指针，同步移动，最终<code>二者会在环开始的位置相遇</code>，如果你想要了解原因并且彻底弄清原理可以搜索关键字，如果你想为此准备面试，那就背下来吧。</p>\n<p>我们只需要添加部分代码：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">hasCycle</span>(<span class=\"hljs-params\"> head </span>) </span>{\n<span class=\"lineNumber\">2</span>    <span class=\"hljs-comment\">// write code here</span>\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">if</span>(head === <span class=\"hljs-literal\">null</span> || head.next === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">let</span> slow = head;\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">let</span> fast = head.next;\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">slow !== fast</span>)</span> {\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-keyword\">if</span>(fast === <span class=\"hljs-literal\">null</span> || fast.next === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n<span class=\"lineNumber\">8</span>        slow = slow.next;\n<span class=\"lineNumber\">9</span>        fast = fast.next.next;\n<span class=\"lineNumber\">10</span>    }\n<span class=\"lineNumber\">11</span>    slow = head;\n<span class=\"lineNumber\">12</span>  \t<span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">slow != fast</span>)</span> {\n<span class=\"lineNumber\">13</span>      slow = slow.next;\n<span class=\"lineNumber\">14</span>      fast = fast.next;\n<span class=\"lineNumber\">15</span>    }\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-keyword\">return</span> slow;\n<span class=\"lineNumber\">17</span>}</code></pre> \n\n<p>还有一个变种的简单问题，LeetCode 234 检查链表是否回文。</p>\n<p>用快慢指针判断链表中心，然后将后面部分链表翻转，从中间断开，判断在其中一个结束之前是否每一个值都相等。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">2</span> * Definition for singly-linked list.\n<span class=\"lineNumber\">3</span> * function ListNode(val, next) {\n<span class=\"lineNumber\">4</span> *     this.val = (val===undefined ? 0 : val)\n<span class=\"lineNumber\">5</span> *     this.next = (next===undefined ? null : next)\n<span class=\"lineNumber\">6</span> * }\n<span class=\"lineNumber\">7</span> */</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">9</span> * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{ListNode}</span> <span class=\"hljs-variable\">head</span></span>\n<span class=\"lineNumber\">10</span> * <span class=\"hljs-doctag\">@return <span class=\"hljs-type\">{boolean}</span></span>\n<span class=\"lineNumber\">11</span> */</span>\n<span class=\"lineNumber\">12</span><span class=\"hljs-keyword\">var</span> isPalindrome = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">head</span>) </span>{\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">if</span>(head.next === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">14</span>  \t<span class=\"hljs-comment\">// 快慢指针，寻找中间点</span>\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">let</span> fast = head;\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-keyword\">let</span> slow = head;\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">let</span> prev;\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">fast &#x26;&#x26; fast.next</span>)</span> {\n<span class=\"lineNumber\">19</span>        prev = slow;\n<span class=\"lineNumber\">20</span>        slow = slow.next;\n<span class=\"lineNumber\">21</span>        fast = fast.next.next;\n<span class=\"lineNumber\">22</span>    }\n<span class=\"lineNumber\">23</span>    <span class=\"hljs-comment\">// 断开</span>\n<span class=\"lineNumber\">24</span>    prev.next = <span class=\"hljs-literal\">null</span>;\n<span class=\"lineNumber\">25</span>\t\t<span class=\"hljs-comment\">// 翻转</span>\n<span class=\"lineNumber\">26</span>    <span class=\"hljs-keyword\">let</span> newHead = <span class=\"hljs-literal\">null</span>;\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">slow</span>)</span> {\n<span class=\"lineNumber\">28</span>        <span class=\"hljs-keyword\">const</span> temp = slow.next;\n<span class=\"lineNumber\">29</span>        slow.next = newHead;\n<span class=\"lineNumber\">30</span>        newHead = slow;\n<span class=\"lineNumber\">31</span>        slow = temp;\n<span class=\"lineNumber\">32</span>    }\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-comment\">// 对比</span>\n<span class=\"lineNumber\">34</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">head &#x26;&#x26; newHead</span>)</span> {\n<span class=\"lineNumber\">35</span>        <span class=\"hljs-keyword\">if</span>(head.val !== newHead.val) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">36</span>        head = head.next;\n<span class=\"lineNumber\">37</span>        newHead = newHead.next;\n<span class=\"lineNumber\">38</span>    }\n<span class=\"lineNumber\">39</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">40</span>};</code></pre> \n\n","title":"常见算法题解题思路","date":"12/1/2021","tags":["算法"],"mainImg":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgzMzgwOTY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgzMzgwOTY&ixlib=rb-1.2.1&q=80&w=400","intro":"仅以此文纪念笔者学习算法和练习算法题的那些日子。"}},"__N_SSG":true}