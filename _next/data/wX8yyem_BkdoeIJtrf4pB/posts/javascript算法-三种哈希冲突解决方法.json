{"pageProps":{"post":{"slug":"javascript算法-三种哈希冲突解决方法","content":"\n在本文中,我们将学习到如何处理哈希冲突,如何编写健壮和优雅的代码,体会算法之美.\n\n## 1. 哈希函数\n\n散列表是根据关键码值`(Key value)`而直接进行访问的数据结构.也就是说,它通过把关键码值映射到表中一个位置来访问记录,以加快查找的速度.\n\n这个映射函数叫做`哈希(散列)函数`,存放记录的数组叫做散列表.\n\n哈希函数不是一个纯函数,函数参数和值是`多对一`的关系.因为这种特性,哈希值理论上是无法逆推的.让我们来看一个在社区中常见的哈希函数:\n\n```typescript\nprivate loseloseHashCode(key: K) {\n  if (typeof key === 'number') {\n    return key;\n  }\n  const tableKey = this.toStrFn(key);\n  let hash = 0;\n  for (let i = 0; i < tableKey.length; i++) {\n    hash += tableKey.charCodeAt(i);\n  }\n  return hash % 37;\n}\n```\n\n上述代码是从哈希表的实现中摘取出来的,大致效果是通过不同类型的`key`获取一个数字作为`hashValue`.\n\n上述哈希函数的取值范围较小,不要让这个哈希函数限制你的`想象`,在后续的`多重散列`学习的时候将会讨论这个话题.\n\n## 2. 哈希冲突\n\n在创建我们的哈希表的时候,对于不同的键值,依据一个哈希函数生成的键值有可能出现重复的情形`(一对多的关系)`,这种场景我们称之为`哈希冲突`.\n\n为了应对哈希冲突,开发者们思考出了许多解决方案,今天我们来看看其中比较常用的三个解决方案.\n\n\n\n### 开放定址\n\n开放定址理论中有`分离链接`的说法,指的是为哈希表的每一个位置创建一个`链表`,将元素存在链表里,这是最简单和常见的解决方法,但是在哈希表实例之外,还需要一些`额外的存储空间`.\n\n如下是图示:\n\n![](https://zhangruochi.com/Hash-Table/2019/08/23/3.png)\n\n接下来看代码示例:\n\n```typescript\nimport { defaultToString } from \"../help\";\nimport LinkedList from \"../linkedList/index\";\n\nexport default class HashTableSeparateChaining {\n  table: { [name: string]: LinkedList };\n\n  toStrFn: Function;\n\n  count: number;\n\n  constructor() {\n    this.table = {};\n    this.toStrFn = defaultToString;\n    this.count = 0;\n  }\n\n  put(key: unknown, value: unknown): boolean {\n    if (key !== undefined && value !== undefined) {\n      const hashCode = this.getHashCode(key);\n      if (this.table[hashCode] === undefined) {\n        const linked = new LinkedList();\n        this.table[hashCode] = linked;\n      }\n      this.table[hashCode].push([key, value]);\n      this.count++;\n      return true;\n    }\n    return false;\n  }\n\n  get(key: unknown): unknown {\n    const hashCode = this.getHashCode(key);\n    if (this.table[hashCode] && !this.table[hashCode].isEmpty()) {\n      let current = this.table[hashCode].head;\n      while (current) {\n        if (current.val[0] === key) {\n          return current.val[1];\n        }\n      }\n      current = current.next;\n    }\n    return undefined;\n  }\n\n  remove(key: unknown): boolean {\n    const hashCode = this.getHashCode(key);\n    const linked = this.table[hashCode];\n    if (linked && linked.indexOf(key) !== -1) {\n      linked.remove(key);\n      if (linked.isEmpty()) {\n        delete this.table[hashCode];\n      }\n      this.count--;\n      return true;\n    }\n    return false;\n  }\n\n  getHashCode(key: unknown): number {\n    if (typeof key === \"number\") return key;\n    const tableKey: string = this.toStrFn(key);\n    let hash = 0;\n    for (let i = 0; i < tableKey.length; i++) {\n      hash += tableKey.charCodeAt(i);\n    }\n    return hash % 37;\n  }\n\n  size() {\n    return this.count;\n  }\n}\n```\n\n> **分离链接法**关键在于对内部存储对象使用链表来存储\"`哈希碰撞`\"的值.\n\n### 线性探查法\n\n如果不额外使用链表空间来存储值,依然选择将值存储到表中,则可以选择使用`线性探查法`.\n\n线性探查的关键在于,`如果一个 position 已经被占用,则尝试 position+1 的位置,依次类推`.\n\n![](https://haif-cloud.oss-cn-beijing.aliyuncs.com/algorithm/LinearProbing-Add.png)\n\n白色区域表示空闲位置，绿色区域表示已经存储数据.\n\n在删除的时候,有两种思路去处理收尾的代码逻辑.\n\n- 标记法: 标记已删除的位置,并且后续不可再使用,查找的时候也跳过.\n- 位置移动修复法: 检验是否需要将后续存在的一个或者多个元素移动到之前的位置,以此来防止出现通过哈希值找到一个被删除的空位置.\n\n对于第一种思路,也称为`惰性探查`,核心思想在于每个位置都有一个是否已删除的标记,遇到碰撞的时候递增哈希值,在移除碰撞的值的时候,将此标志位设置为`true`,方便再次插入碰撞的值的时候直接利用,或者在获取值的时候跳过具有已删除标志的位置,示例代码如下:\n\n```typescript\nimport { defaultToString, ValuePairLazy } from \"../help\";\n\nexport default class HashTableLinearProbingLazy<K, V> {\n  protected table: { [key: string]: ValuePairLazy<K, V> };\n\n  constructor(\n    public size = 0,\n    protected toStrFn: (key: K) => string = defaultToString\n  ) {\n    this.table = {};\n  }\n\n  private loseloseHashCode(key: K) {\n    if (typeof key === \"number\") return key;\n    const tableKey = this.toStrFn(key);\n    let hash = 0;\n    for (let i = 0; i < tableKey.length; i++) {\n      hash += tableKey.charCodeAt(i);\n    }\n    return hash % 37;\n  }\n\n  hashCode(key: K): number {\n    return this.loseloseHashCode(key);\n  }\n\n  put(key: K, value: V): boolean {\n    if (key != null && value != null) {\n      const position = this.hashCode(key);\n      if (\n        this.table[position] === undefined ||\n        (this.table[position] != null && this.table[position].isDeleted)\n      ) {\n        this.table[position] = new ValuePairLazy(key, value);\n      } else {\n        let index = position + 1;\n        while (this.table[index] != null && !this.table[position].isDeleted) {\n          index++;\n        }\n        this.table[index] = new ValuePairLazy(key, value);\n      }\n      this.size++;\n      return true;\n    }\n    return false;\n  }\n\n  get(key: K) {\n    const position = this.hashCode(key);\n    const table = this.table;\n    if (table[position] != null) {\n      if (table[position].key === key && table[position].isDeleted === false) {\n        return table[position].value;\n      }\n      let index = position + 1;\n      while (\n        table[index] != null &&\n        (table[index].key !== key || table[index].isDeleted)\n      ) {\n        index++;\n      }\n      if (\n        table[index] != null &&\n        table[index].key === key &&\n        !table[index].isDeleted\n      ) {\n        return table[index].value;\n      }\n    }\n    return undefined;\n  }\n\n  remove(key: K): boolean {\n    let position = this.hashCode(key);\n    const { table } = this;\n    if (table[position] != null) {\n      if (table[position].key === key && !table[position].isDeleted) {\n        table[position].isDeleted = true;\n        this.size--;\n        return true;\n      }\n      position++;\n      while (table[position].key !== key || table[position].isDeleted) {\n        position++;\n      }\n      if (\n        table[position] != null &&\n        table[position].key === key &&\n        !table[position].isDeleted\n      ) {\n        table[position].isDeleted = true;\n        this.size--;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  clear() {\n    this.size = 0;\n    this.table = {};\n  }\n\n  getTable() {\n    return this.table;\n  }\n\n  toString(): string {\n    if (this.isEmpty()) return \"\";\n    const keys = Object.keys(this.table);\n    let objStr = `{${keys[0]} => ${this.table[keys[0]].toString()}}`;\n    for (let i = 1; i < keys.length; i++) {\n      objStr = `${objStr}, {${keys[i]} => ${this.table[keys[i]].toString()}}`;\n    }\n    return objStr;\n  }\n}\n\n```\n\n\n\n对于第二种思路,示例代码如下:\n\n```ts\nimport { defaultToString, ValuePair } from \"../help\";\n\nexport default class HashTableLinearProbing<K, V> {\n  protected table: { [key: string]: ValuePair<K, V> };\n\n  constructor(\n    protected toStrFn: (key: K) => string = defaultToString,\n    public size = 0\n  ) {\n    this.table = {};\n  }\n\n  private loseloseHashCode(key: K) {\n    if (typeof key === \"number\") return key;\n    const tableHash = this.toStrFn(key);\n    console.log(tableHash, \"is table hash value\");\n\n    let hash = 0;\n    for (let i = 0; i < tableHash.length; i++) {\n      hash += tableHash.charCodeAt(i);\n    }\n    return hash % 37;\n  }\n\n  hashCode(key: K) {\n    return this.loseloseHashCode(key);\n  }\n\n  put(key: K, value: V) {\n    // 保证 key 和 value 都不能是 undefined 和 null 之一\n    if (key != null && value != null) {\n      const position = this.hashCode(key);\n      if (this.table[position] == null) {\n        this.table[position] = new ValuePair(key, value);\n      } else {\n        let index = position + 1;\n        while (this.table[index] != null) {\n          index++;\n        }\n        this.table[index] = new ValuePair(key, value);\n      }\n      this.size++;\n      return true;\n    }\n    return false;\n  }\n\n  get(key: K) {\n    const position = this.hashCode(key);\n    if (this.table[position] != null) {\n      if (this.table[position].key === key) {\n        return this.table[position].value;\n      }\n      let index = position + 1;\n      while (this.table[index].key != null && this.table[index].key !== key) {\n        index++;\n      }\n      if (this.table[index] != null && this.table[index].key === key)\n        return this.table[index].value;\n    }\n    return undefined;\n  }\n\n  remove(key: K) {\n    const position = this.hashCode(key);\n    if (this.table[position] != null) {\n      if (this.table[position].key === key) {\n        delete this.table[position];\n        this.verifyRemoveSideEffect(key, position);\n        this.size--;\n        return true;\n      }\n      let index = position + 1;\n      while (this.table[index] != null && this.table[index].key !== key) {\n        index++;\n      }\n      if (this.table[index] != null && this.table[index].key === key) {\n        delete this.table[index];\n        this.verifyRemoveSideEffect(key, index);\n        this.size--;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private verifyRemoveSideEffect(key: K, removePosition: number) {\n    const hash = this.hashCode(key);\n    let index = removePosition + 1;\n    while (this.table[index] != null) {\n      const posHash = this.hashCode(this.table[index].key);\n      if (posHash <= hash || posHash <= removePosition) {\n        this.table[removePosition] = this.table[index];\n        delete this.table[index];\n        removePosition = index; // eslint-disable-line\n      }\n      index++;\n    }\n  }\n\n  isEmpty() {\n    return this.size === 0;\n  }\n\n  clear() {\n    this.size = 0;\n    this.table = {};\n  }\n\n  getTable() {\n    return this.table;\n  }\n\n  toString(): string {\n    if (this.isEmpty()) return \"\";\n    const keys = Object.keys(this.table);\n    let objStr = `${keys[0]} => ${this.table[keys[0]].toString()}`;\n    for (let i = 1; i < keys.length; i++) {\n      objStr = `${objStr}, ${keys[i]} => ${this.table[keys[i]].toString()}`;\n    }\n    return objStr;\n  }\n}\n```\n\n这里的关键在于`remove`方法,删除数据之后还要对后续由于哈希冲突导致的数据位置异常进行处理,对相应的值的位置进行修复.哈希冲突越多,则`remove`的开销越大,因此我们需要一个优秀的`哈希函数`.\n\n### 多重散列法\n\n多重散列或者多重哈希,没什么区别.`一个`哈希函数不够,`就用两个`.看示例代码:\n\n```JavaScript\n(firstHash(key) + i * secondHash(key)) % tableSize \n```\n\n\n\n\n\n\n\n## 3. 参考\n\n- [Data Structures 101: implement hash tables in JavaScript](https://www.educative.io/blog/data-strucutres-hash-table-javascript)","title":"Javascript算法:三种哈希冲突解决方法","date":"2021/3/10","tags":["Javascript","哈希冲突","算法"],"mainImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"在学习 JavaScript 数据结构的时候,看到了三种解决哈希冲突的方法,书上记录其二,本文追加之三,聊表慰藉."}},"__N_SSG":true}