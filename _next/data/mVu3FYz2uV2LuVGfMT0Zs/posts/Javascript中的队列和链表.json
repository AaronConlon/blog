{"pageProps":{"post":{"slug":"Javascript中的队列和链表","contentHtml":"<p>长话短说,本文将队列和链表的知识合二为一.通过一些示例再次巩固这部分的知识.大概内容分为:</p>\n<ul>\n<li>简单队列</li>\n<li>双端队列</li>\n<li>队列应用\n<ul>\n<li>击鼓传花</li>\n<li>回文字检查</li>\n</ul>\n</li>\n<li>单向链表</li>\n<li>双向链表</li>\n<li>循环链表</li>\n<li>排序链表</li>\n<li>链表模拟栈</li>\n</ul>\n<p>队列,先进先出.排过队吗?按顺序添加和处理的任务,都可以用<code>队列</code>的结构进行存储和消费.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\"></span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>._items = {}\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>._count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">this</span>._lowestCount = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">enqueue</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._count] = e\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">this</span>._count++\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">dequeue</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-built_in\">this</span>._lowestCount += <span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">return</span> r\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span> \n<span class=\"lineNumber\">20</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._lowestCount === <span class=\"hljs-built_in\">this</span>._count\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.isEmpty()  ? <span class=\"hljs-literal\">undefined</span> : <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span> \n<span class=\"lineNumber\">27</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._count - <span class=\"hljs-built_in\">this</span>._lowestCount\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span> \n<span class=\"lineNumber\">31</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-built_in\">this</span>._items = {}\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-built_in\">this</span>._count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">34</span>    <span class=\"hljs-built_in\">this</span>._lowestCount = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">37</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">38</span>    <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">39</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> iterator <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.values(<span class=\"hljs-built_in\">this</span>._items)) {\n<span class=\"lineNumber\">40</span>      r += r === <span class=\"hljs-string\">''</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${iterator}</span>`</span> : <span class=\"hljs-string\">`, <span class=\"hljs-subst\">${iterator}</span>`</span>\n<span class=\"lineNumber\">41</span>    }\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> r\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>}\n<span class=\"lineNumber\">45</span> \n<span class=\"lineNumber\">46</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> Queue()\n<span class=\"lineNumber\">47</span><span class=\"hljs-built_in\">console</span>.log(a.isEmpty())\n<span class=\"lineNumber\">48</span>a.enqueue(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">49</span>a.enqueue(<span class=\"hljs-string\">'just for fun'</span>)\n<span class=\"lineNumber\">50</span><span class=\"hljs-built_in\">console</span>.log(a.toString())\n<span class=\"lineNumber\">51</span>a.clear()\n<span class=\"lineNumber\">52</span><span class=\"hljs-built_in\">console</span>.log(a.toString())</code></pre> \n\n<p>普通队列简单,但是有些场景需要对最新入队的元素进行操作.例如,针对需要存储一系列操作的需求.此时,需要灵活处理队首和队尾的数据内容.</p>\n<p>当引发撤销操作的时候,操作队列可以从尾部弹出最后的操作记录.</p>\n<p>我们需要双端队列.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Deque</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Queue</span></span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\"></span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">super</span>()\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">addFront</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.isEmpty()</span>)</span> {\n<span class=\"lineNumber\">8</span>      <span class=\"hljs-built_in\">this</span>.enqueue(e)\n<span class=\"lineNumber\">9</span>    } \n<span class=\"lineNumber\">10</span>    \n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n","title":"Javascript中的队列和链表","date":"2021/1/7","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"几年前在学校使用 c++ 进行数据结构与算法的学习.学得跟屎一样,丢人现眼.前段时间在飞机上看完了队列和链表部分的内容,还是觉得需要整理一下写成文章."}},"__N_SSG":true}