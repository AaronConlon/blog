{"pageProps":{"post":{"slug":"使用react和svg创建圆环进度条","contentHtml":"<p>前段时间刚好接触一个设计页面需要用到圆形进度环组件，当时使用的是谷歌的 material-ui 的组件，为了实现设计图的效果需要对库组件进行修改，于是搜索了关于圆形进度环的实现，学了一手使用 svg 的知识来创建这个“圆环”。</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-20210910003938507.png\" alt=\"image-20210910003938507\"></p>\n<h1>本文相关知识</h1>\n<ul>\n<li>react 示例代码环境创建</li>\n<li>svg 🏷相关知识</li>\n<li>碎碎念</li>\n</ul>\n<h1>开始</h1>\n<h2>1. 创建 React 基础环境</h2>\n<p>很久以前，我断断续续的学习了<code>webpack</code>相关知识，后来工作中接触不到相关知识便淡忘了所学的内容，再看<code>webpack</code>的时候忽然觉得模棱两可且所知甚少，如下再次配置一遍基础环境是为了让自己加深一些印象。</p>\n<blockquote>\n<p><code>Create-react-app</code> 很好，<code>codesandbox.io</code>也很方便，但是我还是想记录一下搭建简单的 React 开发环境。</p>\n</blockquote>\n<p>首先，<code>yarn init -y</code>初始化根目录之后，即可安装以下依赖：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\"># react 核心依赖</span>\n<span class=\"lineNumber\">2</span>yarn add react react-dom\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\"># babel 相关依赖</span>\n<span class=\"lineNumber\">4</span>yarn add -D babel-loader @babel/preset-env @babel/preset-react \n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\"># webpack 依赖</span>\n<span class=\"lineNumber\">6</span>yarn add webpack webpack-cli\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\"># 使用 webpack 初始化其配置文件，根据需求会自动安装一些依赖</span>\n<span class=\"lineNumber\">8</span>npx webpack init</code></pre> \n\n<p>接着，对<code>.babelrc</code>文件进行编辑使其支持<code>react</code>相关特性：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-string\">\"plugins\"</span>: [<span class=\"hljs-string\">\"@babel/syntax-dynamic-import\"</span>],\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-string\">\"presets\"</span>: [\n<span class=\"lineNumber\">4</span>    [\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">6</span>      {\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-string\">\"modules\"</span>: <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">8</span>      }\n<span class=\"lineNumber\">9</span>    ],\n<span class=\"lineNumber\">10</span>    [<span class=\"hljs-string\">\"@babel/preset-react\"</span>]\n<span class=\"lineNumber\">11</span>  ]\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n<p>一切从简，接着安装<code>@chakra-ui</code>相关套件：</p>\n<p><code>yarn add @chakra-ui/react @emotion/react@^11 @emotion/styled@^11 framer-motion@^4</code></p>\n<p>熟悉了<code>chakra-ui</code>之后，可以很方便的直接写样式。</p>\n<blockquote>\n<p>Material-UI 的设计很好，也许未来可以尝试在项目中使用。</p>\n</blockquote>\n<p>ok，接下来正式开始介绍今天的主题：<code>圆环进度条</code>。</p>\n<h2>2. 圆环进度环组件设计 - svg</h2>\n<p>首先，我们来回顾一下最终效果：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-20210910003938507-20210910004529145.png\" alt=\"image-20210910003938507\"></p>\n<p>如上所示，圆形中间有一个百分比字符串，圆形边缘是一个具有“进度”意义的紫色进度条，且其在整个环的占比为圆环中心的百分比字符串等值，并且其余百分比部分也有一个灰白色的样式。</p>\n<p>我们可以通过<code>svg</code>标签来创建这个组件。</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">return</span> (\n<span class=\"lineNumber\">2</span>    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;></span>\n<span class=\"lineNumber\">3</span>        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{}</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{}</span>></span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span>        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">svg</span>></span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-tag\">&#x3C;/></span></span>\n<span class=\"lineNumber\">7</span>);</code></pre> \n\n<p><code>svg</code>的宽高可以通过组件的<code>props</code>传下来，在<code>svg</code>内部我们创建两个圆。</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span>&#x3C;svg className=<span class=\"hljs-string\">\"svg\"</span> width={} height={}>\n<span class=\"lineNumber\">2</span>    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">circle</span>\n<span class=\"lineNumber\">3</span>        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg-circle-bg\"</span>\n<span class=\"lineNumber\">4</span>        <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">5</span>        <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">8</span>        <span class=\"hljs-attr\">strokeWidth</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">9</span>    /></span></span>\n<span class=\"lineNumber\">10</span>    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">circle</span>\n<span class=\"lineNumber\">11</span>        <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg-circle\"</span>\n<span class=\"lineNumber\">12</span>        <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">14</span>        <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">15</span>        <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">16</span>        <span class=\"hljs-attr\">strokeWidth</span>=<span class=\"hljs-string\">{}</span>\n<span class=\"lineNumber\">17</span>    /></span></span>\n<span class=\"lineNumber\">18</span>&#x3C;/svg></code></pre> \n\n<blockquote>\n<p>svg 可以使用 fill 和 stroke 属性来上色，fill 设置对象内部的颜色， stroke 设置对象边框线条的颜色。</p>\n</blockquote>\n<p><code>svg</code>具有<code>描边</code>的概念，描边是以路径为中心线绘制的。我们的圆环进度就是利用圆形边线描边实现的。</p>\n<p>描边不能与边框属性<code>border</code>混淆，利用<code>svg</code>描边我们可以创建一些优美的<code>\"边框\"</code>。</p>\n<p>看看描边的三种方式：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/%253DSVG_Stroke_Linecap_Example.png\" alt=\"\"></p>\n<p>我们的圆环就是使用 css 属性 <code>troke-linecap: round;</code>来实现的圆角，相较于默认的矩形边界，圆角看起来更柔和一些。</p>\n<p>另外，圆环中心的文本使用<code>text</code>创建：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span>&#x3C;svg>\n<span class=\"lineNumber\">2</span>    ...\n<span class=\"lineNumber\">3</span>    &#x3C;text className=<span class=\"hljs-string\">\"svg-circle-text\"</span> x={}  y={}>\n<span class=\"lineNumber\">4</span>        ...\n<span class=\"lineNumber\">5</span>    &#x3C;/text>\n<span class=\"lineNumber\">6</span>&#x3C;/svg></code></pre> \n\n<p>如下是<code>scss</code>样式：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.svg</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">100px</span> auto;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">50%</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">background-color</span>: rgb(<span class=\"hljs-number\">216</span>, <span class=\"hljs-number\">237</span>, <span class=\"hljs-number\">238</span>);\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span class=\"hljs-selector-class\">.svg-circle-bg</span> {\n<span class=\"lineNumber\">8</span>  fill: none;\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span><span class=\"hljs-selector-class\">.svg-circle</span> {\n<span class=\"lineNumber\">12</span>  fill: none;\n<span class=\"lineNumber\">13</span>  stroke-linecap: round;\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// 以下是为了让进度起始在 12 点钟位置而添加的设置中心点和旋转属性</span>\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-attribute\">transform-origin</span>: center;\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-attribute\">transform</span>: rotate(-<span class=\"hljs-number\">90deg</span>);\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-attribute\">transform</span>-box: fill-box;\n<span class=\"lineNumber\">18</span>}\n<span class=\"lineNumber\">19</span><span class=\"hljs-selector-class\">.svg-circle-text</span> {\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">2rem</span>;\n<span class=\"lineNumber\">21</span>  text-anchor: middle;\n<span class=\"lineNumber\">22</span>  fill: tomato;\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-attribute\">font-weight</span>: bold;\n<span class=\"lineNumber\">24</span>}</code></pre> \n\n<p>整个组件的关键在于<code>svg</code>中使用两个圆形，一个作为百分比未达到的部分的背景，我们可以设置需要用到的背景色。另一个圆形则为了利用其描边，我们可以通过计算周长来设置描边数组：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span>...\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> center = size / <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> radiu = center - stokenW / <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">const</span> circumference = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI * radiu;\n<span class=\"lineNumber\">5</span>...</code></pre> \n\n<p>描边使用了<code>strokeWidth</code>来设置描边的宽度，<code>stroke-dasharray</code>描边数组值，使用<code>stroke-dashoffset</code>来设置显示偏移错位。</p>\n<p>按我的理解来看，<code>stroke-dasharray</code>的值作为总数，<code>stroke-dashoffset</code>则表示描边显示的范围，当偏移等于总数的时候，显示整个描边内容。</p>\n<blockquote>\n<p>组件源代码如下：</p>\n</blockquote>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> { Box } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@chakra-ui/layout'</span>;\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">import</span> React, { useEffect, useRef, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>;\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'./style.scss'</span>;\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">MyProgress</span>(<span class=\"hljs-params\">props</span>) </span>{\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">const</span> {\n<span class=\"lineNumber\">7</span>    size = <span class=\"hljs-number\">300</span>,\n<span class=\"lineNumber\">8</span>    progress = <span class=\"hljs-number\">0</span>,\n<span class=\"lineNumber\">9</span>    stokenW = <span class=\"hljs-number\">12</span>,\n<span class=\"lineNumber\">10</span>    circleOneStroke = <span class=\"hljs-string\">'#eee'</span>,\n<span class=\"lineNumber\">11</span>    circleTwoStroke = <span class=\"hljs-string\">'purple'</span>,\n<span class=\"lineNumber\">12</span>  } = props;\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">const</span> center = size / <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">const</span> radiu = center - stokenW / <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-keyword\">const</span> circumference = <span class=\"hljs-number\">2</span> * <span class=\"hljs-built_in\">Math</span>.PI * radiu;\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-keyword\">const</span> [offset, setOffset] = useState(<span class=\"hljs-number\">0</span>);\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-keyword\">const</span> svgRef = useRef();\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-keyword\">const</span> oldProgress = useRef(progress);\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-keyword\">const</span> [time, setTime] = useState(<span class=\"hljs-number\">1</span>);\n<span class=\"lineNumber\">20</span> \n<span class=\"lineNumber\">21</span>  useEffect(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">22</span>    <span class=\"hljs-keyword\">const</span> newTime = <span class=\"hljs-built_in\">Math</span>.abs(oldProgress.current - progress);\n<span class=\"lineNumber\">23</span>    oldProgress.current = progress;\n<span class=\"lineNumber\">24</span>    setTime(<span class=\"hljs-number\">12</span> * (<span class=\"hljs-number\">100</span> - newTime));\n<span class=\"lineNumber\">25</span>  }, [progress]);\n<span class=\"lineNumber\">26</span>  \n<span class=\"lineNumber\">27</span>  useEffect(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">const</span> progressOffset = ((<span class=\"hljs-number\">100</span> - progress) / <span class=\"hljs-number\">100</span>) * circumference; <span class=\"hljs-comment\">// 百分比乘以圆周，等于当前百分比对应的显示部分值</span>\n<span class=\"lineNumber\">29</span>    setOffset(progressOffset);\n<span class=\"lineNumber\">30</span>    svgRef.current.style = <span class=\"hljs-string\">`transition: stroke-dashoffset <span class=\"hljs-subst\">${time}</span>ms ease-in-out;`</span>;\n<span class=\"lineNumber\">31</span>  }, [progress]);\n<span class=\"lineNumber\">32</span> \n<span class=\"lineNumber\">33</span>  <span class=\"hljs-keyword\">return</span> (\n<span class=\"lineNumber\">34</span>    <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Box</span>></span>\n<span class=\"lineNumber\">35</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg\"</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">{size}</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">{size}</span>></span>\n<span class=\"lineNumber\">36</span>        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">circle</span>\n<span class=\"lineNumber\">37</span>          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg-circle-bg\"</span>\n<span class=\"lineNumber\">38</span>          <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">{circleOneStroke}</span>\n<span class=\"lineNumber\">39</span>          <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">{center}</span>  // 圆心 <span class=\"hljs-attr\">x</span>\n<span class=\"lineNumber\">40</span>          <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">{center}</span>  // 圆心 <span class=\"hljs-attr\">y</span>\n<span class=\"lineNumber\">41</span>          <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{radiu}</span>    // 半径\n<span class=\"lineNumber\">42</span>          <span class=\"hljs-attr\">strokeWidth</span>=<span class=\"hljs-string\">{stokenW}</span>  // 描边宽度，边线是描边的中心\n<span class=\"lineNumber\">43</span>        /></span>\n<span class=\"lineNumber\">44</span>        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">circle</span>\n<span class=\"lineNumber\">45</span>          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg-circle\"</span>\n<span class=\"lineNumber\">46</span>          <span class=\"hljs-attr\">stroke</span>=<span class=\"hljs-string\">{circleTwoStroke}</span>\n<span class=\"lineNumber\">47</span>          <span class=\"hljs-attr\">cx</span>=<span class=\"hljs-string\">{center}</span>\n<span class=\"lineNumber\">48</span>          <span class=\"hljs-attr\">cy</span>=<span class=\"hljs-string\">{center}</span>\n<span class=\"lineNumber\">49</span>          <span class=\"hljs-attr\">r</span>=<span class=\"hljs-string\">{radiu}</span>\n<span class=\"lineNumber\">50</span>          <span class=\"hljs-attr\">strokeWidth</span>=<span class=\"hljs-string\">{stokenW}</span>\n<span class=\"lineNumber\">51</span>          <span class=\"hljs-attr\">strokeDasharray</span>=<span class=\"hljs-string\">{circumference}</span>\n<span class=\"lineNumber\">52</span>          <span class=\"hljs-attr\">strokeDashoffset</span>=<span class=\"hljs-string\">{offset}</span>\n<span class=\"lineNumber\">53</span>          <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{svgRef}</span>\n<span class=\"lineNumber\">54</span>        /></span>\n<span class=\"lineNumber\">55</span>        <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">text</span>\n<span class=\"lineNumber\">56</span>          <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"svg-circle-text\"</span>\n<span class=\"lineNumber\">57</span>          <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">{center}</span>\n<span class=\"lineNumber\">58</span>          <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">{center}</span>\n<span class=\"lineNumber\">59</span>          <span class=\"hljs-attr\">dominantBaseline</span>=<span class=\"hljs-string\">\"middle\"</span>\n<span class=\"lineNumber\">60</span>        ></span>\n<span class=\"lineNumber\">61</span>          {progress}%\n<span class=\"lineNumber\">62</span>        <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">text</span>></span>\n<span class=\"lineNumber\">63</span>      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">svg</span>></span>\n<span class=\"lineNumber\">64</span>    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">Box</span>></span></span>\n<span class=\"lineNumber\">65</span>  );\n<span class=\"lineNumber\">66</span>}\n<span class=\"lineNumber\">67</span></code></pre> \n\n<p>眼皮上下互博了，这个组件还有很多可以优化的地方。现在，父组件传递过来的<code>progress</code>百分比值的改动将会创建一个描边偏移的动画，在另外的场景下也许不需要这个动画，而是根据<code>progress</code>的值来动态调整偏移即可，因此说这个组件依然有很多值得优化的地方。</p>\n<h2>3. 碎碎念</h2>\n<p>上次写分享是什么时候了？本篇内容比较初级，因此只在这里发布😂。</p>\n<p>anyway - 我做过很多半途而废的事情，不希望写分享这件事变成其中之一。</p>\n<p>先这样吧，睡觉😴。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://blog.logrocket.com/how-to-build-an-svg-circular-progress-component-using-react-and-react-hooks/\">How to build an SVG circular progress component using React and React Hooks - LogRocket Blog</a></li>\n<li><a href=\"https://github.com/youyiqin/react-progress\">youyiqin/react-progress</a> 源代码</li>\n</ul>\n","title":"使用react和svg创建圆环进度条","date":"2021/9/10","tags":["React"],"mainImg":"https://images.unsplash.com/photo-1569396116180-210c182bedb8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzEyMDQxMjc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569396116180-210c182bedb8?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzEyMDQxMjc&ixlib=rb-1.2.1&q=80&w=400","intro":"前段时间刚好接触一个设计页面需要用到圆形进度环，当时使用的是谷歌的 material-ui 的圆形进度条，为了实现设计图的效果需要对库组件进行修改，于是搜索了关于圆形进度条的实现，学了一手。"}},"__N_SSG":true}