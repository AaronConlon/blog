{"pageProps":{"post":{"slug":"javascript之对象转换","contentHtml":"<p>在机缘巧合之下,我看到了国外大神<code>Dr.Axel Rauschmayer</code>的博客:<a href=\"https://2ality.com/index.html\">2ality – JavaScript and more</a>,其中一篇文章针对<code>类型转换</code>这个问题作了分享,本着求知的想法我静下心阅读了此文,所得所想记录于此.</p>\n<p><strong>2021年03月22日18:52:54</strong></p>\n<h2>1. 起始</h2>\n<p><code>JavaScript</code> 是优秀的动态语言,数据类型的转换在日常编程开发中十分常见.本文将结合一些实际问题和个人疑惑对<code>类型转换</code>进行学习和解析,尽量从<code>ECMAScript规范</code>出发,学习类型转换的设计理念和实现逻辑.</p>\n<blockquote>\n<p>如果喜欢,不妨亲自阅读 <a href=\"https://tc39.es/ecma262/multipage/\">ECMAScript® 2022 Language Specification</a></p>\n</blockquote>\n<h2>2. 何为类型转换?</h2>\n<p>首先我们要明确<code>JavaScript</code>数据分为:</p>\n<ul>\n<li>原始数据类型(primitive)\n<ul>\n<li>undefined</li>\n<li>null</li>\n<li>string</li>\n<li>number</li>\n<li>biginit</li>\n<li>boolean</li>\n<li>symbol</li>\n</ul>\n</li>\n<li>对象</li>\n</ul>\n<p>看看这一行代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'3'</span>) * <span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'2'</span>)</code></pre> \n\n<p>两个数字之间使用乘法操作符相乘,数字类型是明确的从字符串通过<code>Number()</code>函数<code>显式</code>转过来的.</p>\n<p>字符串之间<code>\"不能\"</code>直接执行乘法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-string\">'a'</span> * <span class=\"hljs-string\">'b'</span> <span class=\"hljs-comment\">// NaN</span></code></pre> \n\n<p>也许你会举出如下可行的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-string\">'1'</span> * <span class=\"hljs-string\">'2'</span> <span class=\"hljs-comment\">// 2</span></code></pre> \n\n<p>此时,字符串之间的乘法得出了我们想要的结果.究其实质是因为解释器对字符串进行了<code>隐式类型转换(coercion)</code>.</p>\n<p>JavaScript 语言初期并没有设计异常捕获(<code>exceptions</code>),这也是为什么你会看到现今解释器对如下代码的解释.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// 1</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// Infinity , 很明显, 0 作为分母是错误的,但是解释器最后的值是 Infinity</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">Number</span>(<span class=\"hljs-string\">'a'</span>) <span class=\"hljs-comment\">// NaN </span></code></pre> \n\n<p>为了实现兼容,<code>ECMAScript</code>不得不\"允许\"这部分错误的设计继续存在.但是,对于一些相对较新的特性来说,修复了这个错误的设计.</p>\n<p>例如:</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"lineNumber\">1</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-built_in\">Symbol</span>() <span class=\"hljs-comment\">// except error: can not cover a symbol value to a number</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2n</span> <span class=\"hljs-comment\">// except error: can not mix BigInt and other types,use explicit conversions</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-number\">1</span>() <span class=\"hljs-comment\">// except error: 1 is not a function</span>\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// except error: 1 is not a constructor</span>\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-string\">'ab'</span>.length = <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 只读属性不可改</span></code></pre> \n\n<h2>3. ECMAScript 规范是如何定义类型转换的?</h2>\n<p>先来看看如下一个使用<code>Typescript</code>编写的函数:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>如上所示,此函数的两个参数的类型都是<code>number</code>,在转译为<code>JavaScript</code>的过程中,转译器做了什么?</p>\n<p>为了在转译后保证参数类型正确,其过程简述为如下代码:</p>\n<pre><code class=\"hljs language-JavaScript\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">multiply</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> _a = ToNumberic(a);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">let</span> _b = ToNumberic(b);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">/// ...</span>\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<h3>3.1 转换为原始数据类型或对象</h3>\n<p>当语句需要执行隐式转换的时候,如下<code>抽象操作</code>函数将目标数据转换为预期的原始数据类型或者<code>Object</code>:</p>\n<ul>\n<li>ToBoolean()</li>\n<li>ToNumber()</li>\n<li>ToBumeric(), 兼顾 number 和 BigInt</li>\n<li>ToBigInt()</li>\n<li>ToString()</li>\n<li>ToObject()</li>\n</ul>\n<blockquote>\n<p><a href=\"https://tc39.es/ecma262/#sec-abstract-operations\">抽象操作</a>是在ECMAScript规范中定义的函数,它们的定义是为了简洁地编写规范.JavaScript引擎不必将它们作为单独的函数在引擎中实现.不能直接从JavaScript调用它们.但是引擎实现了类似<code>Number()</code>这样的显示转换函数.</p>\n</blockquote>\n<h3>3.2 转换为数字类型</h3>\n<p>对于需要被隐式转化为<code>numeric</code>类型数据的值来说,将会用到<code>ToNumeric</code>抽象操作.转换的结果可能是<code>number</code>类型或者<code>BigInt</code>类型.</p>\n<p>如若需要将<code>x</code>转换为整形,则使用抽象操作<code>ToInteger</code>.在使用<code>位操作</code>的时候执行的隐式转换则视情形使用抽象操作<code>ToInt32</code>或者<code>ToUint32</code>.</p>\n<p>例如:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-string\">'1'</span> >> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// 使用 ToInt32 抽象方法转为 32 位整数</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-number\">2</span> >> <span class=\"hljs-string\">'1'</span> <span class=\"hljs-comment\">// 使用 ToUint32 抽象方法转为无符号 32 位整数</span>\n<span class=\"lineNumber\">3</span>-<span class=\"hljs-number\">2</span> >>> <span class=\"hljs-number\">0</span> <span class=\"hljs-comment\">// -2 的二进制表示属于有符号数,因此需要 ToUint32 转换,最后结果是 4294967294</span></code></pre> \n\n<p>更多细则如下表所示:</p>\n<p>| operand        | left operand | right operand | result   |\n| :------------- | :----------- | :------------ | :------- |\n| <code>&#x3C;&#x3C;</code>           | <code>ToInt32()</code>  | <code>ToUint32()</code>  | <code>Int32</code>  |\n| signed <code>>></code>    | <code>ToInt32()</code>  | <code>ToUint32()</code>  | <code>Int32</code>  |\n| unsigned <code>>>></code> | <code>ToInt32()</code>  | <code>ToUint32()</code>  | <code>Uint32</code> |\n| <code>&#x26;</code>, <code>^</code>, <code>|</code>  | <code>ToInt32()</code>  | <code>ToUint32()</code>  | <code>Int32</code>  |\n| <code>~</code>            | —            | <code>ToInt32()</code>   | <code>Int32</code>  |</p>\n<h3>3.3 转换为属性<code>keys</code>属性</h3>\n<p>抽象操作<code>ToPropertyKey</code>返回一个字符串或者<code>Symbol</code>,常用于:</p>\n<ul>\n<li>括号操作</li>\n<li>对象字面量的计算属性</li>\n<li>in 操作符的<code>left-hand side</code>,用于判定<code>in</code> 的结果</li>\n<li>Object 的几个需要访问<code>value</code>和遍历<code>key</code>相关的函数\n<ul>\n<li>Object.fromEntries</li>\n<li>Object.defineProperty</li>\n<li>Object.getOwnPropertyDescriptor</li>\n<li>Object.prototype.hasOwnProperty</li>\n<li>Object.prototype.propertyIsEnumerable</li>\n</ul>\n</li>\n<li>Reflect 对象的相关方法</li>\n</ul>\n<h3>3.4 转换为数组索引(Array indices)</h3>\n<ul>\n<li><code>ToLength()</code> 主要用于字符串索引计算\n<ul>\n<li>此抽象方法是<code>ToIndex</code>抽象方法的辅助方法</li>\n<li>其值范围是0 ≤ ? ≤ Math.MAX_SAVE_INTEGER</li>\n</ul>\n</li>\n<li><code>ToIndex()</code> 主要用于类数组索引计算\n<ul>\n<li>与 ToLength 主要区别在于,此抽象方法在索引越界的时候抛出异常</li>\n<li>其值范围是0 ≤ ? ≤ Math.MAX_SAVE_INTEGER</li>\n</ul>\n</li>\n<li><code>ToUint32()</code> 用于数组索引计算\n<ul>\n<li>其值范围是0 ≤ ? &#x3C; 2^32-1</li>\n</ul>\n</li>\n</ul>\n<h3>3.5 转换为类数组对象的元素</h3>\n<p>如果你要为<code>类数组</code>对象的某个元素设置值,将可能使用如下的抽象方法:</p>\n<ul>\n<li><code>ToInt8()</code></li>\n<li><code>ToUint8()</code></li>\n<li><code>ToUint8Clamp()</code></li>\n<li><code>ToInt16()</code></li>\n<li><code>ToUint16()</code></li>\n<li><code>ToInt32()</code></li>\n<li><code>ToUint32()</code></li>\n<li><code>ToBigInt64()</code></li>\n<li><code>ToBigUint64()</code></li>\n</ul>\n<p>例如:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> uint16 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Int16Array</span>;\n<span class=\"lineNumber\">2</span>uint16 = <span class=\"hljs-built_in\">Int16Array</span>.from(<span class=\"hljs-string\">'12345'</span>);\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-built_in\">console</span>.log(uint16);\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">// expected output: Int16Array [1, 2, 3, 4, 5]</span></code></pre> \n\n<p>此处的字符串<code>12345</code>在 <code>from</code>函数内部进行迭代,并且进行隐式的类型转换,最终为<code>Int16Array</code>对象设置了 5 个元素值.</p>\n<h2>4. ECMAScript 规范示例解读</h2>\n<p><code>ECMAScript</code>规范明确提供了<code>JavaScript</code>的所有实现算法详细设计.大多数的<code>抽象方法</code>并没有在<code>JavaScript </code>引擎中实现,但是依然有少数抽象方法可以近乎理解为<code>JavaScript</code>引擎中对应的部分函数实现.举个例子,如下内容是<code>ECMAScript</code>规范的一部分:</p>\n<p><strong>The <code>typeof</code> Operator</strong></p>\n<ol>\n<li>\n<p>Let val be the result of evaluating <a href=\"https://tc39.es/ecma262/#prod-UnaryExpression\">UnaryExpression</a>. 让 val 作为评估此一元表达式的结果.</p>\n</li>\n<li>\n<p>If val is a <a href=\"https://tc39.es/ecma262/#sec-reference-record-specification-type\">Reference Record</a>, then</p>\n<p>a. If <a href=\"https://tc39.es/ecma262/#sec-isunresolvablereference\">IsUnresolvableReference</a>(val) is true, return \"undefined\". 如果这个值是一个引用记录(仅存于规范中的类型),并且是一个不可解析的引用(比如声明却未初始化的变量),则返回 <code>undefined</code>.</p>\n</li>\n<li>\n<p>Set val to ? <a href=\"https://tc39.es/ecma262/#sec-getvalue\">GetValue</a>(val). 令 val 等于 GetValue(val) 抽象操作的结果.如有异常则抛出.</p>\n</li>\n<li>\n<p>Return a String according to <a href=\"https://tc39.es/ecma262/#table-typeof-operator-results\">Table 38</a>. 按<code>val</code>的类型选择下表中一个字符串结果.</p>\n</li>\n</ol>\n<h5 style=\"text-align:center\">Table 38: typeof Operator Results</h5>\n<p>| Type of val                                                  | Result      |\n| ------------------------------------------------------------ | ----------- |\n| Undefined                                                    | \"undefined\" |\n| Null                                                         | \"object\"    |\n| Boolean                                                      | \"boolean\"   |\n| Number                                                       | \"number\"    |\n| String                                                       | \"string\"    |\n| Symbol                                                       | \"symbol\"    |\n| BigInt                                                       | \"bigint\"    |\n| Object (does not implement [[Call]]) <code>不可调用的对象返回 object</code> | \"object\"    |\n| Object (implements [[Call]])                                 | \"function\"  |</p>\n<blockquote>\n<p>ECMAScript 规范中为了方便描述算法和设计逻辑,设定了很多抽象操作和规范中的类型,定义了许多简写方式,类似: ? 和 ! 等.</p>\n</blockquote>\n<h2>5. 隐式转换抽象方法示例</h2>\n<h3>5.1 ToPrimitive()</h3>\n<p>这个抽象方法在许多隐式转换算法中被使用到,它可以把任意值转换为原始类型值.由于许多操作只接受原始类型数据(或最终将使用原始类型数据),此抽象方法在<code>ECMAScript</code>规范中被广泛调用.</p>\n<p>接下来我们来看看一个 JavaScript 版本的 <code>ToPrimitive</code>函数.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ToPrimitive</span>(<span class=\"hljs-params\">input: any, hint: <span class=\"hljs-string\">'default'</span> | <span class=\"hljs-string\">'string'</span> | <span class=\"hljs-string\">'number'</span> = <span class=\"hljs-string\">'default'</span></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (Typeof(input) === <span class=\"hljs-string\">'object'</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">let</span> exoticToPrim = input[<span class=\"hljs-built_in\">Symbol</span>.toPrimitive];\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">if</span> (exoticToPrim !== <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-keyword\">let</span> result = exoticToPrim.call(input, hint);\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">Typeof(result) !== <span class=\"hljs-string\">'object'</span></span>)</span> {\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-keyword\">return</span> result;\n<span class=\"lineNumber\">8</span>      }\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">10</span>    }\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">if</span> (hint === <span class=\"hljs-string\">'default'</span>) {\n<span class=\"lineNumber\">12</span>      hint = <span class=\"hljs-string\">'number'</span>\n<span class=\"lineNumber\">13</span>    }\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> OrdinaryToPrimitive(input, hint);\n<span class=\"lineNumber\">15</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-comment\">// input 是原始数据类型</span>\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">return</span> input\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span>}</code></pre> \n\n<p>要理解这个函数,需要了解一些前置知识.</p>\n<p>首先, <code>hint</code>参数表示要转换到原始值的预期类型,默认是<code>number</code>.</p>\n<p>.其次,此函数的目的是为了将某个值转为原始类型数据,如此一来对于本身就是原始类型的数据来说直接返回即可.</p>\n<p>对于对象来说,则需要检查此对象是否重写了<code>Symbol.toPrimitive</code>方法.</p>\n<blockquote>\n<p><code>Symbol.toPrimitive</code> 是一个内置的 Symbol 值，它是作为对象的函数值属性存在的，当一个对象转换为对应的原始值时，会调用此函数。</p>\n</blockquote>\n<p>如果目标对象重写了方法,则将<code>hint</code>和<code>input</code>作为参数按重写的逻辑进行转换,出现异常则抛出.</p>\n<p>如果此对象没有<code>Symbol.toPrimitive</code>函数,则按常规抽象方法<a href=\"https://tc39.es/ecma262/#sec-ordinarytoprimitive\">OrdinaryToPrimitive</a>进行转换.</p>\n<p>接下来看看 <code>OrdinaryToPrimitive</code>的 JavaScript 函数可以如何实现.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">OrdinaryToPrimitive</span>(<span class=\"hljs-params\">O: object, hint: <span class=\"hljs-string\">'string'</span> | <span class=\"hljs-string\">'number'</span></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> methodNames;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span> (hint === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">4</span>    methodNames = [<span class=\"hljs-string\">'toString'</span>, <span class=\"hljs-string\">'valueOf'</span>];\n<span class=\"lineNumber\">5</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">6</span>    methodNames = [<span class=\"hljs-string\">'valueOf'</span>, <span class=\"hljs-string\">'toString'</span>];\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> name <span class=\"hljs-keyword\">of</span> methodNames) {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">let</span> method = O[name];\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">if</span> (IsCallable(method)) {\n<span class=\"lineNumber\">11</span>      <span class=\"hljs-keyword\">let</span> result = method.call(O);\n<span class=\"lineNumber\">12</span>      <span class=\"hljs-keyword\">if</span> (TypeOf(result) !== <span class=\"hljs-string\">'object'</span>) {\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-keyword\">return</span> result;\n<span class=\"lineNumber\">14</span>      }\n<span class=\"lineNumber\">15</span>    }\n<span class=\"lineNumber\">16</span>  }\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">18</span>}</code></pre> \n\n<p>👆上面的代码用到了属性 <code>key</code> 值,上述三个关键的属性 <code>key</code>在原始类型转换的时候用得很多.分别是:</p>\n<ul>\n<li>toString</li>\n<li>valueOf</li>\n<li>Symbol.toPrimitive(默认只有 Symbol 和 Date 对象有此方法)</li>\n</ul>\n<p>从<code>hint</code>参数可知, 期望转换结果类型和调用的对象方法有直接关系.所以,标准库中<code>Number()</code>和<code>String()</code>函数在实现上都是按抽象方法<code>ToPrimitive</code>去执行,且设置<code>hint</code>为<code>number</code>或者<code>string</code>.</p>\n<p><strong>那么, 何种情况下使用哪一个<code>hint</code>值呢?</strong></p>\n<p>在隐式转换的时候,设定<code>hint</code>为<code>number</code>的情况有以下几个抽象方法:</p>\n<ul>\n<li>toNumeric</li>\n<li>toNumber</li>\n<li>toBigInt / BigInt</li>\n<li>&#x3C; 或者 > 抽象关系比较</li>\n</ul>\n<p>设定<code>hint</code>为<code>string</code>的则是:</p>\n<ul>\n<li>toString</li>\n<li>toPropertyKey</li>\n</ul>\n<p>最后则是<code>hint</code>为<code>default</code>:</p>\n<ul>\n<li>抽象相等性比较( == )</li>\n<li>加操作(+)</li>\n<li>new Date(value), value 可以是字符串或者 number</li>\n</ul>\n<p>但我们可以发现,<code>default</code>和<code>number</code>作为<code>hint</code>的值时,几乎没有差别,二者可以视为一致.</p>\n<p>在标准库中,只有<code>Date</code>和<code>Symbol</code>的实例重写了它们的默认行为.</p>\n<p>让我们来看看<code>Date</code>是如何重写的:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Date</span>.prototype[<span class=\"hljs-built_in\">Symbol</span>.toPrimitive] = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">\n<span class=\"lineNumber\">2</span>  hint: <span class=\"hljs-string\">'default'</span> | <span class=\"hljs-string\">'string'</span> | <span class=\"hljs-string\">'number'</span></span>) </span>{\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">let</span> O = <span class=\"hljs-built_in\">this</span>;\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">if</span> (TypeOf(O) !== <span class=\"hljs-string\">'object'</span>) {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">6</span>    }\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">let</span> tryFirst;\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">if</span> (hint === <span class=\"hljs-string\">'string'</span> || hint === <span class=\"hljs-string\">'default'</span>) {\n<span class=\"lineNumber\">9</span>      tryFirst = <span class=\"hljs-string\">'string'</span>;\n<span class=\"lineNumber\">10</span>    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (hint === <span class=\"hljs-string\">'number'</span>) {\n<span class=\"lineNumber\">11</span>      tryFirst = <span class=\"hljs-string\">'number'</span>;\n<span class=\"lineNumber\">12</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">13</span>      <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">14</span>    }\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">return</span> OrdinaryToPrimitive(O, tryFirst);\n<span class=\"lineNumber\">16</span>  };</code></pre> \n\n<p><code>tryFirst</code>首选项设置成了<code>string</code>,而不是默认的<code>default</code>等同于<code>number</code>,在日常的开发中我们也可以看到如下示例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> d = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(<span class=\"hljs-string\">'2222-03-27'</span>)\n<span class=\"lineNumber\">2</span>d == <span class=\"hljs-string\">'Wed Mar 27 2222 08:00:00 GMT+0800 (中国标准时间)'</span> <span class=\"hljs-comment\">// true</span>\n<span class=\"lineNumber\">3</span>> <span class=\"hljs-number\">1</span> + d <span class=\"hljs-comment\">// '1Wed Mar 27 2222 08:00:00 GMT+0800 (中国标准时间)'</span></code></pre> \n\n<p>日期示例同时具有<code>toString()</code>和<code>valueOf()</code>方法,于此可以理解其重写逻辑是偏向<code>string</code>的.</p>\n<h3>5.2 ToString()</h3>\n<p>接下来我们来看看<code>toString()</code>方法的<code>JavaScript</code>版本实现:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ToString</span>(<span class=\"hljs-params\">argument</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'undefined'</span>;\n<span class=\"lineNumber\">4</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'null'</span>;\n<span class=\"lineNumber\">6</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">true</span>) {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'true'</span>;\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">false</span>) {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'false'</span>;\n<span class=\"lineNumber\">10</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'number'</span>) {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Number</span>.toString(argument);\n<span class=\"lineNumber\">12</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">return</span> argument;\n<span class=\"lineNumber\">14</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'symbol'</span>) {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">16</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'bigint'</span>) {\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">return</span> BigInt.toString(argument);\n<span class=\"lineNumber\">18</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-comment\">// argument is an object</span>\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-keyword\">let</span> primValue = ToPrimitive(argument, <span class=\"hljs-string\">'string'</span>); <span class=\"hljs-comment\">// (A)</span>\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> ToString(primValue);\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<p>简洁明了, 在将原始值转换为<code>string</code>的中间,使用了<code>ToPrimitive</code>函数作为过渡.并且对于各种<code>type</code>的值有不同的处理.需要注意的是,对于<code>Symbol</code>是抛出异常.但这并不意味着<code>Symbol</code>对象无法转换为<code>string</code>.</p>\n<p><code>Symbol.prototype.toString()</code>和<code>String()</code>都被重写了.我们不妨看看如下示例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>> <span class=\"hljs-keyword\">const</span> sym = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">'sym'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">3</span>> <span class=\"hljs-string\">''</span>+sym\n<span class=\"lineNumber\">4</span>Uncaught <span class=\"hljs-built_in\">TypeError</span>: Cannot convert a <span class=\"hljs-built_in\">Symbol</span> value to a string\n<span class=\"lineNumber\">5</span>> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${sym}</span>`</span>\n<span class=\"lineNumber\">6</span>Uncaught <span class=\"hljs-built_in\">TypeError</span>: Cannot convert a <span class=\"hljs-built_in\">Symbol</span> value to a string</code></pre> \n\n<p>隐式转换和模板字符串都会抛出异常.但是显示转换和调用<code>toString</code>方法都可以执行.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>> <span class=\"hljs-built_in\">String</span>(sym)\n<span class=\"lineNumber\">2</span><span class=\"hljs-string\">'Symbol(sym)'</span>\n<span class=\"lineNumber\">3</span>> sym.toString()\n<span class=\"lineNumber\">4</span><span class=\"hljs-string\">'Symbol(sym)'</span></code></pre> \n\n<blockquote>\n<p>由此看来,<code>Symbol</code>实例的这两个方法确实与众不同.</p>\n</blockquote>\n<p><strong>让我们将目光转到<code>String()</code>和<code>Symbol.prototype.toString()</code>的实现逻辑:</strong></p>\n<ul>\n<li><code>String()</code></li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">String</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> s;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">4</span>    s = <span class=\"hljs-string\">''</span>;\n<span class=\"lineNumber\">5</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-comment\">// new.target: 检测是否通过 new 实例化,如果不是则为 undefined,是则指向构造方法或函数</span>\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">new</span>.target === <span class=\"hljs-literal\">undefined</span> &#x26;&#x26; TypeOf(value) === <span class=\"hljs-string\">'symbol'</span>) {\n<span class=\"lineNumber\">8</span>      <span class=\"hljs-comment\">// 如果 value 是 symbol,并且不是通过 new String 调用,则返回 Symbol 的描述符函数执行结果</span>\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-keyword\">return</span> SymbolDescriptiveString(value);\n<span class=\"lineNumber\">10</span>    }\n<span class=\"lineNumber\">11</span>    s = ToString(value);\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">new</span>.target === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-comment\">// Function call</span>\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">return</span> s;\n<span class=\"lineNumber\">16</span>  }\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-comment\">// New call</span>\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-keyword\">return</span> StringCreate(s, <span class=\"hljs-keyword\">new</span>.target.prototype); <span class=\"hljs-comment\">// simplified!</span>\n<span class=\"lineNumber\">19</span>}\n<span class=\"lineNumber\">20</span> \n<span class=\"lineNumber\">21</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">StringCreate</span>(<span class=\"hljs-params\">value, prototype</span>) </span>{\n<span class=\"lineNumber\">22</span>  <span class=\"hljs-comment\">// Create a new String instance that has the given prototype</span>\n<span class=\"lineNumber\">23</span>}\n<span class=\"lineNumber\">24</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">SymbolDescriptiveString</span>(<span class=\"hljs-params\">sym</span>) </span>{\n<span class=\"lineNumber\">25</span>  assert.equal(TypeOf(sym), <span class=\"hljs-string\">'symbol'</span>);\n<span class=\"lineNumber\">26</span>  <span class=\"hljs-keyword\">let</span> desc = sym.description;\n<span class=\"lineNumber\">27</span>  <span class=\"hljs-keyword\">if</span> (desc === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">28</span>    desc = <span class=\"hljs-string\">''</span>;\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span>  assert.equal(TypeOf(desc), <span class=\"hljs-string\">'string'</span>);\n<span class=\"lineNumber\">31</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'Symbol('</span>+desc+<span class=\"hljs-string\">')'</span>;\n<span class=\"lineNumber\">32</span>}</code></pre> \n\n<p>我们知道,<code>String</code>可以直接调用,也可以使用<code>new</code>实例化一个<code>string object</code>.</p>\n<blockquote>\n<p>new String(1) // 实例化结果是一个对象,而不是 string 类型值,可以使用 <code>valueOf</code>方法获取其 string 类型值.字面量定义的字符串在使用的时候看起来似乎拥有<code>String</code>实例的方法,其实质是先转为<code>String</code>实例,再调用方法.详情可见:<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String#%E5%9F%BA%E6%9C%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB\">基本字符串和字符串对象的区别.</a></p>\n</blockquote>\n<p>如上所示,<code>String</code>构造函数将<code>Symbol</code>单独拎出来处理,针对<code>Symbol</code>返回其描述符字符串.</p>\n<ul>\n<li><code>Symbol.prototype.toString()</code></li>\n</ul>\n<p><code>Symbol</code>也可以直接使用<code>ToString</code>方法转换为字符串,其实现逻辑大致如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Symbol</span>.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> sym = thisSymbolValue(<span class=\"hljs-built_in\">this</span>);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> SymbolDescriptiveString(sym);\n<span class=\"lineNumber\">4</span>};\n<span class=\"lineNumber\">5</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">thisSymbolValue</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(value) === <span class=\"hljs-string\">'symbol'</span>) {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">return</span> value;\n<span class=\"lineNumber\">8</span>  }\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(value) === <span class=\"hljs-string\">'object'</span> &#x26;&#x26; <span class=\"hljs-string\">'__SymbolData__'</span> <span class=\"hljs-keyword\">in</span> value) {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">let</span> s = value.__SymbolData__;\n<span class=\"lineNumber\">11</span>    assert.equal(TypeOf(s), <span class=\"hljs-string\">'symbol'</span>);\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> s;\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<blockquote>\n<p><a href=\"https://tc39.es/ecma262/#sec-object.prototype.tostring\">官方描述: ECMAScript® 2022 Language Specification - Object.prototype.toString</a></p>\n</blockquote>\n<p><code>Object.prototype.toString</code>的实现规范用代码来描述:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Object</span>.prototype.toString = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'[object Undefined]'</span>;\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> === <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'[object Null]'</span>;\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-keyword\">let</span> O = ToObject(<span class=\"hljs-built_in\">this</span>);\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">let</span> isArray = <span class=\"hljs-built_in\">Array</span>.isArray(O);\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">let</span> builtinTag;\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">if</span> (isArray) {\n<span class=\"lineNumber\">12</span>    builtinTag = <span class=\"hljs-string\">'Array'</span>;\n<span class=\"lineNumber\">13</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__ParameterMap__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">14</span>    builtinTag = <span class=\"hljs-string\">'Arguments'</span>;\n<span class=\"lineNumber\">15</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__Call__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">16</span>    builtinTag = <span class=\"hljs-string\">'Function'</span>;\n<span class=\"lineNumber\">17</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__ErrorData__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">18</span>    builtinTag = <span class=\"hljs-string\">'Error'</span>;\n<span class=\"lineNumber\">19</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__BooleanData__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">20</span>    builtinTag = <span class=\"hljs-string\">'Boolean'</span>;\n<span class=\"lineNumber\">21</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__NumberData__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">22</span>    builtinTag = <span class=\"hljs-string\">'Number'</span>;\n<span class=\"lineNumber\">23</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__StringData__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">24</span>    builtinTag = <span class=\"hljs-string\">'String'</span>;\n<span class=\"lineNumber\">25</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__DateValue__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">26</span>    builtinTag = <span class=\"hljs-string\">'Date'</span>;\n<span class=\"lineNumber\">27</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">'__RegExpMatcher__'</span> <span class=\"hljs-keyword\">in</span> O) {\n<span class=\"lineNumber\">28</span>    builtinTag = <span class=\"hljs-string\">'RegExp'</span>;\n<span class=\"lineNumber\">29</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">30</span>    builtinTag = <span class=\"hljs-string\">'Object'</span>;\n<span class=\"lineNumber\">31</span>  }\n<span class=\"lineNumber\">32</span>  <span class=\"hljs-keyword\">let</span> tag = O[<span class=\"hljs-built_in\">Symbol</span>.toStringTag];\n<span class=\"lineNumber\">33</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(tag) !== <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">34</span>    tag = builtinTag;\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'[object '</span> + tag + <span class=\"hljs-string\">']'</span>;\n<span class=\"lineNumber\">37</span>};</code></pre> \n\n<p>首先将<code>undefined</code>和<code>null</code>进行严格比较判断,然后将之转化为一个<code>Object</code>,再针对其内部<code>插槽属性</code>(如上所示, if else 的双下划线开始和结束的字符串判断条件,就是检查对象内部的<code>插槽属性</code>)定义一个<code>内建标签</code>,最后根据<code>JS 引擎</code>提供的<code>Symbol.toStringTag</code>属性值来设定最终的返回字符串内容.</p>\n<p>如果是自定义的类,可以根据<code>Symbol.toStringTag</code>这个 API 来实现类型检出:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Yo</span> </span>{}\n<span class=\"lineNumber\">2</span>Yo.prototype[<span class=\"hljs-built_in\">Symbol</span>.toStringTag] = <span class=\"hljs-string\">'Yo'</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">String</span>(<span class=\"hljs-keyword\">new</span> Yo()) <span class=\"hljs-comment\">// '[object Yo]'</span></code></pre> \n\n<blockquote>\n<p>开发者可以根据需要重写其实现,但不重写也依然无碍,毕竟有 Object 对象的原型实现兜底.</p>\n</blockquote>\n<h3>5.3 ToPropertyKey()</h3>\n<p><code>ToPropertyKey</code>在规范中常用于括号操作相关的逻辑描述步骤,其工作方式如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ToPropertyKey</span> (<span class=\"hljs-params\">argument</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> key = ToPrimitive(argument, <span class=\"hljs-string\">'string'</span>); <span class=\"hljs-comment\">// 预期值类型为 string</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// 针对 symbol 作为 key 类型的特殊设计</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">TypeOf(key) === <span class=\"hljs-string\">'symbol'</span></span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">return</span> key;\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-keyword\">return</span> ToString(key);\n<span class=\"lineNumber\">8</span>}</code></pre> \n\n<h3>5.4 ToNumeric()</h3>\n<p>当<code>number</code>体系中增加了<code>BigInt</code>之后,此方法也针对<code>BigInt</code>做了设计:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ToNumeric</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> primValue = ToPrimitive(value, <span class=\"hljs-string\">'number'</span>);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(primValue) === <span class=\"hljs-string\">'bigint'</span>) {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> primValue;\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> ToNumber(primValue);\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>如果将其转化为原始数据类型之后是<code>BigInt</code>,则直接返回,否则将使用<code>ToNumber</code>抽象操作:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ToNumber</span>(<span class=\"hljs-params\">argument</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">NaN</span>;\n<span class=\"lineNumber\">4</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">return</span> +<span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">6</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">true</span>) {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (argument === <span class=\"hljs-literal\">false</span>) {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">return</span> +<span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">10</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'number'</span>) {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> argument;\n<span class=\"lineNumber\">12</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">return</span> parseTheString(argument); <span class=\"hljs-comment\">// 此函数略</span>\n<span class=\"lineNumber\">14</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'symbol'</span>) {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>(); <span class=\"hljs-comment\">// symbol 和 bigint 将引发类型错误异常</span>\n<span class=\"lineNumber\">16</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TypeOf(argument) === <span class=\"hljs-string\">'bigint'</span>) {\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">18</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-comment\">// argument is an object</span>\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-keyword\">let</span> primValue = ToPrimitive(argument, <span class=\"hljs-string\">'number'</span>);\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> ToNumber(primValue);\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<p>从上述实现我们可以很清楚理解到日常工作中可能用到的变量类型隐式转换是如何实现的,以及出现<code>TypeError</code>的原因.</p>\n<h2>6. 隐式转换范例</h2>\n<h3>6.1 Addition operator(+)</h3>\n<blockquote>\n<p>此加法运算需要和一元运算符 <code>+</code>区分开来.一元运算符使用的是<code>ToNumber</code>抽象操作.</p>\n</blockquote>\n<p><code>JavaScript</code>中加法运算符的规定代码实现如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Addition</span>(<span class=\"hljs-params\">leftHandSide, rightHandSide</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> lprim = ToPrimitive(leftHandSide);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">let</span> rprim = ToPrimitive(rightHandSide);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(lprim) === <span class=\"hljs-string\">'string'</span> || TypeOf(rprim) === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">return</span> ToString(lprim) + ToString(rprim);\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-keyword\">let</span> lnum = ToNumeric(lprim);\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-keyword\">let</span> rnum = ToNumeric(rprim);\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(lnum) !== TypeOf(rnum)) {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">TypeError</span>();\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-keyword\">let</span> T = Type(lnum);\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">return</span> T.add(lnum, rnum);\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>算法步骤:</p>\n<ul>\n<li>将左右操作数转化为原始数据类型</li>\n<li>如果其中一个是字符串,则都转为字符串</li>\n<li>如果二者的原始数据类型分别是<code>BigInt</code>和<code>Number</code>,则报类型异常错误</li>\n<li>否则执行<code>numeric</code>类型的相加操作.</li>\n</ul>\n<p>示例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>> <span class=\"hljs-number\">1</span> + <span class=\"hljs-number\">2n</span>\n<span class=\"lineNumber\">2</span>Uncaught <span class=\"hljs-built_in\">TypeError</span>: Cannot mix BigInt and other types, use explicit conversions\n<span class=\"lineNumber\">3</span>> <span class=\"hljs-number\">1n</span> + <span class=\"hljs-number\">1n</span>\n<span class=\"lineNumber\">4</span><span class=\"hljs-number\">2n</span>\n<span class=\"lineNumber\">5</span>> [<span class=\"hljs-number\">1</span>] + <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\">// 数组转原始数据类型,优先转 string</span>\n<span class=\"lineNumber\">6</span><span class=\"hljs-string\">'12'</span>\n<span class=\"lineNumber\">7</span>> <span class=\"hljs-number\">1</span> + <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-number\">2</span>\n<span class=\"lineNumber\">9</span>> <span class=\"hljs-number\">1</span> + {}\n<span class=\"lineNumber\">10</span><span class=\"hljs-string\">'1[object Object]'</span></code></pre> \n\n<h3>6.2 Abstract Equality Comparison (==)</h3>\n<p>抽象相等性比较,且允许我如此翻译,其代码实现如下,一些实现细节的体会直接写在注释中.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">/** Loose equality (==) */</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">abstractEqualityComparison</span>(<span class=\"hljs-params\">x, y</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// 对于类型一致的使用严格相等性比较</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === TypeOf(y)) {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// Use strict equality (===)</span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">return</span> strictEqualityComparison(x, y);\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>  <span class=\"hljs-comment\">// Comparing null with undefined</span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-literal\">null</span> &#x26;&#x26; y === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-literal\">undefined</span> &#x26;&#x26; y === <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span> \n<span class=\"lineNumber\">17</span>  <span class=\"hljs-comment\">// Comparing a number and a string</span>\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-comment\">// 有趣的数字和字符串比较,都转为了数字.</span>\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'number'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(x, <span class=\"hljs-built_in\">Number</span>(y));\n<span class=\"lineNumber\">21</span>  }\n<span class=\"lineNumber\">22</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'string'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'number'</span>) {\n<span class=\"lineNumber\">23</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(<span class=\"hljs-built_in\">Number</span>(x), y);\n<span class=\"lineNumber\">24</span>  }\n<span class=\"lineNumber\">25</span> \n<span class=\"lineNumber\">26</span>  <span class=\"hljs-comment\">// Comparing a bigint and a string</span>\n<span class=\"lineNumber\">27</span>  <span class=\"hljs-comment\">// 字符串和 BigInt 的比较,将字符串转为 BigInt</span>\n<span class=\"lineNumber\">28</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'bigint'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'string'</span>) {\n<span class=\"lineNumber\">29</span>    <span class=\"hljs-keyword\">let</span> n = StringToBigInt(y);\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">Number</span>.isNaN(n)) {\n<span class=\"lineNumber\">31</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">32</span>    }\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(x, n);\n<span class=\"lineNumber\">34</span>  }\n<span class=\"lineNumber\">35</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'string'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'bigint'</span>) {\n<span class=\"lineNumber\">36</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(y, x);\n<span class=\"lineNumber\">37</span>  }\n<span class=\"lineNumber\">38</span> \n<span class=\"lineNumber\">39</span>  <span class=\"hljs-comment\">// Comparing a boolean with a non-boolean</span>\n<span class=\"lineNumber\">40</span>  <span class=\"hljs-comment\">// 转为数字进行比较</span>\n<span class=\"lineNumber\">41</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'boolean'</span>) {\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(<span class=\"hljs-built_in\">Number</span>(x), y);\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(y) === <span class=\"hljs-string\">'boolean'</span>) {\n<span class=\"lineNumber\">45</span>    <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(x, <span class=\"hljs-built_in\">Number</span>(y));\n<span class=\"lineNumber\">46</span>  }\n<span class=\"lineNumber\">47</span> \n<span class=\"lineNumber\">48</span>  <span class=\"hljs-comment\">// Comparing an object with a primitive</span>\n<span class=\"lineNumber\">49</span>  <span class=\"hljs-comment\">// (other than undefined, null, a boolean)</span>\n<span class=\"lineNumber\">50</span>  <span class=\"hljs-comment\">// 对象和四大原始数据类型的比较,将对象转为原始数据类型</span>\n<span class=\"lineNumber\">51</span>  <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'number'</span>, <span class=\"hljs-string\">'bigint'</span>, <span class=\"hljs-string\">'symbol'</span>].includes(TypeOf(x))\n<span class=\"lineNumber\">52</span>    &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'object'</span>) {\n<span class=\"lineNumber\">53</span>      <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(x, ToPrimitive(y));\n<span class=\"lineNumber\">54</span>    }\n<span class=\"lineNumber\">55</span>  <span class=\"hljs-keyword\">if</span> (TypeOf(x) === <span class=\"hljs-string\">'object'</span>\n<span class=\"lineNumber\">56</span>    &#x26;&#x26; [<span class=\"hljs-string\">'string'</span>, <span class=\"hljs-string\">'number'</span>, <span class=\"hljs-string\">'bigint'</span>, <span class=\"hljs-string\">'symbol'</span>].includes(TypeOf(y)) {\n<span class=\"lineNumber\">57</span>      <span class=\"hljs-keyword\">return</span> abstractEqualityComparison(ToPrimitive(x), y);\n<span class=\"lineNumber\">58</span>    }\n<span class=\"lineNumber\">59</span>  \n<span class=\"lineNumber\">60</span>  <span class=\"hljs-comment\">// Comparing a bigint with a number</span>\n<span class=\"lineNumber\">61</span>\t<span class=\"hljs-comment\">// bigint 和数字的比较,则判定正负无穷性和 NaN,这几个类型无法比较,一律返回 false</span>\n<span class=\"lineNumber\">62</span>  <span class=\"hljs-keyword\">if</span> ((TypeOf(x) === <span class=\"hljs-string\">'bigint'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'number'</span>)\n<span class=\"lineNumber\">63</span>    || (TypeOf(x) === <span class=\"hljs-string\">'number'</span> &#x26;&#x26; TypeOf(y) === <span class=\"hljs-string\">'bigint'</span>)) {\n<span class=\"lineNumber\">64</span>      <span class=\"hljs-keyword\">if</span> ([<span class=\"hljs-literal\">NaN</span>, +<span class=\"hljs-literal\">Infinity</span>, -<span class=\"hljs-literal\">Infinity</span>].includes(x)\n<span class=\"lineNumber\">65</span>        || [<span class=\"hljs-literal\">NaN</span>, +<span class=\"hljs-literal\">Infinity</span>, -<span class=\"hljs-literal\">Infinity</span>].includes(y)) {\n<span class=\"lineNumber\">66</span>          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">67</span>        }\n<span class=\"lineNumber\">68</span>    \t<span class=\"hljs-comment\">// 否则按数学性值的相等比较, 1 == 1n 为 true</span>\n<span class=\"lineNumber\">69</span>      <span class=\"hljs-keyword\">if</span> (isSameMathematicalValue(x, y)) {\n<span class=\"lineNumber\">70</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">71</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">72</span>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">73</span>      }\n<span class=\"lineNumber\">74</span>    }  \n<span class=\"lineNumber\">75</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">76</span>}</code></pre> \n\n<p>部分抽象操作可以查看<code>ECMAScript 文档</code>.</p>\n<h2>7. 术语补充</h2>\n<p>本文到此即将结束,我们在类型转换的规范描述中经常看到如下几个术语,加深其理解对于我们理解<code>ECMAScript 规范</code>有一定的帮助.</p>\n<ul>\n<li><em>type conversion</em>: 我们希望输出的值具备指定的类型,如果输入已经由类型,通常类型转换只是简单的返回其类型,否则将其值转换为<code>hint</code>预期类型.</li>\n<li><em>Explicit type conversion</em>: 显示类型转换指的是语言方面通过支持一些操作或者函数出发类型转换,类似<code>JavaScript</code>中的<code>Number()/String()/Boolean()</code>等等,显示的类型转换易于阅读和理解,故社区中常有<code>显示大于隐式</code>的说法,其支持者甚多.在<code>JavaScript</code>中显示转换会对值做两种类型的操作:\n<ul>\n<li>Checked: 检查是否可以转换,如果不行则抛出异常</li>\n<li>Unchecked: 返回一个设计性错误的值,如本文开头所述<code>1 / false</code> 返回 <code>Infinity</code>.</li>\n</ul>\n</li>\n<li><em>type casting</em>: 类型定义,类似于<code>Java</code>中,在一个范围内,不可以将不同类型的值赋值给一个变量.按编程语言的设计而定, 其实质是明确的类型检查.</li>\n<li><em>Type coercion</em>: 隐式类型转换, 弱类型语言的特征之一.</li>\n</ul>\n<h2>references</h2>\n<ul>\n<li><a href=\"https://2ality.com/2019/10/type-coercion.html\">Type coercion in JavaScript</a></li>\n<li><a href=\"https://timothygu.me/es-howto/\">How to Read the ECMAScript Specification</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019240609\">怎样阅读 ECMAScript 规范？ - SegmentFault 思否</a></li>\n<li><a href=\"http://www.ruanyifeng.com/blog/2015/11/ecmascript-specification.html\">读懂 ECMAScript 规格 - 阮一峰的网络日志</a></li>\n<li><a href=\"https://sinaad.github.io/xfe/2016/04/15/ToPrimitive/\">js隐式装箱-ToPrimitive | {XFE}</a></li>\n<li><a href=\"http://ldllidonglin.github.io/blog/2020/03/10/2020-03-10-%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E9%98%85%E8%AF%BBECMAScript%E8%A7%84%E8%8C%83(%E4%B8%80)/\">【译】如何阅读ECMAScript规范(一) | 李冬琳的博客</a></li>\n<li><a href=\"https://medium.com/@nikjohn/cast-to-number-in-javascript-using-the-unary-operator-f4ca67c792ce\">Cast to Number in Javascript using the Unary (+) Operator | by Nikhil John | Medium</a></li>\n</ul>\n","title":"javascript语言中的类型转换","date":"2021/3/22","tags":["javascript","tc39"],"mainImg":"https://images.unsplash.com/photo-1472437774355-71ab6752b434?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTY0MTAxMzQ&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1472437774355-71ab6752b434?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTY0MTAxMzQ&ixlib=rb-1.2.1&q=80&w=400","intro":"你好,TC39.请问 JavaScript 世界中的对象转换是如何实现的呢?"}},"__N_SSG":true}