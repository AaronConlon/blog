{"pageProps":{"post":{"slug":"TypeScript-unknown类型示例","content":"\n最近在学习 TypeScript 相关内容，其中对`unknown`类型的应用毫无头绪，今天看到一篇文章[[译] TypeScript 3.0: unknown 类型 - 掘金](https://juejin.cn/post/6844903866073350151)，其中描述了一个示例非常实用，在这里分享一下。\n\n### unknown 类型\n\n`TypeScript`两种顶级类型分别是：\n\n- `any`：任意类型\n- `unknown`：未知类型\n\n通常，我们可以这样用：\n\n```typescript\nlet value: unknown;\n...\n// 1\nvalue = 1;\n// null\nvalue = null;\n// NodeJs.Timer\nvalue = setTimeout(() => {});\n// 等等\n...\n```\n\n当我们将其赋值给其他变量时：\n\n```typescript\nlet value2: string = value; // error \nlet value3: any = value; // ok\nlet value4: unknown = value; // ok\n```\n\n只有同为`unknown`或者`any`可以完成赋值，但是如果要实用此值的话，需要注意：\n\n`编译器不允许对未知类型的值执行任意操作`，当类型未知时，我们便无法调用特定类型的实例方法或属性，但是我们可以通过以下几种方式缩小其类型范围：\n\n```typescript\nfunction stringifyForLogging(value: unknown): string {\n  if (typeof value === \"function\") {\n    // Within this branch, `value` has type `Function`,\n    // so we can access the function's `name` property\n    const functionName = value.name || \"(anonymous)\";\n    return `[function ${functionName}]`;\n  }\n\n  if (value instanceof Date) {\n    // Within this branch, `value` has type `Date`,\n    // so we can call the `toISOString` method\n    return value.toISOString();\n  }\n\n  return String(value);\n}\n```\n\n此外，我们也可以用类型断言来告知编译器此变量的类型。\n\n### unknown 须知\n\n- `unknown` 在联合类型中会吸收任何类型，因此包含 `unknown` 的联合类型相当于 `unknown`，在联合类型中使用 `unknown` 并无多大意义\n- `unknown` 和其他类型交叉时，`unknown` 会被忽略\n\n### unknown 实例\n\n假设一个场景：我们需要使用 `localStorage`中的数据，因此需要编写一个取值并且反序列化的函数：\n\n```type\ntype Result = { success: true, value: unknown } | { success: false, error: Error};\n\nfunction tryDeserializeLocalStorageItem(key: string): Result {\n\tconst item = localStorage.getItem(key);\n\tif(item === null) {\n\treturn {\n\t\t\tsuccess: false,\n\t\t\terror: new Error(`item with key \"${key}\" does not exist`)\n\t\t};\n\t}\n\t// 这里用 unknown 类型就非常合适\n\tlet value: unknown;\n\ttry {\n\t\tvalue = JSON.parse(item);\n\t} catch (error) {\n\t\treturn {\n\t\t\tsuccess: false,\n\t\t\terror\n\t\t}\n\t}\n\t\n\treturn {\n\t\tsuccess: true,\n\t\tvalue\n\t};\n}\n```\n\n\n\n现在，如果想要读取保存到`localStorage`中的数据，可以这样：\n\n```typescript\nconst result = tryDeserializeLocalStorageItem(\"dark_mode\");\n\nif (result.success) {\n  // We've narrowed the `success` property to `true`,\n  // so we can access the `value` property\n  const darkModeEnabled: unknown = result.value;\n\n  if (typeof darkModeEnabled === \"boolean\") {\n    // We've narrowed the `unknown` type to `boolean`,\n    // so we can safely use `darkModeEnabled` as a boolean\n    console.log(\"Dark mode enabled: \" + darkModeEnabled);\n  }\n} else {\n  // We've narrowed the `success` property to `false`,\n  // so we can access the `error` property\n  console.error(result.error);\n}\n```\n\n如此一来，读取本地数据便可以方便地反序列化并且获取可靠的值。\n\n\n\n### 最后\n\n此前，并未有在实际开发中用到`unknown`类型，此示例非常实用，学到了。\n\n周末快乐！\n\n","title":"TypeScript-unknown类型示例","date":"2022/3/6","tags":["TypeScript"],"mainImg":"https://images.unsplash.com/photo-1518818608552-195ed130cdf4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDY1Njg3Nzc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1518818608552-195ed130cdf4?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDY1Njg3Nzc&ixlib=rb-1.2.1&q=80&w=400","intro":"一个应用到 TypeScript 中 unknown 类型的实例分享！"}},"__N_SSG":true}