{"pageProps":{"post":{"slug":"git-workflows使用浅析与心得","content":"\n## 前言\n\n最近面试的时候，面试官提问关于 git 工作流的知识，我答得模棱两可，究其原因不过是因为自己虽然使用过 git，但是每次遇到问题都是直接 google 搜索答案，也不总结记录📝，最后无法在使其进入我的知识体系。\n\n> 感谢面试这个过程，我真的学到很多。\n\n今天就来总结一些常用且有效的 git 工作流知识！\n\n## What's Git?\n\n> 如果连 git 都无法做出一个介绍，那么别人怎么愿意相信你真的对其有一定的了解呢？\n\nGit 是一个开源的`分布式的版本控制系统`。\n\nGit 可以存储数据，大多数情况下 Git 用于存储代码。\n\n存储在 Git 上的代码总是会变化或删改，并且可能由不同的开发者并行进行操作，版本控制系统此时便可以帮助开发者追踪代码变化，维持代码历史记录，并且提供不同的分支和合并机制，让使用者可以在后期进行合并或覆盖。\n\nGit 具有远程仓库和本地仓库，具有去中心化的特征，每个人的机器上都是完整的库，我们可以在任何时候 commit 代码，即使是网络无法连接，或者我们想要一小步一小步的 commit 代码，都没有问题。\n\n本地库能让我们的提交具有版本跟踪的特性，这和 SVN 的区别很明显，SVN 始终需要 SVN Server。\n\nGit 还支持内容分支，开发者可以很轻松的从原来的分支跳转到新的分支，代码的提交完全不影响到原分支，当我们完善了需要的功能后，还可以将多个分支进行合并。\n\n开发的时候在单独的分支下开发，后续再合并到主分支，这种模式可以提高我们开发的容错率，也可以避免团队之间的某些代码冲突。\n\n## 简述 Git 的管理模式\n\n按`pansz`在知乎的说法，Git 的管理模式为：\n\n- 写代码\n- 提交到本地版本库\n- 拉取服务器版本，解决服务器和本地之间的冲突\n- 合并拉取的代码与本地修改的代码，提交到本地版本库\n- 推送到服务器\n\n## Git 常用操作和要点\n\n### 基础\n\n- 问： 如何`创建`仓库？\n\n答：`git init`\n\n\n\n- 问：如何创建一个远程仓库的本地克隆版本？\n\n答：`git clone /path`\n\n\n\n- 问：git 的工作流包含什么概念点\n\n答：工作目录、缓存区（Index 或 storage）和 HEAD。工作目录指的是保存实际文件的目录，缓存区指的是临时保存改动的缓存区域。HEAD 则代表着指向最后一次提交的结果。\n\n> 在工作目录，修改代码内容后`add`到缓存区，再`commit`则更新`HEAD`。\n\n\n\n- 问：说说最常用的命令\n\n答：`git status`可以查看仓库状态， `git add filename` 或 `git add *`。通过`add`命令添加变更的内容到缓存区，使用`git commit -m \"描述内容\"`将缓存区所有的内容提交到`HEAD`，使用`git push`推送到当前默认的远程仓库的当前分支上去。如果想查看当前已经配置的远程服务器，可以使用`git remote`命令查看有哪些远程服务器。\n\n通常，我们从 GitHub 上 clone 下来的仓库默认具有`origin`为名的远程仓库。\n\n当我们在本地创建了一个仓库，想推送到远程服务器。首先我们需要使用`git remote add [remote_server_name] [remote_repo_url]`来将本地仓库添加到远程仓库，接着就可以通过`git push -u [remote_server_name] [branch]`来推送数据了，现在我们可以推送改动到想要的分支。\n\n\n\n- 问：说一说分支是什么？常见的分支操作有哪些？\n\n答：分支就像一条支流，在某个点延伸出新的分支，在新分支上做改动不会影响其他分支。默认的分支叫`master`，有主分支的意思。在适宜的时间，可以将分支合并到`master`，如此一来便可以尽可能地不影响主分支的稳定性的情况下，开发新的功能，只需要在某个阶段合并到主分支即可。我们可以通过`git checkout -b new_branch`创建并且切换到新的分支，使用`git checkout master`切换回主分支，甚至删除之前创建的分支：`git checkout -d new_branch`，在我们将分支推送到远端仓库之前，此分支只存在于本地，其他人无法获取此分支的数据。\n\n\n\n- 问：说一说如何合并与更新\n\n答：`git pull`将会从远端仓库获取所有更新，并且在当前工作目录中获取并且合并远端的改动。如果想要合并两个分支，可以在某个分支下使用`git merge [branch]`将目标分支合并到当前分支。自动合并将可能导致`冲突(conflicts)`，此时只能由开发者手动修改和合并这些冲突，最后再添加到缓存区。\n\n\n\n- 问：如何在命令行端查看两个分支的区别？\n\n答：使用`git diff [source_branck] [target_branch]`命令查看，命令行的显示效果不太好，推荐使用 vscode 编辑器配合插件来查看。\n\n\n\n- 问：如何替换本地的改动，或者如果想要放弃本地所有的改动，应该怎么做？\n\n答：使用`git checkout -- [filename]`可以将 `HEAD`中的最新内容替换掉工作目录中的指定文件，这也就意味着当前工作区的这个文件被恢复成了修改之前的状态。如果某个文件被修改并且添加到了缓存区，这时候可以通过`git reset HEAD [file]`来重置这个文件，将之从暂存区取出至工作区，此时文件内容处于被修改的状态，如果有需要可以通过上述的命令撤销此修改恢复至HEAD 最新的版本。\n\n\n\n- 问：如何进行版本回退？\n\n答：通过`git log`命令查看版本日志，日志将会`从近到远`依次显示每次 commit 的详细信息，包括操作人、时间、commit 信息和 commit id等。通过`git reset --hard HEAD^`可以回退到`HEAD`的上个版本，一个脱字符`^`表示上一个版本，可以多个脱字符表示上若干个版本（或者使用`HEAD~3`表示上 3 个版本）。\n\n> reset 将会删除目标版本到当前版本的提交数据，并且不会产生新的 commit id，如果需要推送到远程仓库，需要加`-f`强制推送。\n\n此时的版本回退会丢失版本，如果丢失的版本没有必要保留则使用`reset`即可，如果需要恢复也可以通过`git reflog`查看操作日志，得到`commit`的时候生成的`commit id`来`reset`。如果想要恢复之前的版本，并且当前版本需要保留，则可以使用`git revert -n commit-id`来重新将指定的版本内容作为最新版本，也可以使用`git revert commit-id1 commit-id2`来创建一个连续的版本数据到当前位置。\n\n\n\n### 规范\n\n- 代码提交规范：commitizen 或 cz-emoji 或 commitlint\n- git 钩子：husky - 可以在提交之前进行测试或者代码格式化、风格检查等操作\n\n\n\n## GitHub\n\nGitHub 是一个开源及私有项目的托管平台，其可以帮助开发者存储和管理项目源代码，且能够追踪和记录用户对代码的修改。我们可以在 GitHub 上搜索到众多的开源项目，甚至在遵守其 License 的前提下使用这些开源项目。\n\n### gh\n\n> [cli/cli: GitHub’s official command line tool](https://github.com/cli/cli)\n\n`gh`是 GitHub 官方发布的一个`cli`程序，可以很方便的管理和使用本地和远程仓库。\n\n![](https://user-images.githubusercontent.com/98482/84171218-327e7a80-aa40-11ea-8cd1-5177fc2d0e72.png)\n\n### Github action\n\n> [GitHub Actions文档 - GitHub Docs](about:blank#blocked)\n\nGitHub 提供了 GitHub action 这个自动化的`CI/CD`工作流功能，我将在另一篇文章学习此功能，并且通过 GitHub action发布一个`react`项目。\n\n## 速查\n\n![](https://rualc.com/assets/img/git-cheatsheet-cn.9c8eed56.jpeg)\n\n\n\n## 思维导图\n\n![](https://rualc.com/assets/img/git-mindmap-fs8.bbfa1ac3.png)\n\n## 参考\n\n- [Git - 关于版本控制](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%85%B3%E4%BA%8E%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6)\n- [Git 学习指南 | 前端指南](https://rualc.com/cs/git/#git-gong-ju)\n- [如何撤销 Git 操作？ - 阮一峰的网络日志](https://www.ruanyifeng.com/blog/2019/12/git-undo.html)\n- [Git教程 - 廖雪峰的官方网站](https://www.liaoxuefeng.com/wiki/896043488029600)\n- [git 使用简易指南](https://www.bootcss.com/p/git-guide/)\n- [commitizen/cz-cli: The commitizen command line utility. #BlackLivesMatter](https://github.com/commitizen/cz-cli)\n\n","title":"git-workflows使用浅析与心得","date":"2021/11/27","tags":["Git"],"mainImg":"https://images.unsplash.com/photo-1633791583517-c828e6f851a9?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgwMDM2MzA&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1633791583517-c828e6f851a9?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgwMDM2MzA&ixlib=rb-1.2.1&q=80&w=400","intro":"仅以此文纪念那不善总结知识的自己，Just for Git!"}},"__N_SSG":true}