{"pageProps":{"post":{"slug":"常见算法题解题思路","content":"\n### 前文提要\n\n在学校那时候并不喜欢算法，也不关心编程。毕业后发现算法思维是如此重要，算法能力在面试大厂的时候是如此重要。\n\n> 种下一个树的最佳时机是十年前，其次是现在。\n\n为了弥补那些年的缺失，我买了算法书 📚，看了算法博客文章和视频讲解，从头开始学习算法。本文记录 📝 算法题常见的解题思路和应对方案。\n\n### 常见思路\n\n#### 快慢指针\n\n先来一张网图，源自知乎：\n\n![](https://pic1.zhimg.com/v2-08f27cd5063b6e2542ffd362ea8e3914_r.jpg)\n\n只要链表是有环的，快指针都会从回环部分开始追慢指针，由于二者速度只差一个单位，因此无论是落后多少个单位，最后再相遇之前都会落后一个单位，下一步将会指向同一个节点，当发生这种情况的时候就可以判定这个链表是有环的。\n\n在写题的时候要注意无环判断条件，例如头是`null`或者只有头节点一个节点，亦或是尾节点存在，无下一个节点。\n\n来一份`JS`代码实例：\n\n```js\nfunction hasCycle(head) {\n  // write code here\n  if (head === null || head.next === null) return false;\n  let slow = head;\n  let fast = head.next;\n  while (slow !== fast) {\n    if (fast === null || fast.next === null) return false;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  return true;\n}\n```\n\n另外，如果要搜索环的入口节点，则需要在快慢指针重叠的时候，在头链表和重叠位置链表同时设置两个指针，同步移动，最终`二者会在环开始的位置相遇`，如果你想要了解原因并且彻底弄清原理可以搜索关键字，如果你想为此准备面试，那就背下来吧。\n\n我们只需要添加部分代码：\n\n```js\nfunction hasCycle(head) {\n  // write code here\n  if (head === null || head.next === null) return false;\n  let slow = head;\n  let fast = head.next;\n  while (slow !== fast) {\n    if (fast === null || fast.next === null) return null;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  slow = head;\n  while (slow != fast) {\n    slow = slow.next;\n    fast = fast.next;\n  }\n  return slow;\n}\n```\n\n还有一个变种的简单问题，LeetCode 234 检查链表是否回文。\n\n用快慢指针判断链表中心，然后将后面部分链表翻转，从中间断开，判断在其中一个结束之前是否每一个值都相等。\n\n```js\n/**\n * Definition for singly-linked list.\n * function ListNode(val, next) {\n *     this.val = (val===undefined ? 0 : val)\n *     this.next = (next===undefined ? null : next)\n * }\n */\n/**\n * @param {ListNode} head\n * @return {boolean}\n */\nvar isPalindrome = function (head) {\n  if (head.next === null) return true;\n  // 快慢指针，寻找中间点\n  let fast = head;\n  let slow = head;\n  let prev;\n  while (fast && fast.next) {\n    prev = slow;\n    slow = slow.next;\n    fast = fast.next.next;\n  }\n  // 断开\n  prev.next = null;\n  // 翻转\n  let newHead = null;\n  while (slow) {\n    const temp = slow.next;\n    slow.next = newHead;\n    newHead = slow;\n    slow = temp;\n  }\n  // 对比\n  while (head && newHead) {\n    if (head.val !== newHead.val) return false;\n    head = head.next;\n    newHead = newHead.next;\n  }\n  return true;\n};\n```\n","title":"常见算法题解题思路","date":"2021/12/1","tags":["算法"],"mainImg":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgzMzgwOTY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1556075798-4825dfaaf498?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MzgzMzgwOTY&ixlib=rb-1.2.1&q=80&w=400","intro":"仅以此文纪念笔者学习算法和练习算法题的那些日子。"}},"__N_SSG":true}