{"pageProps":{"post":{"slug":"多终端下的代理设置","content":"\n![](https://images.unsplash.com/photo-1605918321371-584f5deab0a2?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&auto=format&fit=crop&w=1951&q=80)\n\n我很喜欢命令行终端,使用喜欢的`shell` 进行日常的开发和工作非常有趣且高效.对于终端使用,始终绕不过一个问题:`网络代理`.\n\n为了更快地下载一些国外资源,我们需要为自己的`terminal`配置网络代理.接下来就让我给大家分享几个我使用过的`shell`的代理设置的知识.\n\n## TOS\n\n- Bash / Zsh\n- Powershell / CMD\n- FIsh\n- Git or NPM\n\n## 1. Bash / Zsh\n\n得益于多数`Linux`发行版自带`Bash`的原因,使用 Bash 的用户数量庞大.而`Zsh`自走入开发者们的视线以来,用户量急速增长,并且口碑良好.\n\n`bash`的默认配置文件是`~/.bashrc`,`zsh`的默认配置文件是`~/.zshrc`,二者设置代理的方法是一致的,只需要在各自的配置文件增加两个函数即可.\n\n> 注意替换 ip 和 port 为自己代理工具设置的值\n\n编辑配置文件增加代理设置和取消的函数:\n\n```toml\n# 开启代理\nproxy () {\n  export http_proxy=\"http://127.0.0.1:port\"\n  export https_proxy=\"http://127.0.0.1:port\"\n  echo \"Network Proxy on\"\n}\n\n# 关闭代理\nnoproxy () {\n  unset http_proxy\n  unset https_proxy\n  echo \"Network Proxy off\"\n}\n```\n\n添加函数之后,可以`source ~/.zshrc or source ~/.bashrc`重置配置后进行调用.\n\n## 2. Powershell\n\n`Powershell`无愧`Power`之名,强烈推荐`windows`环境开发者使用.其配置文件默认打开方式:\n\n```powershell\nnotepad $profile\n```\n\n使用你喜欢的编辑器打开`$profile`环境变量保存的文件,如果不存在可以先创建.最后也是增加代理函数:\n\n```powershell\nfunction proxy() {\n\t$Env:https_proxy=\"http://localhost:port\"\n\t$Env:http_proxy=\"http://localhost:port\"\n}\nfunction noproxy() {\n\t$Env:https_proxy=\"\"\n\t$Env:http_proxy=\"\"\n}\n```\n\n## 3. CMD\n\n`CMD`依然在某些场合发挥着自己的作用,只是我并不喜欢`CMD`,你可以直接在命令行使用如下命令设置代理:\n\n```sh\n# set\nset http_proxy=ip:port\nset https_proxy=ip:port\n# clear\nset http_proxy=\nset https_proxy=\n```\n\n## 4. Fish\n\n当我发现`Fish shell`的时候, 我为`autojump`感到惊叹,fish shell 速度快,对于语法高亮的支持很好,虽然`zsh`也可以通过插件实现这些功能,一开始接触的时候虽然有一点不适,但我很快渐入佳境,现在我主要使用`fish`,但是在一些情况下依然会切换到`zsh`执行一些命令.\n\n话说回来,`Fish`的配置文件是`~/.config/fish/config.fish`:\n\n```shell\nfunction proxy\n  set -xg ALL_PROXY http://localhost:1087\nend\n\nfunction noproxy\n  set -e ALL_PROXY\nend\n```\n\n但是也可以直接此插件来配置代理:\n\n[oh-my-fish/plugin-proxy: Proxy settings plugin for Oh My Fish](https://github.com/oh-my-fish/plugin-proxy)\n\n## 5. 验证效果\n\n\n\n```shell\n# 开启\nproxy\n\n# 关闭\nnoproxy\n\n# 使用某地址测试代理\ncurl -v 某地址\n# 未设置代理的结果:\n*   Trying 162.125.32.15...\n...\n# 设置代理:\n* Uses proxy env variable http_proxy == 'http://127.0.0.1:1087'\n*   Trying 127.0.0.1...\n...\n```\n\n## 6. 其他\n\n### 6.1 Git\n\n终端配置代理后使用`Git`,那么网络将走代理服务器,但是有些时候也可以不设置终端代理,直接为`Git`配置代理:\n\n```sh\n# 设置\ngit config --global https.proxy http://127.0.0.1:1080\ngit config --global https.proxy https://127.0.0.1:1080\n\n# 取消\ngit config --global --unset http.proxy\ngit config --global --unset https.proxy\n```\n\n\n\n### 6.2 NPM\n\n无论是`npm`还是`pnpm`,都可以使用`yrm`直接选择源,可以直接通过`npm`安装`yrm`:\n\n```sh\n# install\nnpm i -g yrm\n\n# use \nyrm ls\nyrm use taobao # 日常使用\nyrm use npm # 登录npm, 发布公共包\n```\n\n> yrm 将直接重置 npm 的配置文件,如果你有独立的配置,建议不要使用 yrm,而是直接使用 npm cli 的配置功能.","title":"多终端下的代理设置","date":"2021/3/19","tags":["proxy"],"mainImg":"https://images.unsplash.com/photo-1615760428224-3eacb2ece5ff?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTYxNjI2NDQ&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1615760428224-3eacb2ece5ff?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTYxNjI2NDQ&ixlib=rb-1.2.1&q=80&w=400","intro":"分享个人日常使用多种终端的代理配置经验.作为一个自诩眼界开阔的人,有一个稳定高效的梯子也是很合理的吧?"}},"__N_SSG":true}