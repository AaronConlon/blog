{"pageProps":{"post":{"slug":"javascript事件循环浅析","contentHtml":"<p>​        事件循环是 JavaScript 语言中非常重要的部分,理解事件循环有利于理解 JavaScript 的设计理念,让我们能编写更好的代码.本文用简单的术语对其进行总结.</p>\n<h3>1. 简介</h3>\n<p>众所周知<code>JavaScript</code>是单线程语言,在某个时间点只能运行一项任务,这个限制降低了编程复杂度,我们不需要担心并发问题,只需要思考如何消除线程阻塞,如何编写简明健壮的异步代码以实现我们的需求.</p>\n<p>在浏览器端,通常每一个浏览器标签都有自己的一个<code>事件循环(event loop)</code>机制来实现<code>非阻塞</code>.浏览器是多进程的,其同时管理多个彼此隔离的<code>事件循环</code>机制.</p>\n<blockquote>\n<p><a href=\"https://flaviocopes.com/web-workers/\">Web Workers</a>有自己的事件循环机制.</p>\n</blockquote>\n<p>如此一来,我们只需要关心如何当前页面编码的<code>阻塞因素</code>在哪,以及如何消除阻塞.</p>\n<h3>2. 阻塞事件循环</h3>\n<p>任何耗时的 <code>JavaScript</code>代码在主线程执行的时候都会阻塞事件循环,也就意味着阻塞了<code>事件循环</code>中的任务执行,从而引发页面卡顿,甚至是无响应.</p>\n<p>几乎所有的<code>I/O</code> 操作在 <code>JavaScript</code>中都是非阻塞的,例如<code>网络请求</code>,<code>Nodejs 文件系统</code>等等.</p>\n<p><code>回调</code>在<code>JavaScript</code>中被广泛使用,<code>ES6</code>更是新增了<code>Promise</code>规范,进一步增强了异步编程的可用性,这一切都是为了让开发者能更方便的编写高效无阻塞的代码.</p>\n<h3>3. 调用栈</h3>\n<p><code>调用栈</code>是一个<code>LIFO</code>的队列,<code>事件循环</code>机制持续性地检查<code>调用栈</code>中是否有函数需要执行,主线程执行每一个函数的时候都将此函数压入<code>调用栈</code>,同时保存此函数相关的一些<code>变量</code>和<code>数据</code>等信息.</p>\n<p>举个例子,我们在浏览器中执行一些测试代码,并且抛出异常.</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/exception-call-stack.png\" alt=\"\"></p>\n<p>浏览器执行每个函数的时候都将函数压入<code>调用栈</code>,出错的时候可以很方便的提示我们出错的函数信息.</p>\n<h3>4. 事件循环</h3>\n<p>我们来看一个简单的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> bar = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'bar'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> baz = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'baz'</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>)\n<span class=\"lineNumber\">5</span>  bar()\n<span class=\"lineNumber\">6</span>  baz()\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span>foo()\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">10</span>foo\n<span class=\"lineNumber\">11</span>bar\n<span class=\"lineNumber\">12</span>baz</code></pre> \n\n<p>上述示例执行的时候,首先调用<code>foo()</code>,然后在<code>foo()</code>中调用<code>bar()</code>,接着调用<code>baz()</code>,此时调用栈的结构大致如下:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/call-stack-first-example.png\" alt=\"\"></p>\n<p>事件循环持续性的检查调用栈中的函数,并且依次执行这些函数.</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/execution-order-first-example.png\" alt=\"\"></p>\n<p>直到整个调用栈被清空.</p>\n<h3>5. 执行队列函数</h3>\n<p>上述的示例简单来说就是:<code>JavaScript</code>不断按顺序地执行函数代码流.</p>\n<p>但是,我们可以推迟一些<code>函数</code>的执行时间,让它们在<code>调用栈</code>被清空的时候再执行.稍微修改一下上述代码示例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> bar = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'bar'</span>)\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> baz = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'baz'</span>)\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>)\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-built_in\">setTimeout</span>(bar, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">8</span>  baz()\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>foo()\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">13</span>foo\n<span class=\"lineNumber\">14</span>baz\n<span class=\"lineNumber\">15</span>bar</code></pre> \n\n<p>如上所示,我们使用<code>setTimeout</code>函数,并且使用超时时间为<code>0ms</code>,让它尽快执行.此时调用栈如下:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/call-stack-second-example.png\" alt=\"\"></p>\n<p>如此一来,<code>setTimeout</code>函数在调用栈中被转移了,直到栈底的<code>foo()</code>函数执行完毕才将<code>setTimeout</code>的相关部分传入<code>调用栈</code>,所有函数的执行顺序如下图:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/execution-order-second-example.png\" alt=\"\"></p>\n<p>传给<code>setTimeout</code>的函数,在<code>setTimeout</code>进入调用栈并且执行的时候,被转移到了哪里?</p>\n<h3>6. 消息队列</h3>\n<blockquote>\n<p>事件循环具有\"执行至完成\"的重要概念,每一个消息被执行至完成,其他的消息才会被执行,这种模式避免了抢占问题,同时也有其缺点,当此消息较为耗时的时候,会阻塞主线程.</p>\n</blockquote>\n<p>当<code>setTimeout()</code>函数执行的时候,JavaScript 引擎按其第二个参数使用了<code>timer</code>计时器,传入<code>setTimeout</code>函数的<code>bar()</code>被转移到了<code>消息队列(the message queue)</code>中.</p>\n<blockquote>\n<p>一个 JavaScript 运行时包含一个待处理消息的消息队列,每一个消息都关联着一个用于处理此消息的回调函数.</p>\n</blockquote>\n<p>事件循环机制赋予<code>调用栈</code>更高的优先级,直到<code>调用栈</code>被清空,才开始执行<code>消息队列</code>中的回调函数.</p>\n<p>也就是说,一旦我们将某些任务转移到<code>消息队列</code>,主线程便不必关心其内部实现,浏览器提供了单独的线程来支持其功能,就像在这里,即使<code>setTimeout</code>设置其延时时间为<code>10s</code>,主线程不会等待<code>10s</code>的时间.</p>\n<h3>7. ES6 任务队列</h3>\n<p><code>ES6</code>新增<code>Promise</code>和<code>Job queue</code>,二者息息相关.</p>\n<p><code>Promise</code>能让异步函数尽快执行,而不是将其放在<code>调用栈</code>的末尾.</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://flaviocopes.com/javascript-event-loop/\">The JavaScript Event Loop</a></li>\n</ul>\n","title":"javascript事件循环浅析","date":"2021/4/20","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1618655108396-ce1ba6c80b7d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTg4NzMxMjg&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1618655108396-ce1ba6c80b7d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTg4NzMxMjg&ixlib=rb-1.2.1&q=80&w=400","intro":"事件循环是 JavaScript 语言中非常重要的部分,理解事件循环有利于理解 JavaScript 的设计理念,让我们能编写更好的代码.本文用简单的术语对其进行总结."}},"__N_SSG":true}