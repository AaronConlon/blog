{"pageProps":{"post":{"slug":"实现一个Promise-A+规范的Promise类","content":"\n各位订阅的小伙伴们早上好，今天我们来一起学习一下如何一步步实现一个符合`Promise/A+`规范的`Promise`类。\n\n我在看《探索 ES6》这本书的时候，突然想要更深入理解 `Promise` 的设计理念和设计原理，于是我看了一些关于如何实现一个符合`Promise/A+`规范的`Promise`实例的文章和介绍，搜索了一些相关的知识，也阅读了其他人的 `Promise`实现源码。\n\n结果令我很振奋，通过实现一个符合`Promise/A+`规范的`Promise`类，我对`Promise`的理解有了不错的进步 😂。\n\n总结下来就是，优先学习`ES6 Promise`知识，然后再阅读`Promise/A+`规范和第三方开发者的`Promise`实现和知识分享，最后我们便可以依据`Promise/A+`的规范一步步创建我们自己的实现逻辑。\n\n那就废话少说，开始吧。\n\n## 从规范到实现\n\n在开始写代码之前，我们先阅读一下[Promises/A+](https://promisesaplus.com/)的官方文档。\n\n#### 几个术语\n\n言而简之，官方文档上提及了五个术语，如下所示：\n\n- Promise\n- thenable\n- value\n- exception\n- reason\n\n`Promise`是一个具有`then`方法的对象或函数，并且此对象或者函数遵循`Promise/A+`规范。\n\n`thenable`指的是一个对象或函数具有一个`then`方法\n\n`value`是一个合法的`Javascript`值。\n\n`exception`是一个使用`throw`语句抛出的值。\n\n`reason`则是`Promise`状态转为`Rejected`的原因。\n\n#### 规范简述\n\n阅读规范有助于我们编写代码，整理思路，最终写出一个能通过所有`Promise/A+`测试用例的`Promise`实现版本。\n\n##### Promise State\n\n- 2.1.1 一个`Promise`的状态只有如下三种：\n\n- pending 初始化状态\n  - 2.1.1.1 可以显式转换状态至`fulfilled`或`rejected`\n- fulfilled 成功\n  - 2.1.2.1 状态不可再转换\n  - 2.1.2.2 具有一个不可改变的`value`\n- rejected 失败\n  - 2.1.3.1 状态不可再转换\n  - 2.1.3.2 具有一个不可改变的`reason`\n\n> 不可改变意味着可以使用`===`进行比较，并且始终为`true`，并非完全的深层属性不可变。\n\n除此之外，使用`new`实例化的时候，我们需要为构造函数提供一个`executor`函数参数。\n\n##### 思考🤔\n\n现在我们从最简单的状态需求开始，假设我们处于一个密闭空间，触手可及的只有手头的键盘。\n\n思考一下如何实现上述`Promise State`，用少量词汇组织将要写的代码的内容，例如：\n\n- 我的 Promise 实现命名为`Yo`\n- `Yo`初始化的时候设置初始值和初始状态，状态可以转变为`fulfilled`或者`rejected`。\n- `Yi`具备两个静态方法来显式转换其状态：`fulfill`和`Reject`，当状态为`pending`时才执行逻辑，这样一来一旦状态改变后续再执行此方法就无碍了。\n\n> 注释里写明对应的规范信息条目\n\n很快，我们的实现如下：\n\n```js\n// 将一些常用到的变量保存起来，\nconst PENDING = 'pending'\nconst FULFILLED = 'fulfilled'\nconst REJECTED = 'rejected'\nconst nop = () => {}\nconst $undefined = undefined\nconst $function = \"function\"\n// 使用 Symbol 为 Promise 的属性提供保护\nconst promiseState = Symbol(\"promiseState\")\nconst promiseValue = Symbol(\"promiseValue\")\n\nclass Yo {\n  constructor(executor) {\n    // executor 提前检查，如果有异常则不创建额外的内部变量和属性方法，直接抛出异常\n    if(executor === $undefined) {\n      throw new TypeError(\"You have to give a executor param.\")\n    }\n    if(typeof executor !== $function) {\n      throw new TypeError(\"Executor must be a function.\")\n    }\n    this[promiseState] = PENDING // 2.1.1\n    this[promiseValue] = $undefined\n    try {\n      executor(this.$resolve.bind(this), this.$reject.bind(this))\n    } catch (e) {\n      this.$reject.bind(this)(e)\n    }\n  }\n\n  $resolve(value) {\n    if(this[promiseState] !== PENDING) return // 2.1.2.1, 2.1.3.1\n    this[promiseState] = FULFILLED // 2.1.1.1\n    this[promiseValue] = value // 2.1.2.2\n  }\n\n  $reject(reason) {\n    if(this[promiseState] !== PENDING) return // 2.1.2.1, 2.1.3.1\n    this[promiseState] = REJECTED // 2.1.1.1\n    this[promiseValue] = reason // 2.1.3.2\n  }\n}\n```\n\n##### `then`方法\n\n> `then`方法是`Promise/A+`规范的核心部分。\n\n一个`Promise`必须提供一个`then`方法以访问其`value`或`reason`,此方法需要接受两个可选参数：\n\n```js\npromise.then(onFulfilled, onRejected)\n```\n\n其规范如下：\n\n- 2.2.1 `onFulfilled`和`onRejected`都是可选的\n  - 2.2.1.1 如果`onFulfilled`不是一个函数，则忽略此参数\n  - 2.2.1.2 如果`onRejected`不是一个函数，则忽略此参数\n- 2.2.2 如果`onFulfilled`是一个函数\n  - 2.2.2.1 此函数在`promise`状态为`fulfilled`的时候被异步调用，并且使用其`value`值作为第一个参数\n  - 2.2.2.2 此函数不可在`promise`状态为`fullfilled`之前被调用\n  - 2.2.2.3 在一个`promise`实例上只能被调用一次\n- 2.2.3 如果`onRejected`是一个函数\n  - 2.2.3.1 此函数在`promise`状态为`rejected`的时候被异步调用，并且使用其`value`值作为第一个参数\n  - 2.2.3.2 此函数不可在`promise`状态为`rejected`之前被调用\n  - 2.2.3.3 在一个`promise`实例上只能被调用一次\n- 2.2.4 `onFulfilled`和`onRejected`将被异步调用（在当前执行栈清空之前无法被调用）\n- 2.2.5 `onFulfilled`和`onRejected`必须作为一个函数被调用（内部不应使用`this`值，原因在于严格模式和非严格模式的`this`值不一致）\n- 2.2.6 `then`可以在同一个`promise`实例上被多次调用，因此我们可以在不同的地方使用某个`promise.then`f方法\n  - 2.2.6.1 当`promise`状态为`fulfilled`时，所有的`then`上传入的`onFulfilled`函数将会按调用的次序依次执行\n  - 2.2.6.2 当`promise`状态为`rejected`时，所有的`then`上传入的`onRejected`函数将会按调用的次序依次执行\n- 2.2.7 `then`方法最终将返回一个新的`promise`实例: `promise2 = promise1.then(onFulfilled, onRejected)`\n  - 2.2.7.1 如果`onFulfilled`或`onRejected`返回一个值`x`，执行`Promise`的解析步骤： `[[Resolve]](promise2, x)`\n  - 2.2.7.2 如果`onFulfilled`或`onRejected`抛出一个异常`e`，则`promise2`直接`reject(e)`\n  - 2.2.7.3 如果`onFulfilled`不是一个函数，并且`promise1`状态为`fulfilled`，则`promise2`沿用`promise1`的状态和值。\n  - 2.2.7.4 如果`onFulfilled`不是一个函数，并且`promise1`状态为`rejected`，则`promise2`沿用`promise1`的状态和`reason`\n\n##### 完善 ✍️\n\n按规范的定义，在上述代码的基础下，我们来完善`then`方法。\n\n```js\nclass Yo {\n  constructor(executor) {\n    ...\n    this[promiseConsumers] = []\n    try {\n      executor(this.$_resolve.bind(this), this.$reject.bind(this))\n    } catch (e) {\n      this.$reject.bind(this)(e)\n    }\n  }\n\n  $resolve(value) {\n    if(this[promiseState] !== PENDING) return // 2.1.2.1, 2.1.3.1\n    this[promiseState] = FULFILLED // 2.1.1.1\n    this[promiseValue] = value // 2.1.2.2\n    this.broadcast()\n  }\n\n  $reject(reason) {\n    if(this[promiseState] !== PENDING) return // 2.1.2.1, 2.1.3.1\n    this[promiseState] = REJECTED // 2.1.1.1\n    this[promiseValue] = reason // 2.1.3.2\n    this.broadcast()\n  }\n\n  static then(onFulfilled, onRejected) {\n    const promise = new Yo(nop) // then 方法返回的新实例\n    // 2.2.1.1\n    promise.onFulfilled = typeof onFulfilled === $function ? onFulfilled : $undefined;\n    // 2.2.1.2\n    promise.onRejected = typeof onRejected === $function ? onRejected : $undefined;\n    // 2.2.6.1, 2.2.6.2\n    this[promiseConsumers].push(promise)\n    this.broadcast()\n    // 2.2.7\n    return promise\n  }\n\n  static broadcast() {\n    const promise = this;\n    // 2.2.2.1, .2.2.2.2, 2.2.3.1, 2.2.3.2\n    if(this[promiseState] === PENDING) return\n    // 2.2.6.1, 2.2.6.2, 2.2.2.3, 2.2.3.3\n    const callbackName = promise[promiseState] === FULFILLED ? \"onFulfilled\" : \"onRejected\"\n    const resolver = promise[promiseState] === FULFILLED ? \"$resolve\" : \"$reject\"\n    soon(\n      function() {\n        // 2.2.6.1, 2.2.6.2, 2.2.2.3, 2.2.3.3\n        const consumers = promise[promiseConsumers].splice(0)\n        for (let index = 0; index < consumers.length; index++) {\n          const consumer = consumers[index];\n          try {\n            const callback = consumer[callbackName] // 获取 then 方法执行的时候传入的函数\n            const value = promise[promiseValue]\n            // 2.2.1.1, 2.2.1.2, 2.2.5 without context\n            if(callback) {\n              consumer['$resolve'](callback(value))\n            } else {\n              // onFulfilled / onRejected 不是函数\n              // 2.2.7.3, 2.2.7.4\n              consumer[resolver](value)\n            }\n          } catch (e) {\n            // 异常则设为 rejected\n            consumer['$reject'](e)\n          }\n        }\n      }\n    )\n  }\n}\n\n// soon function come from Zousan.js\nconst soon = (() => {\n  const fq = [],  // function queue\n    // avoid using shift() by maintaining a start pointer\n    // and remove items in chunks of 1024 (bufferSize)\n    bufferSize = 1024\n  let fqStart = 0\n  function callQueue() {\n    while(fq.length - fqStart) {\n      try {\n        fq[fqStart]()\n      } catch (err) {\n        console.log(err)\n      }\n      fq[fqStart++] = undefined // increase start pointer and dereference function just called\n      if(fqStart === bufferSize) {\n        fq.splice(0, bufferSize)\n        fqStart = 0\n      }\n    }\n  }\n  // run the callQueue function asyncrhonously as fast as possible\n  // 执行此函数，返回的函数赋值给 cqYield\n  const cqYield = (() => {\n    // 返回一个函数并且执行\n    // This is the fastest way browsers have to yield processing\n    if(typeof MutationObserver !== 'undefined')\n    {\n      // first, create a div not attached to DOM to \"observe\"\n      const dd = document.createElement(\"div\")\n      const mo = new MutationObserver(callQueue)\n      mo.observe(dd, { attributes: true })\n\n      return function() { dd.setAttribute(\"a\",0) } // trigger callback to\n    }\n\n    // if No MutationObserver - this is the next best thing for Node\n    if(typeof process !== 'undefined' && typeof process.nextTick === \"function\")\n      return function() { process.nextTick(callQueue) }\n\n    // if No MutationObserver - this is the next best thing for MSIE\n    if(typeof setImmediate !== _undefinedString)\n      return function() { setImmediate(callQueue) }\n\n    // final fallback - shouldn't be used for much except very old browsers\n    return function() { setTimeout(callQueue,0) }\n  })()\n  // this is the function that will be assigned to soon\n  // it take the function to call and examines all arguments\n  return fn => {\n    fq.push(fn) // push the function and any remaining arguments along with context\n    if((fq.length - fqStart) === 1) { // upon addubg our first entry, keck off the callback\n      cqYield()\n    }\n  }\n})()\n```\n\n网上对于状态转换后异步调用`onFulfilled`或者`onRejected`的逻辑实现众说纷纭，我最喜欢的实现来源于`@trincot`大神在 Stack Overflow 上的解答，感兴趣可以查看文末参考链接。\n\n对于在状态变更后异步调用之前注册的回调函数的解法如下：\n\n- 使用`consumers`数组存放`then`方法返回的`promise`\n- 在`then`方法中，为每个将要返回的`promise`添加其传入的同名参数`onFulfilled`和`onRejected`作为`Promise`上的属性。\n- 对于某些已经转换过状态的`Promise`实例，需要在`then`方法中调用一次`broadcast`方法。\n\n> `broadcast` 方法非常关键，在`resolve`、`reject`、`then`方法中都会调用一次。\n\n我们使用`broadcast`方法来做一个“广播”的功能，当`Promise`状态转换之后就视其状态创建微任务，异步调用`consumers`数组中所有的`Promise`上的属性方法`onFulfilled`或者`onRejected`。\n\n另外，如何创建微任务以异步执行相关函数也是实现`Promise`类的关键，这里我学习了`@bluejava`前辈的`Promise`实现方案：`Zousan.js` ，文末有其`github`仓库地址。\n\n在`zousan.js`中，作者特地创建了一个`soon`函数，将传入的函数参数尽可能快速地创建微任务以执行。\n\n其核心便是如果是浏览器环境并且支持`MutationObserver`，则创建文档节点使用此`API`创建微任务最终执行目标函数，如若不支持则检查`process.nextTick`和`setImmediate`是否可用，最后用`setTimeout`兜底创建宏任务以达到异步调用目标函数的目的。\n\n至此，我们的`Yo`类几近完成，最后就是规范第三点：`The Promise Resolution Procedure`。\n\n##### The Promise Resolution Procedure\n\n> Promise Resolution procedure 表示为`[[Resolve]](promise, x)`,为什么我们需要实现此规范？\n\n当我们在`executor`函数中使用`resolve`或者`reject`方法的时候，传入的参数可以是任意有效的`Javascript`值。某些场景下，这个值可能是一个原始类型的数据，也可能是一个`thenables`对象，亦或是一个其他`Promise`实现方案创建的`Promise`实例。\n\n**我们需要处理这个问题，让不同的传参都有一个一致且确切的处理方案。**\n\n那么，就让我们继续看规范是如何定义的。\n\n执行`[[Resolve]](promise, x)`的步骤如下：\n\n- 2.3.1 如果`promise`和`x`引用的是同一个对象，则`reject`一个`TypeError`异常作为`reason`\n- 2.3.2 如果`x`是一个`Promise`，则采纳其状态\n  - 2.3.2.1 如果`x`是`pending`的，则`promise`保持`pending`直到`x`状态改变\n  - 2.3.2.2 、2.3.2.3 `x`状态稳定后，直接沿用其`value`或`reason`\n- 2.3.3 如若其不是`Promise`而是一个普通`thenable`对象\n  - 2.3.3.1 设`then`等于`x.then`\n  - 2.3.3.2 如果获取`x.then`值的时候抛出异常，则`reject`此`promise`，并且将异常作为`reason`\n  - 2.3.3.3 如果`then`是一个函数，则将`x`绑定为此函数的`this`对象，依次传入可以改变当前`promise`状态的方法`resolve`和`reject`\n    - 2.3.3.3.1 如若`resolve`执行并传入一个`y`值，则执行`[[Resolve]](promise, y)`\n    - 2.3.3.3.2 如若`reject`执行并且传入一个`reason`,则采纳此`reason`作为`rejected`状态的`reason`\n    - 2.3.3.3.3 如若`resolve`和`reject`都被调用，或者多次调用，则以先调用的优先，并且只执行首次调用，后续调用直接忽略\n    - 2.3.3.3.4 如若调用`then`的时候抛出了异常\n      - 2.3.3.3.4.1 如若`resolve`或`reject`被调用了，则忽略此异常\n      - 2.3.3.3.4.2 否则，`reject`此异常作为其`reason`\n  - 2.3.3.4 如若`then`不是一个函数，则此`promise`以`x`为`value`，状态转为`fulfilled`\n- 2.3.4 如若`x`不是对象或者函数，则此`promise`以`x`为`value`，状态转为`fulfilled`\n\n对于`Promise`来说，转换状态的函数才需要考虑上述规范如何实现。\n\n我们继续来完善未完成的代码。\n\n由于需要处理复杂的`resolve`函数，而不仅仅在其`settled`之后更改状态和设置`value`或者`reason`，我选择将此方法命名为`$_resolve`，从而与原来简单的`$resolve`方法区分开来。\n\n```js\nclass Yo {\n  ...\n    $_resolve(x) {\n    let hasCalled,then;\n    // 2.3.1\n    if(this === x) {\n      console.log('circular');\n      throw new TypeError(\"Circular reference error, value is promise itself.\")\n    }\n    // 2.3.2\n    if(x instanceof Yo) {\n      console.log('instance');\n      // 2.3.2.1, 2.3.2.2, 2.3.2.3\n      x.then(this.$_resolve.bind(this), this.$reject.bind(this))\n    } else if(x === Object(x)) {\n      // 2.3.3\n      try {\n        // 2.3.3.1\n        then = x.then;\n        if(typeof then === $function) {\n          // 2.3.3.3\n          then.call(\n            x,\n            // first argument resolvePromise\n            function(y) {\n              if(hasCalled) return\n              hasCalled = true\n              // 2.3.3.3.1\n              this.$_resolve(y)\n            }.bind(this),\n            // second argument is rejectPromise\n            function (reasonY) {\n              if(hasCalled) return\n              hasCalled = true\n              // 2.3.3.3.2\n              this.$reject(reasonY)\n            }.bind(this)\n          )\n        } else {\n          // 2.3.3.4 原始值\n          this.$resolve(x)\n        }\n      } catch (e) {\n        // 2.3.3.2, 2.3.3.3.4 异常\n        if(hasCalled) return // 2.3.3.3.4.1\n        this.$reject(e) // 2.3.3.3.4.2\n      }\n    } else {\n      // 2.3.4 原始值\n      this.$resolve(x)\n    }\n  }\n  ...\n}\n```\n\n至此\n\n对于一个`Promise`的实现来说，我们还需要添加一个`catch`方法，这个方法可以看成`then`方法的语法糖。\n\n当然，静态方法`resolve`和`reject`也可以简单添加进来。\n\n```js\nclass Yo{\n  ...\n  catch(onRejected) {\n    return this.then($undefined, onRejected)\n  }\n\n\tstatic reject(reason) {\n    return new Yo((_, reject) => {\n      reject(reason)\n    })\n  }\n\n  static resolve(value) {\n    return new Yo(resolve => {\n      resolve(value)\n    })\n  }\n\t...\n}\n```\n\n最后，使用`promises-aplus-tests`对我们的实现进行测试。\n\n在安装了依赖包之后，为`Yo`添加了`deferred`静态方法如下：\n\n```js\nclass Yo {\n  ...\n  static deferred() {\n    const result = {}\n    result.promise = new Yo((resolve, reject) => {\n      result.resolve = resolve\n      result.reject = reject\n    })\n    return result\n  }\n  ...\n}\n```\n\n然后在`package.json`的`scripts`字段中添加测试命令，最后使用`yarn run test`进行测试如下：\n\n![](https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/1.png)\n\n\n\n自此，我们实现了遵守`Promise/A+`规范的`Promise`，也许`Yo`不够健壮，甚至有一些常用的方法并未提供，但作为一个用于学习`Promise`知识的简单实现，`Yo`已经良好的完成了任务，所有代码如下图所示（亦可通过参考的最后一条访问 GitHub 仓库源码）：\n\n![carbon _2_.png](https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/Fxu8L5TQb3z9tl7.png)\n\n完结撒花。\n\n## 写在最后\n\n通过学习`ES6 Promise`的知识，再阅读网上一些开发者的第三方`Promise`实现示例，对我们理解和使用`Promise`进行异步编程非常有用，亲自实现一个能通过`Promise/A+`测试用例测试的`Promise`实现让笔者对`Promise`的应用能力得到了一定程度的增强。\n\n再会~\n\n\n\n## 参考\n\n- [Basic Javascript promise implementation attempt - Stack Overflow](https://stackoverflow.com/questions/23772801/basic-javascript-promise-implementation-attempt/23785244)\n- [bluejava/zousan: A Lightning Fast, Yet Very Small Promise A+ Compliant Implementation](https://github.com/bluejava/zousan)\n- [youyiqin/yo](https://github.com/youyiqin/yo) 源代码","title":"实现一个Promise-A+规范的Promise类","date":"2021/5/12","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1616523197635-78aa12a1f36f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjA3NDk4ODc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1616523197635-78aa12a1f36f?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjA3NDk4ODc&ixlib=rb-1.2.1&q=80&w=400","intro":"为了学习 Promise 的原理，加深对异步 Promise 的理解，我们很有必要学习如何实现一个符合 Promise/A+ 规范的 Promise 类"}},"__N_SSG":true}