{"pageProps":{"post":{"slug":"CSS之Grid布局","contentHtml":"<p>网格布局<code>(Grid)</code>被视为当前最强大的<code>CSS</code>布局方案。</p>\n<p>善用网格布局，可以轻松实现界面布局，并且具有现代浏览器良好的支持度。</p>\n<h2>1. 前言</h2>\n<p>我需要的布局大致如下：</p>\n<p><img src=\"https://i.loli.net/2021/06/10/GlXYwLiM4uyUIst.png\" alt=\"\"></p>\n<p>可以看到，此布局并不复杂，我们可以使用多种方式来实现它，但今天我的计划是使用<code>Grid</code>布局。</p>\n<p><code>Grid</code>布局将容器划分为“行”与“列”，产生单元格，然后指定“item”所在的单元格，因此也常被视为“二维布局”。</p>\n<h2>2. 基本概念</h2>\n<h3>2.1 容器和项目</h3>\n<p>如名所示，最外层的元素作为容器<code>(container)</code>，内部每一个最外层的元素作为一个单独的项目<code>(item)</code>。</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n<span class=\"lineNumber\">2</span>\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>a<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">3</span> \t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>b<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>c<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></code></pre> \n\n<p><code>Grid</code>布局针对<code>main</code>生效，<code>section</code>作为<code>item</code>，其内部元素与布局无关。</p>\n<h3>2.2 行和列</h3>\n<p><img src=\"https://i.loli.net/2021/06/10/IFci7q2pKmdLsG6.png\" alt=\"\"></p>\n<p>我想这一张图已经非常明显地使用深色体现出行<code>(row)</code>与列<code>(column)</code>的区别，行和列是有交叉的。</p>\n<h3>2.3 单元格和网格线</h3>\n<p>行列交叉的区域，我们称之为<code>Cell(单元格)</code>，如前言所示，我们将子元素放在单元格中。而深色区域，我们将之称为<code>Grid line(网格线)</code>，通常<code>n</code>行<code>m</code>列，即可产生可供布局的<code>n*m</code>个<code>Cell</code>。</p>\n<p>不要讲空白区域视为单元格，单元格始终是<code>行</code>和<code>列</code>相交产生的。</p>\n<h2>3. 容器属性和项目属性</h2>\n<p><code>Grid</code>布局属性分为定义在<code>container</code>上的<code>容器属性</code>,定义在<code>item</code>上的<code>项目属性</code>。</p>\n<h3>3.1 容器属性</h3>\n<h4>3.1.1 display</h4>\n<p>显示为<code>container</code>设置<code>display: grid</code>显示属性布局为<code>grid</code>。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">div</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>此时，<code>container</code>是一个单独的容器，默认是块级元素，也可以设置<code>display: inline-grid</code>为行内<code>Grid</code>布局，使其整体视为一个行内块级元素。</p>\n<blockquote>\n<p>网格布局将使得子项（item）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>display: vertical-align</code>、<code>display: column-*</code>等设置失效。</p>\n</blockquote>\n<h4>3.1.2 grid-template-rows 、grid-template-columns</h4>\n<p><code>grid</code>布局除了需要显示指定布局类型为<code>grid</code>外，还需要指定行和列的值。</p>\n<p><code>grid-template-rows</code>定义行高，有多少行就提供多少个值。</p>\n<p><code>grid-template-column</code>定义列宽，同样，有多少列就提供多少个值。</p>\n<p>例如，如果我们要设置一个九宫格，则分别需要三行三列：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-column</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>如此一来配上<code>item</code>(css 提供一些颜色值):</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-1\"</span>></span>1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-2\"</span>></span>2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-3\"</span>></span>3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-4\"</span>></span>4<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-5\"</span>></span>5<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-6\"</span>></span>6<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-7\"</span>></span>7<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-8\"</span>></span>8<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-9\"</span>></span>9<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre> \n\n<p>我们可以得到一个九宫格布局：</p>\n<p><img src=\"https://i.loli.net/2021/06/10/ACZfnmovTdDsiwk.png\" alt=\"\"></p>\n<p>除了使用<code>px</code>这样的绝对单位，也可以使用百分数，甚至可以使用<code>repeat</code>类函数简化赋值：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">33.33%</span>);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">33.33%</span>);\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>甚至是：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">50px</span>);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">50px</span>;\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>定义了<code>100px 20px 80px 100px 20px 80px</code>，6 列宽度不一的列。</p>\n<p><img src=\"https://i.loli.net/2021/06/10/1UQYPNlAax5rodI.png\" alt=\"image-20210610012604962\"></p>\n<p>如上所示，第三行由于没有<code>item</code>，默认空白。</p>\n<p>某些场合下，我们希望容器尽可能填充每一行的<code>item</code>，可以使用<code>auto-fill</code>关键字：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fill, <span class=\"hljs-number\">100px</span>);\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p><img src=\"https://i.loli.net/2021/06/10/RkMNLhud9IpliCw.png\" alt=\"image-20210610012923160\"></p>\n<p>容器根据最大宽度进行自动列填充，此时行与列的数量是根据宽度变化的。</p>\n<p>某些场合下，我们希望动态根据片段比例对行数进行判断，次数可以使用<code>fr(fraction)</code>关键字，表示列的宽度片段，例如：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">2</span>fr <span class=\"hljs-number\">1</span>fr;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>上述示例表示，第一列宽度为整个容器宽度的<code>2/3</code>，第二列为<code>1/3</code>，一般配合绝对宽度使用可以实现很灵活的布局效果：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">150px</span> <span class=\"hljs-number\">1</span>fr <span class=\"hljs-number\">2</span>fr;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>上述示例，每一行先扣除第一列的<code>150px</code>宽度，剩下的再动态计算分配。也可以使用<code>auto</code>关键字，由浏览器决定长度。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">grid-template-columns</span>: 100<span class=\"hljs-selector-tag\">px</span> <span class=\"hljs-selector-tag\">auto</span> 100<span class=\"hljs-selector-tag\">px</span>;</code></pre> \n\n<p>网格线可以具有名字，并且可以有多个名字<code>（使用中括号括起来）</code>，方便后续复用。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: [c1] <span class=\"hljs-number\">100px</span> [c2] <span class=\"hljs-number\">100px</span> [c3] auto [c4];\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: [r1] <span class=\"hljs-number\">100px</span> [r2] <span class=\"hljs-number\">100px</span> [r3] auto [r4];\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<h4>3.1.3 gap</h4>\n<p>网格线间距属性<code>gap</code>，其属性为行和列的简写：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">gap</span>: &#x3C;row-gap> &#x3C;column-gap>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span>;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>如果简写忽略了第二个值，则默认等于第一个值，新的标准</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\">CSS Grid 网格布局教程 - 阮一峰的网络日志</a></li>\n</ul>\n","title":"CSS之Grid布局","date":"2021/6/10","tags":["CSS"],"mainImg":"https://images.unsplash.com/photo-1494322296366-b46227baa318?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjMyNTUyMjM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1494322296366-b46227baa318?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjMyNTUyMjM&ixlib=rb-1.2.1&q=80&w=400","intro":"我打算使用 Grid 布局来设计我的音乐网站《岚》，所以这是一篇学习总结类的文章。"}},"__N_SSG":true}