{"pageProps":{"post":{"slug":"使用sass高效编写媒体查询","content":"\n### 前言\n\n此前一直使用第三方库的功能编写媒体查询代码，最近则需要单独使用 sass 来写媒体查询，本文记录如何处理这个问题 📝。\n\n> 愿笔者和读者皆有所得。\n\n### 介绍\n\n通常我们在处理响应式的样式表问题时会采用`CSS Media Queries`技术，这项功能可以让我们按不同设备类型或特定的设备参数来修改样式表属性。\n\n媒体查询的语法如下：\n\n```css\n@media 媒体类型和条件 {\n  // 样式表\n}\n```\n\n通常，我们会为某种设备类型单独添加样式，诸如：\n\n- all 所有设备\n- print 打印预览模式\n- screen 屏幕\n- speech 语音合成器\n\n最常用的即 screen 屏幕，用户体验设计得较好的产品则会全面考虑其他设备类型。\n\n此外便是其他条件，诸如：\n\n- (min-width: 960px): 宽度至少为为 960px 时\n- (max-width: 960px): 宽度最大为 960px 时\n- (aspect-ratio: 11/5): 长宽比为 11 比 5 时\n- ...\n\n诸多条件，根据需求按文档处理，不同的条件可以使用逻辑操作符联和起来：\n\n- `and` 与\n- `not` 非\n- `only` 限定\n- `,` 或\n\n举个例子：\n\n```css\n@media screen and (aspect-ratio: 11/5) {\n  ...;\n}\n```\n\n则为长宽比为 11:5 的屏幕设备添加样式。\n\n### sass 媒体查询\n\nok，使用`sass`编写媒体查询之前为了方便，我们来创建一个片段文件`_mixins.scss`：\n\n```scss\n@mixin responsive($breakpointer) {\n  @if $breakpointer == mobile {\n    @media screen and (max-width: 480px) {\n      @content;\n    }\n  } @else if $breakpointer == tablet {\n    @media screen and (min-width: 768px) {\n      @content;\n    }\n  } @else if $breakpointer == desktop {\n    @media screen and (min-width: 960px) {\n      @content;\n    }\n  }\n}\n```\n\n之后便可以在其他`sass`文件中`@import mixins`引入提前准备好的`mixin`，示例如下：\n\n```scss\n@import mixins .container @include responsive(tablet) background: purple @include\n  responsive(mobile) background: blue @include responsive(desktop) background: tomato;\n```\n\n> 笔者更喜欢 .sass ，在写的时候混入了。\n\n从某种程度上看，我们已经可以直接用这个`mixin`来写诸多样式了，搞定？\n\n直到我看到这个项目：\n\n[eduardoboucas/include-media: 📐 Simple, elegant and maintainable media queries in Sass](https://github.com/eduardoboucas/include-media)\n\n以及这篇文章：\n\n[Approaches to Media Queries in Sass - CSS-Tricks](https://css-tricks.com/approaches-media-queries-sass/)\n\n还有这个：\n\n[Breakpoint](http://breakpoint-sass.com/)\n\n> 我突然意识到我得把我写的`mixin`删除干净，以免丢人现眼。\n\n### 更好的方案\n\n上述几个 🔗 链接有 GitHub 仓库，有 css-stricks 文章，还有一个断点概念介绍。\n\n每个人心里都有自己喜欢的方案，我打算就在前人栽好的树下乘凉：\n\n`Eduardo Bouças’s`的作品`include-media`!\n\n我们可以通过`npm`直接安装`include-media`，然后在`sass`文件中导入并且使用：\n\n```scss\n@import include-media $breakpoints:\n  (phone: 480px, tablet: 768px, desktop: 1024px) .container @include media(\n    \">=phone\",\n    \"<=tablet\"\n  ) background-color: purple @include media(\">=tablet\", \"<=desktop\")\n  background-color: blue @include media(\">desktop\") background-color: red width:\n  4rem height: 4rem;\n```\n\n相比较与其他的硬编码方式，`include-media`支持定义自定义的断点，并且通过\">=\"这样的比较符号来更`精细`地控制间隔。\n\n上述代码中我添加了断点变量，实际上库已经为我们设定了一系列默认变量，诸如上述几个设备类型，也支持高清屏`retina2x`等条件。使用默认变量还是自定义变量，自定义变量使用什么命名都由你选择。\n\n举个例子：\n\n```scss\n@include media(\">desktop\", \"<=1150px\") {\n  font-size: 4rem;\n}\n```\n\n上述代码可以默认编译出在默认的`desktop`到`1150px`范围内的媒体查询代码，更多示例可查看官方文档。\n\n感谢！\n\n### 参考\n\n- [eduardoboucas/include-media: 📐 Simple, elegant and maintainable media queries in Sass](https://github.com/eduardoboucas/include-media)\n- [Approaches to Media Queries in Sass - CSS-Tricks](https://css-tricks.com/approaches-media-queries-sass/)\n- [Breakpoint](http://breakpoint-sass.com/)\n","title":"使用sass高效编写媒体查询","date":"2021/12/19","tags":["Sass"],"mainImg":"https://images.unsplash.com/photo-1611175697352-c8a3d5719783?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4NjAwMzk&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611175697352-c8a3d5719783?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4NjAwMzk&ixlib=rb-1.2.1&q=80&w=400","intro":"此前一直使用第三方库的功能编写媒体查询代码，最近则需要单独使用 sass 来写媒体查询，本文记录如何处理这个问题。"}},"__N_SSG":true}