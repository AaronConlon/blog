{"pageProps":{"post":{"slug":"Javascript,I-promise","content":"\n大家好，今天我们要分享的知识点是`Promise`与异步编程。\n\n`Promise`是对尚不存在结果的对象的一个替身，也许你曾看到类似的术语，例如`future`/`delay`/`deferred`等，实际上这些术语描述的是一个相同的概念，都是一种异步程序执行的机制。\n\n接下来我们分享的知识将涉及以下内容：\n\n- 函数回调\n- Promise 浅析\n- Async / await\n- Promisify\n\n# 1. 回调\n\nJavaScript 语言为了让部分任务按异步的方式进行，提供了编写`回调函数`的方法，让某些任务在达成一些条件之后再执行开发者指定的`回调函数`。\n\n举两个例子:\n\n```js\nconst callbackFn = () => {\n  // balabala\n};\n// browser\nsetTimeout(callbackFn, 1000);\n\n// nodejs\nconst fs = require(\"fs\");\nfs.readFile(\"filename\", (err, data) => {\n  if (err) throw err;\n  // balabala\n});\n// more\nconsole.log(1);\n```\n\n如上所示，要么延迟执行回调，要么读取文件后执行回调，二者都不会立即执行从而阻塞主线程，而是各自具有自己的执行条件，满足条件后放入任务循环队列中等待主线程空闲才得以取出并执行。\n\n上述回调函数在某些场景下曾让开发者写出如下类型的代码：\n\n```js\nfs.readFile(\"file1.txt\", function (err, data) {\n  if (err) throw err;\n  // ...一些操作\n  fs.readFile(\"file2.txt\", function (err, data) {\n    if (err) throw err;\n    // ...一些操作\n    fs.readFile(\"file3.txt\", function (err, data) {\n      if (err) throw err;\n      // ...一些操作\n      fs.readFile(\"file4.txt\", function (err, data) {\n        if (err) throw err;\n        // ...一些操作\n      });\n    });\n  });\n});\n```\n\n为什么会这样？因为某些场景下需要对异步操作进行排序，需要保证运行逻辑具有一定的顺序，并且还需要对每一个回调进行错误处理。\n\n上述案例省略了真实的逻辑代码，我们可以看出这种回调的嵌套让代码很容易失控，并且难以阅读和维护。\n\n无论是写下这段代码的人还是阅读这段代码的人都被其所\"折磨\"，我们将此类代码结构称为`“回调地狱”`。\n\n即使我们将之摊开，为每一个回调函数都编写一个具名的独立函数来调用，依然可读性不佳：\n\n```js\nfs.readFile(\"file1.txt\", step1);\n\nfunction step1(err, data) {\n  if (err) throw err;\n  // ...\n  fs.readFile(\"file2.txt\", step2);\n}\nfunction step2(err, data) {\n  if (err) throw err;\n  // ...\n  fs.readFile(\"file3.txt\", step3);\n}\nfunction step3(err, data) {\n  if (err) throw err;\n  // ...\n  fs.readFile(\"file4.txt\", step4);\n}\nfunction step4(err, data) {\n  if (err) throw err;\n  // ...\n}\n```\n\n这些独立函数的命名也许会让开发者觉得非常不适，为了展开层层嵌套，我们编写了许多几乎不会被`重用`的函数，即使现代编辑器在代码跳转的功能上非常方便，阅读此类代码的时候依然会让我们不断的转移视线。\n\n> “懒惰”使人进步。\n\n使用`Promise`,可以避免此类问题，显著减少编码量，提高代码的可读性。\n\n# 2. Promise\n\n> IE 浏览器不支持`Promise`,我们可以使用`bluebird`或`es6-promise`等第三方库.\n\n## 2.1 promise 浅析\n\n使用`new`实例化的`Promise`对象具有三种状态:\n\n- `Fulfilled` - `has resolution`: resolve 成功,调用 `onFulfilled`函数\n- `Rejected` - `has rejection`: reject, 调用`onRejected`函数\n- `Pending` - `unresolved`: 初始化状态\n\n> 短横线左边是`Promise/A+`术语,而右边则是`ES6 Promise`术语.\n\n![](https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-1582215000590-ffa807c19d5f6959de485fc66664e123.png)\n\n初始状态为`pending`,转为`Fulfilled`或者`Rejected`之后不会再有变化.`Fulfilled`和`Rejected`状态也被称为`Settled`。\n\n`Promise`的状态流转并不复杂，但是我们需要注意其中一些细节。\n\n> 本文不会对`promise`做面面俱到的介绍,推荐阅读官方文档.\n\n首先,我们来创建一个`promise`实例:\n\n```js\n// 实例化\nconst promise = new Promise((resolve, reject) => {\n  // balabala\n  if(...) {\n    // 实例状态变更，设置值\n    resolve(value) // success\n    resolve(...) // 忽略\n  } else {\n  \treject(reason) // failure\n  }\n})\n// 链式调用，实例方法 then 返回一个新的实例\npromise\n  .then(function(value) {\n\t\t// balabala\n  })\n\t.then(function(value) {\n\t\t// balabala\n  })\n\t.catch(reason => {\n  \t// balabala\n  })\n\t.finally(() => {})\n```\n\n上述示例展示了`promise`的一些特性，如实例化、状态转换赋值、链式调用和异常处理，下面我们会讲到静态方法和实例方法。\n\n## 2.1 Promise 构造器\n\n我们通过`new Promise(executor)`实例化一个`promise`的时候,其状态为`pending`.在实例化的时候传入一个函数`executor（执行器）`，此函数将会获取两个实参`resolve`和`reject`函数，二者都可以改变实例的状态和值。\n\n> 不提供 `executor` 将抛出 `typeError`\n\n上述代码的片段：\n\n```js\n// 实例化\nconst promise = new Promise((resolve, reject) => {\n  // balabala\n  if(...) {\n    // 实例状态变更，设置值\n    resolve(value) // success\n    resolve(...) // 忽略\n  } else {\n  \treject(reason) // failure\n  }\n})\n```\n\n需要关注以下几点：\n\n- `Executor`函数的参数没有限制，但通常我们会声明两个形参函数：`resolve`和`reject`，`executor`内部使用此二者可以显式地转换`Promise`实例的状态，设置其值。（不使用这两个函数来转换实例状态意味着此实例的状态不会改变，这也写并没有多大意义）。\n- `resolve`和`reject`函数的实参可以是不同类型的值，但是会被进一步处理。也就是说，显示转换状态设置值的时候，传入的参数不一定会直接作为`settled`状态的值。\n- `pending`状态到`settled`状态是不可逆的，并且在`executor`中的`resolve`和`reject`函数只能执行一次，后续再执行将会被忽略。\n\n> `executor`函数是同步执行的。`resolve`和`reject`函数接收任意类型的值。\n\n我们来看看给`resolve`函数传入以下三种不同的值会有怎样的结果。\n\n- 原始类型值\n- Promise 实例\n- thenable 对象\n\n首先是`原始类型值`：\n\n```js\nconst p = new Promise((resolve, reject) => {\n  resolve(Symbol())\n  // resolve(1)\n  // resolve('1')\n  // resolve(null)\n  // resolve(undefined)\n  // resolve(1n)\n  // resolve(true)\n  // reject 也是如此\n})\n\np.then((v) => {\n  console.log('resolve'， v);\n}).catch((i) => {\n  console.log('reject', i);\n})\n```\n\n原始类型数据传入`resolve`函数，都能顺利将状态转为`fulfilled`并且设置为当前状态下的值。使用`reject`函数则将状态转为`rejected`,值则是原始类型的值。\n\n其次，来看看传入`Promise`对象。\n\n```js\nconst p = new Promise((resolve, reject) => {\n  resolve(Promise.resolve(1))\n  // or\n  reject(Promise.resolve(1))\n})\np.then((v) => {\n  console.log('resolve', v);\n}).catch((i) => {\n  console.log('reject', i)\n})\n// output\nresolve 1\n```\n\n如果传入给`promise`的参数也是一个`Promise`实例，则相当于一个空包装，最终将得到一个相同状态和值的`Promise`实例。\n\n> `reject(Promise.resolve(1))` 不会照搬`resolve`的特性，对于传入一个`Promise`实例的情形，会将之作为`Rejected`状态下的`reason`。\n\n```js\nconst p = new Promise((resolve, reject) => {\n  resolve(Promise.reject(1))\n})\n// output\nreject 1\n```\n\n接着我们来看看传入一个普通的 `thenable` 对象。\n\n> 具有`then`方法的对象称为`thenable`对象，`Promise`实例对象也是一种`thenable`对象。\n\n```js\nconst obj = {\n  name: 'Miao',\n  then() {\n    console.log('this is then', arguments);\n    arguments[0](1)\n  }\n}\nconst p = new Promise((resolve, reject) => {\n  resolve(obj)\n})\n\np.then((v) => {\n  console.log('resolve', v);\n}).catch((i) => {\n  console.log('reject', i)\n})\n// output\nthis is then [Arguments] {\n  '0': [Function (anonymous)],\n  '1': [Function (anonymous)]\n}\nresolve 1\n```\n\n`executor`内`resolve`一个`thenable`对象，则会将`then`方法视作一个`executor`，在其内部可以显示编写`resolve`和`reject`的逻辑来改变整个`Promise`实例的状态和值。\n\n## 2.2 Promise 实例方法\n\n`Promise`实例有三个实例方法：\n\n- `then`\n- `catch`\n- `finally`\n\n> 重申：`promise`实例的状态转换是单向的,一旦`settled`则不可逆转,同时我们可以多次利用此`settled`状态的实例。\n\n首先是`then(onFulfilled, onRejected)`方法，此方法接收两个回调函数作为参数，在`Promise`状态为`pending`的时候，我们可以将此方法理解为注册状态转变为`Fulfilled`和`Rejected`后执行的回调函数，并且这些回调函数的执行是异步的。\n\n> `Promise`只能转换一次，因此上述两个参数的操作是互斥的。\n\n在实现上`Node`可以通过`process.nextTick`来创建新的微任务，在浏览器端则可以通过`MutationObserver`功能创建微任务。\n\n以下两种`then`函数的传参都会被忽略, 并且异步返回一个相同值的`Promise`新实例：\n\n```js\n// 传非函数处理对象\nPromise.resolve(1).then('sss')\n// 不传值\nPromise.resolve(1).then()\n\nconst p = Promise.resolve(1)\nlet c = p.then()\nconsole.log(p);\nsetTimeout(() => {\n  console.log(c);\n}, 200);\n// output\nPromise { 1 }\nPromise { 1 }\n```\n\n不推荐编写上述`then`方法，我们只需要知道此种情形`Promise`会如何处理整体的逻辑流程。\n\n> 无论`Promise`实例处于何种状态，我们注册回调函数都将异步执行。\n\n其次，`catch`方法可以理解为`then`方法的语法糖形式，我们可以将`then(undefiled, onRejected)`视为`catch(onRejected)`一种形式，开发者可以自由选择如何编写`Promise`实例从`pending`转为`settled`状态后的异步回调函数。\n\n最后，`finally`方法则相当于注册一个`Promise`实例`settled`之后的清理方法，通常我们可以传入一个具有清理功能的函数作为参数。\n\n> `finally`返回一个新的`Promise`实例，`finally`设计为一个与状态无关的方法，大多数情况下只是传递上层的`Promise`，除非显式地返回一个新的`Promise`实例，或者抛出异常返回`Rejected`状态的实例。\n\n让我们来写一个示例：\n\n```js\nnew Promise((resolve ,reject) => resolve(1))\n  .then(() => {\n    console.log('1');\n  })\n  .then((v) => {\n    console.log('2', v);\n    throw new Error('my error')\n  })\n  .then(() => {\n    console.log('3');\n  })\n  .catch(err => {\n    console.log('catch any error');\n    return 4 // 或者 return Promise.resolve(4)\n  })\n  .then((v) => {\n    console.log('4', v);\n    return 5\n  })\n  .finally(() => {\n    console.log('finally');\n  })\n  .then(v => {\n    console.log(5, v);\n  })\n// output\n1\n2 undefined\ncatch any error\n4 4\nfinally\n5 5\n```\n\n> `Promise`实例支持链式调用,每个`then`函数内部最后将返回一个全新的`promise`实例。\n\n`then`方法默认返回一个值为`undefined`,状态为`fulfilled`的`Promise`实例.\n\n> `回调函数`的写法编写可以一次性监听所有回调函数的错误处理逻辑是很困难的,`Promise实例`的实例方法`catch`能处理链式调用之前所有的`then`函数错误和显式的`reject`行为.\n\n`catch`方法能处理链式调用之前所有的异常，也就是说当前面的`Promise`状态转为`rejected`的时候，会\"跳过\"`then`方法，从而执行`catch`方法注册的异步回调。\n\n> `Promise`的异步注册监听函数的执行顺序取决于使用实例方法添加的顺序。\n\n## 2.3 Promise 静态方法\n\n`Promise`类具有两个能创建一个新的实例的静态方法:\n\n- Promise.resolve(value)\n- Promise.reject(reason)\n\n二者区别在于返回的`promise`实例的状态,前者为`fulfilled`,后者为`rejected`.\n\n`Promise.resolve(value)`可以视为以下代码的简写:\n\n```js\nnew Promise((resolve) => {\n  resolve(value);\n});\n```\n\n`Promise.reject(reason)`亦类似。\n\n再次重申，传入的实参`（value/reason）`可以有几种情形：\n\n- 如果`value`是一个原始数据类型的值，则设置`Promise`实例值为此值，状态设置为`fulfilled`\n- 如果`value`是一个`Promise`实例，则沿用此实例的状态和值。\n- 如果传入的实参是一个非`Promise`的`thenable`对象，则调用此对象的`then`方法，并且传入`resolve`和`reject`作为实参,将`then`方法作为`executor`，在内部可以设置当前实例的状态和值, 必须显示调用`resolve`或者`reject`方法，使用`return`其他值则无效。\n\n```js\nconst obj = {\n  name: 'o',\n  then() {\n    console.log('this is then', arguments);\n    arguments[1](1)\n  }\n}\nconst p = Promise.resolve(obj)\np\n\t.then(r => console.log('resolve', r))\n  .catch(r => {\n\t\tconsole.log('reject', r);\n\t})\n\n// output\nthis is then [Arguments] {\n  '0': [Function (anonymous)],\n  '1': [Function (anonymous)]\n}\nreject 1\n```\n\n此外,`Promise`类还有如下几个静态方法:\n\n- `Promise.all(iterable)`\n- `Promise.race(iterable)`\n- `Promise.any(iterable)`\n- `Promise.allSettled(iterable)`\n\n这几个静态方法各有其应用场景.\n\n> 是否支持这些静态方法取决于当前环境,例如在`IE`浏览器下无法使用`Promise`，在`Node14`下无法使用`Promise.allSettled`，我们可以使用第三方库来进行替换，例如`bluebird`。\n\n### 2.2.1 all\n\n首先,`Promise.all(iterable)`方法接收一个`iterable`对象（通常是数组）作为参数,最终返回一个新的`promise 实例`.\n\n> 如果`iterable`对象是空的,则返回的结果是空数组(尽管我们不太会这么做).\n\n我们通过示例代码来理解规范:\n\n```js\nlet p1 = Promise.all([1, Promise.resolve(2)]);\n```\n\n合成的`Promise`将在所有内部`Promise`实例转化为`Fulfilled`状态后转换为`Fulfilled`状态，其值是一个可迭代对象转化为`Promise`解决之后的值的数组。\n\n> 可迭代对象将会通过`Promise.resolve`方法转换为`Promise`实例。\n\n如果一旦其中之一出现`rejected`状态的`promise 实例`,则合成的`Promise`实例的状态转化为`rejected`,且值为最先出现的`rejected`状态实例的值.\n\n我们可以使用`Promise.all`来执行一组异步操作,这些操作的时间花费取决于最长的那个元素,并且最终如果一切顺利,则结果的顺序是不变的.\n\n`Promise.all()`方法适用于`合并请求`的场景,例如某些项目中,提交的多个数据需要调用云端接口进行数据校验,当所有数据都通过校验的时候才能执行下一步操作,来看看代码:\n\n```js\n// 有一个返回 promise 对象的 asyncApi 函数\n// 每一个 test 函数都是一个异步的测试\nconst test = (value) => asyncApi(value);\nPromise.all([test(\"xxx\"), test(\"xx\"), test(\"x\")])\n  .then((results) => {\n    results.forEach((result) => {\n      // balabala 你的代码逻辑\n      // 都通过了\n    });\n    // do more...\n  })\n  .catch((error) => {\n    // 失败的值, balabala\n    console.log(error);\n  });\n```\n\n### 2.2.2 race\n\n`Promise.race(iterable)`如其名,类似于`Promise.all()`,接收同类型参数,一旦迭代器中某个`promise`状态转化为`settled`,立即返回此`Promise`实例.\n\n> 传入的迭代为空的话,返回的`promise`始终`pending`.\n\n`Promise.race()`非常适合做异步请求的`超时`处理.来看一个例子:\n\n```js\n// asyncApi() 返回 promise\nfunction timeout(ms) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      reject(`timeout: ${ms} ms`);\n    }, ms);\n  });\n}\n\nPromise.race([asyncApi(\"xx\"), timeout(5000)])\n  .then((res) => {\n    // success\n  })\n  .catch((error) => {\n    // timeout or error\n  });\n```\n\n### 2.2.3 any\n\n`Promise.any(iterable)`是`Promise.all()`的反面,其语法无异.\n\n需要注意的是如果传入的迭代器是空的,则返回`rejected`的`promise `实例.只要有一个成功,则返回此结果.如果迭代器内的`promise`全部返回`rejected`状态,则最终返回`rejected`的`promise`实例.\n\n因此,此方法适用于验证多个异步结果中是否有`fulfilled`的`promise`实例.\n\n如果我们需要向多个数据源获取某一个数据,则可以使用此方法最快速的获取到数据,亦或者所有异步请求都失败.\n\n### 2.2.4 allSettled\n\n`Promise.allSettled(iterable)`方法返回一个在所有给定的`promise`转为`settled`状态后的数组,数组元素是每一个`promise`结果.\n\n如果我们有多个互不依赖的`异步任务`,或者我们总想知道每个`promise`的结果,而不需要其中的`rejected`状态`promise`去引发`catch`,来看看`MDN`的例子:\n\n```js\nconst promise1 = Promise.resolve(3);\nconst promise2 = new Promise((resolve, reject) =>\n  setTimeout(reject, 100, \"foo\")\n);\nconst promises = [promise1, promise2];\n\nPromise.allSettled(promises).then((results) =>\n  results.forEach((result) => console.log(result))\n);\n```\n\n输出是:\n\n```shell\n> Object { status: \"fulfilled\", value: 3 }\n> Object { status: \"rejected\", reason: \"foo\" }\n```\n\n如上所示,状态为`fulfilled`时,具有`value`,状态为`rejected`时,具有`reason`.\n\n还记得我们在`Promise.all()`中的迭代器返回的是`promise.catch(err => err)`吗?其实,使用`Promise.allSettled()`相对更好.\n\n## 2.3 Promise 的优劣\n\n`Promise`的出现促进了`异步`编程的发展,我们可以在浏览器端和`node`端看到统一的`Promise`代码.还记得`callback`回调函数的参数约定吗?\n\n```js\nfunction foo(param, (err, data) => {\n  if(err) {\n    // balabala\n  }\n  // balabala\n})\n```\n\n这种参数约定是脆弱的,开发者可以不按此约定编写回调函数,这类隐藏`bug`可能就此而生.\n\n`Promise`的出现,我们必须使用其实例方法`then`和`catch`去按规范编码,否则将会出错,开发者也可以看到明显的错误提示信息.\n\n我们再来看看如下两个例子:\n\n```js\n// callback\nfs.readFile(name, opts?, (err, string|Buffer) => void)\n// Promise\nreadFilePromisified(name, opts?): Promise<string | Buffer>\n```\n\n`Promise`方案让函数参数和回调解耦开来,所有的参数都用于此函数的输入.\n\n`Promise`在处理单次异步任务的时候表现良好,但是对于多次触发的任务便显得乏力,也许我们需要学习一些`响应式编程`技术,以解决此类问题.\n\n对于`ES6 Promise`来说,缺乏两项很实用的功能:\n\n- 取消任务(在组件被删除后取消异步任务等)，TC39 委员会实际上准备增加此特性，但最终提案被撤回了，但是没关系，`Bluebird`实现了此功能，我们也可以对此特性进行补充，例如利用`setTimeout`定时器函数可以被取消的特性，编写一些逻辑代码和`Promise`取消状态转换的功能函数。\n- 进度追踪(显示进度条等)，原生不支持此特性的原因是担心此特性会导致`Promise`的链式调用和类似`all`静态方法的复杂度增加。\n\n原生`Promise`暂未支持上述两项特性,也许我们可以看看类似`Bluebird`这样的第三方库，它们功能强大并且被广泛使用，值得信赖。\n\n# 3. async / await\n\n提及异步函数，`async/await`语法关键字一定是绕不开的知识点，这是一种使用 `Promise`的特殊语法，并且非常容易理解和使用。\n\n我们直接看示例：\n\n```js\nasync function foo() {\n  // balabala\n  return 1;\n}\n```\n\n> 可以理解为 async 函数最后显式返回的值经过 Promise.resolve 函数的转化，返回一个新的 Promise 实例\n\n在函数前添加`async`标识此函数总是返回一个`Promise`实例,即使我们显示指定其他的类型值的返回值，也会被包装成一个`Promise`并返回，当然，依然推荐显示地指定返回`Promise`。\n\n使用`async`关键字可以让函数具有`异步`特征，但总体上代码依然是`同步`求值的。\n\n举个例子：\n\n```js\nasync function foo() {\n  console.log(1);\n}\nfoo();\nconsole.log(2);\n// output\n1;\n2;\n```\n\n> 异步函数具有暂停和恢复执行的功能是十分必要的。\n\n使用`await`关键字可以暂停异步函数的执行并且等待返回的`Promise`实例进入`settled`状态。\n\n关键词`await`只在`async`函数内有效：\n\n```js\nasync function foo() {\n  const res = await axios.get(\"your url\");\n}\n```\n\n在日常工作中无论是浏览器还是`Nodejs`，都可以看到`await`的身影。\n\n那么，为什么我们更推荐使用`async/await`语法，它又有怎样的细节需要我们关注的呢？\n\n来看以下几点特性：\n\n- 顶层`await`：此提案当前依然是 `stage 3`，在正式进入稳定版之前，顶层对于`await`的使用依然需要立即执行表达式（IIFE），不幸的是，这种模式导致图形执行和应用程序的静态可分析性的确定性降低。由于这些原因，缺少顶层 `await` 被认为比该功能带来的危害有更高的风险。\n- 顶层 `await` 仅限于 ES 模块。明确不支持`CommonJS`模块。\n- `await`支持`thenable`对象,如果其后是一个`thenable`对象，则会执行此对象的`then`方法，并且传入`resolve`和`reject`函数作为参数，最终得到一个`settled`的`Promise`实例。\n- `await`和`Promise.all`等静态方法配合良好。\n\n```js\nconst res = await Promise.all([\n  promise1,\n  promise2,\n  ...\n])\n```\n\n- Error 处理\n\n> `async/await`配合`try...catch..`可以更清晰地同时处理同步和异步的异常\n\n让我们来看一个例子：\n\n```js\nconst makeRequest = async () => {\n  try {\n    const data = JSON.parse(await getJSON());\n    console.log(data);\n  } catch (e) {\n    console.log(e);\n  }\n};\n```\n\n无论是异步函数`getJSON()`还是同步函数`JSON.parse()`都能被同一个`try...catch...`结构对异常进行处理，代码逻辑相对使用`Promise.then / catch`的方式来说会更清晰，可读性更强。\n\n也许可读性的评判更容易掺杂主观意识，但是对于异步`Debug`代码来说，`async/await`显然更轻松。\n\n为什么？我想有以下两点理由：\n\n- 在`then`中难以对箭头函数下断点\n- 即使是在 `then`中下了断点，类似单步步入的操作也不会得到预期的结果，原因在于这种调试方式只能在同步代码中使用。\n\n我们来看两个示例：\n\n```js\nconst makeRequest = () => {\n  return callAPromise()\n    .then(() => callAPromise())\n    .then(() => callAPromise());\n};\n// async / await\nconst makeRequest = async () => {\n  await callAPromise();\n  await callAPromise();\n};\n```\n\n在调试过程中由于`await`的特殊性，我们可以像调试同步代码这么方便自然。\n\n> 另外，使用`async / await`语法，我们应该留心异步代码的平行加速问题。\n\n来看示例：\n\n```js\nasync function delay(id) {\n  return new Promise((res) => {\n    setTimeout(() => {\n      console.log(`task ${id} finished.`);\n    }, 1000);\n  });\n}\nasync function demo1() {\n  await delay(1);\n  await delay(2);\n  await delay(3);\n}\ndemo1();\n// 另一个 demo\nasync function demo2() {\n  const p1 = delay(1);\n  const p2 = delay(2);\n  const p3 = delay(3);\n  await p1;\n  await p2;\n  await p3;\n}\n```\n\n对于没有异步执行顺序需求的`async/await`语法来说，我们可以一次性初始化其异步任务，然后再分别等待其结果即可。\n\n> 在重视`性能`的应用中，使用`async/await`语法可以减少内存的占用。\n\n在使用`new Promise`初始化时，我们创建`Promise`实例的函数即使是在处理程序转换`Promise`实例的状态时依然被保存在栈追踪信息内，然而我们知道这些信息随着初始化函数的返回其实已经没有必要存在了，但是`Javascript`引擎会在创建`Promise`时尽可能保存完整的调用栈，在抛出错误时调用栈可以由运行时的错误处理逻辑获取，故我们能在栈追踪信息中看到它们，最终占用一些内存，增加了计算和存储成本。\n\n如果我们使用`async/await`语法：\n\n```js\nfunction fooPromiseExecutor(resolve, reject) {\n  setTimeout(reject, 1000, \"bar\");\n}\n\nasync function foo() {\n  await new Promise(fooPromiseExecutor);\n}\nfoo();\n/// Uncaught (in promise) bar\n// foo\n// async function (async)\n// foo\n```\n\n由于`fooPromiseExecutor`已经返回，故不在错误信息中了。\n\n`Javascript`运行时可以简单地在嵌套函数中存储指向包含函数的指针，就如同对待同步函数一样，指针时机存储在内存中，用于在出错的时候生成错误信息，如此一来便省去了这“微小”的消耗。\n\n最后我想说，相对于使用`Promise`的实例方法来编写异步代码，使用`async/await`的语法，显然代码量将会减少 🐶，何乐而不为？\n\n# 4. Promisify\n\n`Promise`很棒，但是遵循常见的错误优先的回调风格的函数依然可以在许多场景下活跃着，无论是其开发者在编写代码的时候还未出现`Promise`，亦或是开发者更喜欢回调风格的范式，跟这些回调风格的函数打交道似乎无可避免。\n\n> Nodejs 官方提供了 util.promisify 工具函数用于将传统回调风格的函数转换为返回`Promise`的函数。\n\n我们可以构建一个将`callback`风格的函数转换为`Promise`风格的函数的工具函数。\n\n```js\nfunction promisify(f, multiArgs = false) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      function callback(err, ...results) {\n        err ? reject(err) : resolve(multiArgs ? results : results[0]);\n      }\n      args.push(callback);\n      f.call(this, ...args);\n    });\n  };\n}\n\nconst fs = require(\"fs\");\nconst fsPromise = promisify(fs.readdir);\nfsPromise(\".\")\n  .then((r) => {\n    console.log(\"resolve\", r);\n  })\n  .catch((r) => {\n    console.log(\"reject\", r);\n  });\n// output\nresolve[\"index.js\"];\n```\n\n在这个转换过程中，我们将原来的函数包裹进去，并且返回一个可执行的函数，这个函数接收的参数跟原来的`回调风格`函数一致，只是将之转换为`Promise`风格的函数后，传参可以省略`回调函数`，我们在内部构建了一个回调函数，并且将之作为原函数的回调部分作为参数传给了返回函数。\n\n现在，我们将传统回调风格的函数转化为返回`Promise`的函数了，我们可以放心使用`Promise`的新特性了。\n\n# 参考\n\n- [Exploring ES6 - exploring-es6.pdf](chrome-extension://bocbaocobfecmglnmeaeppambideimao/pdf/viewer.html?file=file%3A%2F%2F%2FUsers%2Fyi%2FDesktop%2Fexploring-es6.pdf)\n- [architecture - Difference between event handlers and callbacks - Stack Overflow](https://stackoverflow.com/questions/2069763/difference-between-event-handlers-and-callbacks)\n- [javascript - addEventListener vs onclick - Stack Overflow](https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick)\n- [Getting Started | bluebird](http://bluebirdjs.com/docs/getting-started.html)\n- JavaScript 高级程序设计\n- [现代 JavaScript 教程](https://zh.javascript.info/)\n- [JavaScript | promise resolve() Method - GeeksforGeeks](https://www.geeksforgeeks.org/javascript-promise-resolve-method/)\n- [Error handling with Async/Await in JS | by Ian Segers | ITNEXT](https://itnext.io/error-handling-with-async-await-in-js-26c3f20bc06a)\n- [Understanding JavaScript Promises](https://nodejs.dev/learn/understanding-javascript-promises)\n- [util.promisify(original) | Node.js API 文档](http://nodejs.cn/api/util/util_promisify_original.html)\n","title":"Javascript,I promise - 异步编程","date":"2021/4/9","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=400","intro":"Promise, JavaScript 世界中的异步处理对象.我阅读了 Dr.Axel 前辈的电子书,充满感激."}},"__N_SSG":true}