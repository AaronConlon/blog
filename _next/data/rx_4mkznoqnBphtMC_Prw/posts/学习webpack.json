{"pageProps":{"post":{"slug":"学习webpack","contentHtml":"<p>道阻且长,唯有坚持不懈,我等凡俗才能稍微靠近那些天才们.</p>\n<p>2021年01月13日00:33:47 休息了,早起,尽量慢慢不要熬夜.</p>\n<blockquote>\n<p>webpack 是什么?</p>\n</blockquote>\n<p>简单来说,webpack 是一个大包工具.</p>\n<p><img src=\"https://www.ma-no.org/cache/galleries/contents-1806/webpack-how-it-works.jpeg\" alt=\"\"></p>\n<p>我们在创建为项目编写代码的时候,会用到非常多的素材和代码文件.但是类似<code>sass</code>或者<code>typescript</code>等技术需要通过一些必要的流程转化为构建项目的基础内容.</p>\n<p>就像<code>sass</code>需要转为<code>css</code>文件,<code>typescript</code>需要转化为<code>js</code>代码,而<code>js</code>代码又遇到了新的问题.</p>\n<p><code>js</code>一直在不断发展,新的功能被国际化组织制定和推广开来,作为广大开发者之一,我很开心能使用<code>ECMAScript</code>的最新特性,这些特性为我提供了强力的功能,减少了我的日常开发工作量,提高效率,增强代码的<code>美感</code>和<code>可读性</code>.</p>\n<p>举个例子,不同浏览器厂商对最新的<code>ECMAScript</code>标准支持度不同,对规范中少数并未声明的细节的技术实现也不尽相同,甚至,被广大开发者诟病的<code>IE</code>浏览器,在其<code>11</code>版本中连2015年制定的<code>ES6</code>规范都不支持(尽管有他自己的限制,我们也应该感激和尊重他).</p>\n<p>开发者为了满足不同用户的需要,需要为不同浏览器做兼容性开发,于是不同的<code>polyfill</code>应运而生,加载了这些补充性的代码,我们终于可以使用一套<code>ECMAScript</code>规范进行开发.</p>\n<blockquote>\n<p>懒惰使人进步.</p>\n</blockquote>\n<p>我相信那些绝顶的技术大牛都是很懒惰的,这些重复繁杂且无趣的工作,就应该交给机器自动处理.于是乎,各种开发辅助工具和库出现了.</p>\n<blockquote>\n<p>在技术的圈子里,技术是开发者被人尊敬的绝对原因之一. (个人观点)</p>\n</blockquote>\n<p>聪明的应用<code>webpack</code>的功能,定制化自己和团队的配置,能让我们减少许多枯燥的工作内容,提高效率.</p>\n<p>正如上面的那张图一样, <code>webpack</code> 可以对不同扩展名的文件针对性的进行处理,需要转化的就使用相应默认或者指定的工具或者功能去转化.</p>\n<p><code>webpack</code>功能强大,从项目初始化,到开发,规范化,功能定制和测试,资源管理和构建压缩都能通过独特的配置和其生态中庞大的资源来支持我们需要的功能,处理特定问题.</p>\n<p>最后,打包出可以用于生产环境的资源.</p>\n<p>话不多说,让我再次一步步学习使用<code>webpack</code>构建开发工作流和熟悉其工作原理.</p>\n<h1>安装使用</h1>\n<p>首先,创建一个学习目录,进入并且初始化项目,这里我使用<code>yarn</code>进行初始化,并且制定依赖为<code>-D</code>,使用开发依赖,在正式构建应用的时候不需要进行依赖.</p>\n<pre><code class=\"hljs language-BASH\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\"># 初始化项目,安装依赖</span>\n<span class=\"lineNumber\">2</span>$ yarn init -y\n<span class=\"lineNumber\">3</span>$ yarn add -D webpack webpack-cli\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\"># 本地仓库,增加.gitignore</span>\n<span class=\"lineNumber\">5</span>$ touch .gitignore</code></pre> \n\n<p>接下来看看<code>package.json</code>文件的内容:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"webpack\"</span>\n<span class=\"lineNumber\">8</span>  },\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attr\">\"dependencies\"</span>: {},\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^5.15.0\"</span>,\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^4.3.1\"</span>\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>当前<code>webpack</code>为<code>5.15.0</code>版本,在<code>scripts</code>这里写入了一个<code>dev</code>项,于是我们便可以使用<code>yarn dev</code>调用<code>webpack</code>了.</p>\n<p>再次重申,<code>webpack</code>并未全局安装,而是安装在本地,你可以在<code>node_modules</code>目录中看到它,通过在<code>scripts</code>中调用<code>webpack</code>,会自动使用<code>npx webpack</code>进行处理.二者本质上无太大差别.这是<code>yarn</code>或者<code>npm</code>的机制.</p>\n<p><code>webpack</code>作为一个<code>CLI</code>,其默认支持了许多配置项,在最简单的情况下,可以直接使用其功能.不过我觉得除了演示其基础功能这种场景外,开发者都会增强和定制其配置.</p>\n<blockquote>\n<p>默认<code>webpack</code>会将项目目录下的<code>src</code>目录内的<code>index.js</code>打包到<code>dist</code>下,重命名为<code>main.js</code>.</p>\n</blockquote>\n<p>不要在默认机制上止步不前,继续.</p>\n<h1>基础配置</h1>\n<p><code>webpack</code>支持使用配置文件进行定制化功能,通常,开发者们习惯命名第一个配置文件为<code>webpack.conf.js</code>.</p>\n<p>我们不得不说,<code>webpack</code>的一切功能,都从一个<code>entry</code>开始,这个入口点指明了<code>webpack</code>应该从哪一个模块开始构建其内部依赖图谱.如上所说,这个<code>entry</code>默认是<code>src/index.js</code>.</p>\n<p>默认的输出目录是<code>dist</code>目录,以及更多内容待续.首先需要明确的是:</p>\n<p><strong>我们能定制这一切.</strong></p>\n<p>来看看一个简单的<code>webpack.conf.js</code>,这个文件将会被<code>node</code>隐式载入运行:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'./src/index.js'</span>, <span class=\"hljs-comment\">// 入口点</span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">output</span>: {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'out'</span>), <span class=\"hljs-comment\">// 输出目录, path库的api</span>\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'my-first-webpack.bundle.js'</span> <span class=\"hljs-comment\">// 输出构建文件名</span>\n<span class=\"lineNumber\">8</span>  }\n<span class=\"lineNumber\">9</span>};</code></pre> \n\n<p>接着,修改<code>package.json</code>的配置项:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"name\"</span>: <span class=\"hljs-string\">\"webpack\"</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">\"version\"</span>: <span class=\"hljs-string\">\"1.0.0\"</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">\"main\"</span>: <span class=\"hljs-string\">\"index.js\"</span>,\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">\"license\"</span>: <span class=\"hljs-string\">\"MIT\"</span>,\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">\"scripts\"</span>: {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">\"dev\"</span>: <span class=\"hljs-string\">\"webpack --config webpack.conf.js\"</span> <span class=\"hljs-comment\">// 指定了配置文件</span>\n<span class=\"lineNumber\">8</span>  },\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attr\">\"dependencies\"</span>: {},\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">\"devDependencies\"</span>: {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-attr\">\"webpack\"</span>: <span class=\"hljs-string\">\"^5.15.0\"</span>,\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-attr\">\"webpack-cli\"</span>: <span class=\"hljs-string\">\"^4.3.1\"</span>\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>现在,进行构建:</p>\n<pre><code class=\"hljs language-powershell\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">PS</span> C:\\Users\\yy\\test\\webpack> yarn dev\n<span class=\"lineNumber\">2</span>yarn run v1.<span class=\"hljs-number\">22.10</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-variable\">$</span> webpack -<span class=\"hljs-literal\">-config</span> webpack.conf.js\n<span class=\"lineNumber\">4</span>asset my<span class=\"hljs-literal\">-first</span><span class=\"hljs-literal\">-webpack</span>.bundle.js <span class=\"hljs-number\">811</span> bytes [<span class=\"hljs-type\">emitted</span>] (name: main)\n<span class=\"lineNumber\">5</span>./src/index.js <span class=\"hljs-number\">49</span> bytes [<span class=\"hljs-type\">built</span>] [<span class=\"hljs-type\">code</span> <span class=\"hljs-type\">generated</span>]\n<span class=\"lineNumber\">6</span>webpack <span class=\"hljs-number\">5.15</span>.<span class=\"hljs-number\">0</span> compiled successfully <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">75</span> ms\n<span class=\"lineNumber\">7</span>Done <span class=\"hljs-keyword\">in</span> <span class=\"hljs-number\">1.01</span>s.\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-built_in\">PS</span> C:\\Users\\yy\\test\\webpack> <span class=\"hljs-built_in\">ls</span> .\\out\\\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>    Directory: C:\\Users\\yy\\test\\webpack\\out\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span>Mode                 LastWriteTime         Length Name\n<span class=\"lineNumber\">14</span>----                 -------------         ------ ----\n<span class=\"lineNumber\">15</span><span class=\"hljs-literal\">-a</span>---           <span class=\"hljs-number\">2021</span>/<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">17</span>    <span class=\"hljs-number\">15</span>:<span class=\"hljs-number\">13</span>            <span class=\"hljs-number\">811</span> my<span class=\"hljs-literal\">-first</span><span class=\"hljs-literal\">-webpack</span>.bundle.js</code></pre> \n\n<p>现在,构建输出的到了目录<code>out</code>.命名也从<code>main.js</code>变成了我们指定的<code>my-first-webpack.bundle.js</code>.</p>\n<p>想看看构建结果?</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">/*\n<span class=\"lineNumber\">2</span> * ATTENTION: The \"eval\" devtool has been used (maybe by default in mode: \"development\").\n<span class=\"lineNumber\">3</span> * This devtool is neither made for production nor for readable output files.\n<span class=\"lineNumber\">4</span> * It uses \"eval()\" calls to create a separate source file in the browser devtools.\n<span class=\"lineNumber\">5</span> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n<span class=\"lineNumber\">6</span> * or disable the default devtool with \"devtool: false\".\n<span class=\"lineNumber\">7</span> * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n<span class=\"lineNumber\">8</span> */</span>\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">/******/</span> (<span class=\"hljs-function\">() =></span> { <span class=\"hljs-comment\">// webpackBootstrap</span>\n<span class=\"lineNumber\">10</span><span class=\"hljs-comment\">/*!**********************!*\\\n<span class=\"lineNumber\">11</span>  !*** ./src/index.js ***!\n<span class=\"lineNumber\">12</span>  \\**********************/</span>\n<span class=\"lineNumber\">13</span><span class=\"hljs-built_in\">eval</span>(<span class=\"hljs-string\">\"const a = () => console.log('a')\\r\\nconsole.log(a);\\n\\n//# sourceURL=webpack://webpack/./src/index.js?\"</span>);\n<span class=\"lineNumber\">14</span><span class=\"hljs-comment\">/******/</span> })()\n<span class=\"lineNumber\">15</span>;</code></pre> \n\n<p>入口点的代码非常简单,我定义了一个简单函数而已.<code>通常情况下</code>,你可能并不需要阅读构建之后的代码,并且构建之后的代码可读性实在是没法跟源码相比,上述构建内容还没压缩,压缩之后就更没法看了.</p>\n<blockquote>\n<p>webpack 默认只能识别<code>json</code>和<code>JavaScript</code>格式的文件.</p>\n</blockquote>\n<h1>Loader</h1>\n<p>为了对其他类型的文件进行处理和大包,<code>webpack</code>提供了<code>loader</code>功能.关于<code>loader</code>:</p>\n<p>loader 能将所有类型的文件通过特定插件和功能,将其转化为<code>webpack</code>能有效处理的模块,然后开发者就可以利用其大包功能进行打包.</p>\n<p><code>loader</code>有两个关键选项:</p>\n<ul>\n<li>test: 标识 loader 转换的目标文件,通常用正则表达式进行类型说明</li>\n<li>use: 使用哪个或者哪些<code>loader</code></li>\n</ul>\n<p>继续,那么如何处理我们前端开发绕不开的<code>CSS</code>问题?<code>webpack</code>如何处理这一切?<code>loader</code>可以吗?</p>\n<h1>CSS &#x26; SASS</h1>\n<p>我个人喜欢<code>Sass</code>, 这项技术让我编写<code>css</code>的时候更轻松愉快.为了让<code>Sass</code>文件产生效果,需要做三件事:</p>\n<ul>\n<li>sass转译成css</li>\n<li>css转换成js</li>\n<li>js注入页面DOM,构建style</li>\n</ul>\n<p>为了实现这一需求,我们需要三个<code>loader</code>:</p>\n<ul>\n<li>style-loader: 将 CSS 注入 DOM 中,详情: <a href=\"https://webpack.js.org/loaders/style-loader/\">style-loader | webpack</a></li>\n<li>css-loader:  解释 <code>JS</code>中使用<code>esModule</code>的语法导入<code>CSS</code>文件的行为,支持替换<code>CSS</code>文件中的<code>@import</code>和<code>url()</code>使用<code>import/require()</code>来解析.详情:<a href=\"https://webpack.js.org/loaders/css-loader/\">css-loader | webpack</a></li>\n<li>sass-loader: 转译<code>SASS</code>文件</li>\n</ul>\n<p>以开发模式安装三个库之后,进行<code>webpack</code>配置:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">'development'</span>,\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">'./src/index.js'</span>, <span class=\"hljs-comment\">// 入口点</span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">output</span>: {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">path</span>: path.resolve(__dirname, <span class=\"hljs-string\">'out'</span>), <span class=\"hljs-comment\">// 输出目录, path库的api</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">'my-first-webpack.bundle.js'</span> <span class=\"hljs-comment\">// 输出构建文件名</span>\n<span class=\"lineNumber\">9</span>  },\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">module</span>: {\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-attr\">rules</span>: [\n<span class=\"lineNumber\">12</span>      {\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.sass$/</span>,\n<span class=\"lineNumber\">14</span>        use: [\n<span class=\"lineNumber\">15</span>          <span class=\"hljs-string\">'style-loader'</span>, <span class=\"hljs-string\">'css-loader'</span>, <span class=\"hljs-string\">'sass-loader'</span> <span class=\"hljs-comment\">// 注意顺序,后者先进行处理</span>\n<span class=\"lineNumber\">16</span>        ]\n<span class=\"lineNumber\">17</span>      }\n<span class=\"lineNumber\">18</span>    ]\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>};</code></pre> \n\n<h1></h1>\n","title":"学习webpack","date":"2021/1/13","tags":["webpack","工程化"],"mainImg":"https://images.unsplash.com/photo-1605507139485-d0a835ec559d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1605507139485-d0a835ec559d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"今天,我想要学习 ESNext 的知识,并且运用到我的工具库中去,创建 GitHub repo,但我依然需要一个靶场.学习 webpack 让我能轻松写 ESNext 代码,走在前头,工程化技术受用无穷."}},"__N_SSG":true}