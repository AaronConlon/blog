{"pageProps":{"post":{"slug":"Next.js绝对导入和别名导入","contentHtml":"<h1>前言</h1>\n<p>在使用<code>vscode</code>开发前端<code>Next.js</code>项目中使用复杂的相对导入容易出错且很“碍眼” :smile:。</p>\n<p>于是查了查如何使用别名和绝对导入，仅以此文记录📝此问题，希望笔者和机缘巧合之下阅读到此文的读者有所得。</p>\n<h1>浅解</h1>\n<p>自从 Nextjs.js <code>v9.4</code>开始，用户可以很简单地用上绝对导入和别名这个特性，为什么我们需要如此？</p>\n<p>当手头的项目层级与日递增之后，难免出现以下代码段：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> Heading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../../../../components/Something'</span></code></pre> \n\n<p>我们将复杂的组件拆分成独立的小组件时，难免需要导入一些模块，如果光凭手动导入，出错在所难免。即使诸如<code>vscode</code>此类编辑器提供了自动导入的插件或机制，在代码上也不够美观（众口难调）。</p>\n<p>再看以下代码段：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> Heading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'components/Something'</span></code></pre> \n\n<p>是否简单明了一些？</p>\n<p>接下来看看我们需要额外做什么配置来实现这个功能。</p>\n<h2>绝对导入</h2>\n<p>我们只需要为 <code>Next.js</code>项目配置一个编译选项即可，如果你是<code>js</code>项目，则在根目录创建<code>jsconfig.json</code>配置文件，如下实例：</p>\n<blockquote>\n<p>如果是 TypeScript 项目，则在 tsconfig.json 中配置</p>\n</blockquote>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"baseUrl\"</span>: <span class=\"hljs-string\">\".\"</span>\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>只需要添加一个<code>baseUrl</code>来指定根目录，后续的导入命令如此类：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> Heading <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'components/Something'</span></code></pre> \n\n<p>就会在根目录下解析<code>components</code>目录下是否有组件<code>Something</code>。</p>\n<p>笔者手头的项目根目录下具有诸如：</p>\n<ul>\n<li>libs</li>\n<li>styles</li>\n<li>components</li>\n<li>...</li>\n</ul>\n<p>若干个目录，配置了此字段后对于引入资源模块变得相对简单了些。</p>\n<h2>Next.js Alias 别名</h2>\n<p>绝对导入或许会让你对本地模块和第三方模块重名产生担忧😟，那么我们也可以使用别名来映射某个路径，这样更灵活一些。</p>\n<p>举个例子：</p>\n<p>手头的项目具有一个 <code>布局系统</code>，我们将所有的布局组件全部放在<code>components/Layout</code>目录下，如果是绝对导入，则需要这样：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> Container <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'components/Layout/Container'</span>;</code></pre> \n\n<p>我们可以更简单，只需在编译配置里增加<code>paths</code>配置，依然是<code>jsconfig.josn</code>文件：</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"baseUrl\"</span>: <span class=\"hljs-string\">\".\"</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"paths\"</span>: {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-attr\">\"@/layout/*\"</span>: [<span class=\"hljs-string\">\"components/Layout/*\"</span>]\n<span class=\"lineNumber\">6</span>    }\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>}</code></pre> \n\n<blockquote>\n<p>不要忽略配置<code>baseUrl</code>字段，修改配置之后需要重启开发环境。</p>\n</blockquote>\n<p>此时，我们便可以这样导入模块：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> Container <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@/layout/Container'</span>;</code></pre> \n\n<p>上述配置文件中，每一个键字符串都可以灵活配置成你或团队内一致认可的关键字。</p>\n<p>最后，👏🏻欢迎探讨和分享。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://ahmadawais.com/next-js-absolute-imports-aliases/\">Next.js Absolute Imports and Aliases</a></li>\n</ul>\n","title":"Next.js绝对导入和别名导入","date":"12/18/2021","tags":["Next.js"],"mainImg":"https://images.unsplash.com/photo-1499714920856-1236218b4917?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4MTkzNDU&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1499714920856-1236218b4917?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk4MTkzNDU&ixlib=rb-1.2.1&q=80&w=400","intro":"在写 Next.js 项目的时候需要处理复杂的相对导入问题，于是学到了如何处理别名"}},"__N_SSG":true}