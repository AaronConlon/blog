{"pageProps":{"post":{"slug":"JavaScript拾遗之数据类型","contentHtml":"<h1>前言提要</h1>\n<p>上次面试的时候，面试官让我说一说 JavaScript 的数据类型，我说完之后感觉不太好，基础知识掌握得还是不够牢靠，今天来巩固一下 JavaScript 中的数据类型！</p>\n<h1>概述</h1>\n<p>在脑海里构建一个图谱，JavaScript 标准至今的数据类型包括：</p>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">Primitive values</a> (immutable datum represented directly at the lowest level of the language)</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type\">Boolean type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type\">Null type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type\">Undefined type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type\">Number type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type\">BigInt type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type\">String type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#symbol_type\">Symbol type</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects\">Objects</a> (collections of properties)</p>\n<p><code>7 种原始数据类型和一种引用类型</code>！复杂的数据结构都是由基础类型的数据构成的，对基础数据理解和熟悉程度越高，越有助于我们编写高效代码，提高效率和代码可读性。</p>\n<p>每一年<strong>TC39</strong>都会出现一些提案，每一年都有新的方法添加到标准中来，对这些方法了解越深，我们处理问题的思路越广，效率越高。</p>\n</li>\n</ul>\n<h1>详解类型</h1>\n<h2>Number</h2>\n<h3>Number 基础</h3>\n<p><strong>Number</strong>包含了整数和浮点数，在常规的数值之外，还需要注意以下几个特殊的数：</p>\n<ul>\n<li>Infinity</li>\n<li>-Infinity</li>\n<li>NaN (Not a number）</li>\n</ul>\n<p>顾名思义，无穷大和不是一个数(NaN)都是 number ！在类型转换为 number 的时候可能会出现 NaN!\n当我们需要使用一个始终是最大的数时，<code>Infinity</code>会非常有用，正负无穷都可以保证能够覆盖我们设置的某个正常值的表示范围。</p>\n<blockquote>\n<p>JavaScript 中的数学运算，使用<code>0</code>作为分母是不会报错的，例如正数除以 0 等于正无穷，负数则为负无穷，0除以 0 等于 NaN</p>\n</blockquote>\n<p>举个例子：\n在某些算法题中需要寻找数组中的最小值，我们可以初始化一个用于比较的值为<code>Infinity</code>，然后使用<code>Math.min()</code>函数来比较数据，利用的就是这个值是正无穷的特性，让代码可读性更好。</p>\n<p>还有什么地方用到这个知识点吗？\n有，还真有！例如我们在通过 JSON 序列化数据的时候，无穷大将序列化为<code>null</code>，注意这个问题📢，别让 bug 出现！另外，如果想通过字符串解析到无穷大的数，可以使用<code>parseFloat('Infinity')</code>或<code>Number('Infinity')</code>来处理，使用<code>parseInt</code>将会得到<code>NaN</code>!</p>\n<blockquote>\n<p>new Number() vs Number() ?</p>\n</blockquote>\n<p>使用 new 去初始化对象将会得到一个 Object 而不是一个原始数据类型，使用 Number() 则意味着强制类型转换为 Number 类型，如果无法转换为为数字则返回 NaN！</p>\n<blockquote>\n<p>0.1 + 0.2 ?</p>\n</blockquote>\n<p>两数相加时，二者转为二进制再对阶运算时尾数无限循环，引擎阶段造成精读丢失。</p>\n<h3>Number 静态属性</h3>\n<blockquote>\n<p>你可以在很多地方轻松查看文档，因此我将挑重点来学习。</p>\n</blockquote>\n<ul>\n<li>EPSILON: 数之间的最小间隔，可以用于检查 0.1 + 0.2 等于 0.3 的相等性，IE11 不支持，可以用 Math.pow(2, -52)来模拟！</li>\n<li>MAX_SAFE_INTEGER 和 MIN_SAFE_INTEGER: JavaScript Number使用IEEE754 标准的 64 位来表示一个数，因此为了方便获取最大的安全数 Math.pow(2, 53) - 1 和最小的安全数，为 Number 增加了这两个属性。这个属性可以用于判断某些传递的数是否可以安全地计算而不丢失精读，多用于前后端数据传递的处理，对超过安全范围的数进行判断。</li>\n<li>MAX_VALUE 和 MIN_VALUE: JavaScript 中能呈现的最大的正数和最小的正数，为这些数设置专属的具名属性有利于语言底层操作这些数，提升可读性。当我们发现某些数过大的时候，还是得了解原因，选择针对性的库去处理这些问题。</li>\n<li>POSITIVE_INFINITY 和 NEGATIVE_INFINITY 分别为正负无穷大，这一块唯一需要注意的是<code>这些特殊的值之间的逻辑运算</code>。</li>\n</ul>\n<h3>Number 方法</h3>\n<p>当我们需要对数进行处理时，熟悉这些方法非常有用。</p>\n<h4>isNaN</h4>\n<p><code>NaN</code>是全局属性，但<code>NaN</code>不等于<code>NaN</code>，判断目标是否不是一个数，在不进行类型转换的前提下，最好的方法就是使用<code>Number.isNaN()</code>方法。全局的<code>isNaN()</code>会对<code>'NaN'</code>这样的字符串进行转化，并认为这是一个<code>NaN</code>。</p>\n<h4>isFinite</h4>\n<p>判断目标是否为有限的数，全局的<code>isFinite()</code>函数会将字符串转化为数字，再判断是否是一个有限的数，<code>Number.isFinite</code>不会，当你不需要自动类型转换的时候，务必使用<code>Number.isFinite()</code></p>\n<h4>isInteger</h4>\n<p>判断目标类型是否是<code>number</code>，并且是整数！同样需要注意，这个方法不会自动转换类型！</p>\n<h4>parseFloat</h4>\n<p>将目标字符串转化为浮点数，其中的关键在于在解析的过程中遇到<code>+、v、0-9、.、科学计数法e</code>之外的字符时，将会直接忽略该字符和以后的字符。并且第二个小数点也会使得解析终止，另外<code>空白符</code>在首尾时将会被忽略。如果无法解析，则返回<code>NaN</code>。如果一个目标是具有<code>toString</code>或<code>valueOf</code>方法的对象，则会将这些方法返回的内容作为目标进行解析。目标是<code>BigInt</code>则会丢失精度。</p>\n<h4>parseInt</h4>\n<p>此方法解析一个字符串（如果不是字符串，将先使用<code>toString()</code>进行自动转换），并且返回指定<code>基数(radix)</code>的十进制整数。基数是<code>2~36</code>之间的整数。尽管基数在规范中是可选参数，但是在不同浏览器之间对于不指定基数情况下的实现结果不相同，因此强烈建议指定基数！同样类似于<code>parseFloat</code>，对特殊字符将会终止转化，忽略首尾空白字符，转换<code>BigInt</code>会丢失精度！</p>\n<blockquote>\n<p>要将一个数字转换为特定 radix 中的字符串字段，请使用 <code>thatNumber.toString(radix)</code>函数!</p>\n</blockquote>\n<h3>Number 对象上的额外属性</h3>\n<h4>toFixed(digits)</h4>\n<p>使用定点表示法来格式化一个数字，不足个数的使用 0 来补全，返回数字字符串（该数字会在必要时被<code>四舍五入</code>）。</p>\n<h4>toExponential(digits)</h4>\n<p>将数字转化为指定具有小数点后若干位的指数形式。</p>\n<h4>toLocaleString</h4>\n<p>在需要将数字显示国际化的时候可查。</p>\n<h4>toPrecision</h4>\n<p>返回指定精度的字符串表示（如果需要保持整体的有效个数长度，可以使用此方法。）</p>\n<h4>toString([radix])</h4>\n<p>常用于转换数字为指定进制的数字字符串（2~36）</p>\n<h4>valueOf</h4>\n<p>返回一个被 Number 对象包装的原始值！</p>\n<h3>Number 应用</h3>\n<ul>\n<li>使用 Number 对象的属性给变量赋值，用以得到特殊数字</li>\n<li>检查是否超过可以精确表示的数的范围，利用<code>MAX_SAFE_INTEGER</code></li>\n<li>使用<code>Number(new Date())</code>获得某个日期对象的<code>valueOf()</code>函数结果，也等于<code>getTime()</code>的结果。</li>\n<li>使用<code>Number(str)</code>将字符串表示的数转化为数字类型，例如这个离谱的<code>Number('') === 0</code>，或者转化 null 等于 0。</li>\n<li>数字转特定进制的字符串，使用数字的<code>toString</code>方法并且指定基数参数即可。</li>\n</ul>\n<h2>String</h2>\n<h3>String 基础</h3>\n<p><strong>String</strong>全局对象是一个用于字符串或一个字符序列的构造函数。使用跨行长字符串时，可以使用斜杠字符表示字符串在下一行继续。</p>\n<blockquote>\n<p>String 表示零或多个 16 位 Unicode 字符序列！</p>\n</blockquote>\n<p>也许你曾见过以下两种生成字符串的方式：</p>\n<ol>\n<li>String(thing)</li>\n<li>new String(thing)</li>\n</ol>\n<p>二者的区别在于生成的是原始数据类型字符串，还是字符串对象。</p>\n<p>如果想从字符串中获取单个字符，可以使用<code>charAt</code>方法或者将字符串当做类似数组的对象，按索引获取。</p>\n<p>二者的区别在于，<code>charAt</code>将会在获取超过索引范围的时候返回空字符，而使用数组下标会返回<code>undefield</code>。</p>\n<p>在很多时候，我们需要对某些字符串进行比较，其原理是将其字符转化为<code>ASCII码</code>进行再比较，并且<code>String</code>具有好几个很方便获取码值的方法提供给开发者使用。</p>\n<p>另外，几乎所有数据都有<code>toString</code>方法，除了<code>null</code>和<code>undefield</code>，当你不确定调用此方法的变量是否是二者时，可以使用<code>String(target)</code>将<code>null</code>或<code>undefield</code>转化为字符串<code>\"null\"</code>和<code>\"undefield\"</code>。</p>\n<h3>String 方法</h3>\n<h4>fromCharCode(num1[,...[, numN]])</h4>\n<p>接收一系列<code>UTF-16</code>代码单元的数字，范围在<code>0~0xFFFF</code>之间，超过将被截断，最后返回长度为参数个数的字符串，此方法基于字符都是 16 位表示的，当我们需要使用更多的字符时，就力有未逮了。</p>\n<h4>fromCodePoint</h4>\n<p>ES6 新增了此方法以弥补 fromCharCode 在处理 Unicode 字符方面的缺陷，Unicode 为了支持更多字符，提供了<code>基本多语言平面（BMP）</code>机制，对每一个字符使用额外的 16 位来选择一个增补平面，这种字符使用一对 16 位的码元策略被称为<code>代理对</code>，迭代字符串可以智能识别代理对，而按索引访问这些字符时则无法获得预期的值。</p>\n<h4>charCodeAt</h4>\n<p>返回 0~63355 之间的整数，代表索引处的<code>UTF-16</code>码元，超过索引位置时返回 <code>NaN</code></p>\n<h4>codePointAt</h4>\n<p>返回一个 Unicode 编码点值的非负整数或超过索引位置时返回<code>undefield</code></p>\n<h4>normalize</h4>\n<p>有些字符可以由单个<code>BMP</code>字符表示，也可以由代理对表示，为了方便的比较字符串是否一致，需要将之按某种规范进行序列化，然后再对比结果，这方面所用极少，可用时查看。</p>\n<h4>concat</h4>\n<p>将字符串和参数进行拼接，返回新的字符串，参数可以是多个。</p>\n<h4>raw</h4>\n<p>此方法将会忽略转义符，在某些情况下可用，但是兼容性不佳，可以使用第三方库<code>string.raw</code>代替。</p>\n<h4>提取字符串</h4>\n<p>三者区别在于对负数参数的处理，返回副本</p>\n<ul>\n<li>slice(beginIndex, endIndex): 负数下标会加字符串长度，异常的范围则返回空字符串，当想要获取倒数若干个元素时使用负数很方便。</li>\n<li>substr: 预计被移除</li>\n<li>substring: 代替<code>substr</code>，取参数范围，即使第二个参数大于第一个参数，内部自动按大小处理参数顺序，任意参数小于 0 或为<code>NaN</code>，视为 0。</li>\n</ul>\n<h4>判断开头或结尾</h4>\n<ul>\n<li>startsWith: 支持搜索长度，默认为字符串的 length</li>\n<li>endsWith</li>\n<li>使用正则表达式来 test</li>\n</ul>\n<h4>includes</h4>\n<p>检查字符串是否包含另一个字符串，可以指定起始位置，默认为 0</p>\n<h4>字符串位置检索</h4>\n<p>没找到返回 -1 ，同样支持设置起始位置，默认为 0，负数亦为 0。</p>\n<ul>\n<li>indexOf: 默认搜索字符串<code>undefield</code></li>\n<li>lastIndexOf: 默认搜索字符串<code>undefield</code></li>\n<li>search: 参数是正则表达式</li>\n</ul>\n<h4>清理前后空格</h4>\n<p>返回清理后的副本</p>\n<ul>\n<li>trim</li>\n<li>trimLeft</li>\n<li>trimRight</li>\n</ul>\n<h4>正则表达式匹配</h4>\n<ul>\n<li>match: 通过匹配正则表达式，返回一个结果数组，默认返回空数组</li>\n<li>matchAll: 参数是正则表达式，否则将会隐式通过字符串创建正则表达式，正则表达式必须设置全局模式，否则抛出类型错误异常，全部匹配有利于获取可读性更高的正则表达式捕获组，MDN 上的解释和示例非常好，但是迭代匹配对象的时候结果缺少<code>groups</code>对象，这个对象会让我们在写正则表达式的时候设置了具名捕获组时，将匹配名和值保存在<code>groups</code>中，示例也可以参考<a href=\"https://www.programiz.com/javascript/library/string/matchall\">Javascript String matchAll()</a>。</li>\n</ul>\n<h4>字符填充和替换</h4>\n<ul>\n<li>\n<p>字符补充</p>\n<ul>\n<li>padEnd(targetLength, padString = ' ')</li>\n<li>padStart(targetLength, padString = ' ')</li>\n</ul>\n</li>\n<li>\n<p>repeat: 重复字符串若干次(次数自动转化为整数，负数则报错，0 则返回空字符串)，返回新的字符串</p>\n</li>\n<li>\n<p>字符串替换，支持正则表达式，第二个参数可以是一个具有返回值的函数，返回的内容用于替换。</p>\n<ul>\n<li>\n<p>replace</p>\n</li>\n<li>\n<p>replaceAll</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4>split([separator[, limit]])</h4>\n<p>不指定分隔符时，返回一个包含此字符串的数组。分隔符为空字符串时，切割整个字符串，每一个字符作为一个元素返回此数组，指定<code>limit</code>时，限定返回数组的长度。</p>\n<h4>大小写转换</h4>\n<ul>\n<li>toLowerCase</li>\n<li>toUpperCase</li>\n</ul>\n<h2>Boolean</h2>\n<h3>Boolean 基础</h3>\n<p><code>Boolean</code>对象是一个布尔值的对象包装器，只有俩值：</p>\n<ul>\n<li>true</li>\n<li>false</li>\n</ul>\n<p>看看若干自动转化为布尔值的其他值的转换结果示例：</p>\n<p><strong>以下都转化为 false</strong></p>\n<ul>\n<li>0</li>\n<li>-0</li>\n<li>null</li>\n<li>false</li>\n<li>NaN</li>\n<li>undefield</li>\n</ul>\n<p><strong>其他都转化为 true</strong>，包括<code>[]、字符串'false'</code>。</p>\n<p>不要将值为<code>false</code>的布尔对象在条件判断时视为<code>false</code>!例如：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> x = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">false</span>);\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// x 在条件判断时视为 true</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">x</span>)</span> {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// code will exec</span>\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<h2>Null 和 Undefined</h2>\n<h3>基础</h3>\n<p><code>null</code>是一个特殊的值，当你认为某个变量或属性需要一个值，却打算暂时不为其分配值的时候，可以选择<code>null</code>，用于代表其为<code>空</code>或<code>未知的值</code>。</p>\n<p><code>undefield</code>通常用于表示一个变量被声明了，但是还未定义或分配值。</p>\n<p>补充一点：</p>\n<p>二者都是<code>falsy</code>的值之一，另外还有其他四个：</p>\n<ul>\n<li>false</li>\n<li>0 、 -0</li>\n<li>\"\"</li>\n<li>NaN</li>\n</ul>\n<p>其他都是<code>truthy</code>的值。</p>\n<blockquote>\n<p>在 JSON 数据转换中，对象值为 undefined  的将会被忽略</p>\n</blockquote>\n<p>另外，二者都是原始数据类型。</p>\n<p>需要注意的是，<code>typeof null</code>的结果是<code>object</code>，而<code>undefield</code>则是<code>undefield</code>。</p>\n<p>再谈二者区别，在作为参数传递时，<code>null</code>是一个值传递，而<code>undefield</code>将被忽略。</p>\n<blockquote>\n<p>更多比较请点击查看<a href=\"https://2ality.com/2021/01/undefined-null-revisited.html\"><code>undefined</code> vs. <code>null</code> revisited</a></p>\n</blockquote>\n<h2>Symbol</h2>\n<h3>Symbol 基础</h3>\n<p><code>symbol</code>是唯一且不可变的原始数据类型，其用途是确保对象具有唯一的非字符串形式的属性。切记，<code>Symbol</code>不支持语法<code>new Symbol()</code>，使用时将会报错 Symbol 不是一个构造器。</p>\n<p>我们可以直接使用<code>symbol()</code>函数来根据传参创建一个<code>Symbol</code>类型的值，其语法为：</p>\n<p><code>Symbol([description])</code></p>\n<p>描述字段仅供调试，不可用于访问 symbol 本身。</p>\n<blockquote>\n<p>具有相同 description 的 symbol 是不相等的。</p>\n</blockquote>\n<p><code>symbols</code>还具有若干没有暴露给开发者的属性，用于辅助实现众多的数据类型方法。</p>\n<h3>Symbol 方法</h3>\n<ul>\n<li>Symbol.for(key): 使用给定的字符串<code>key</code>（不是字符串将会转化为字符串）搜索全局符号注册表是否具有某个<code>key</code>的<code>symbol</code>，如果没有则创建一个，后续在检索的时候将返回此已存在的实例。注意，使用<code>Symbol(x)</code>定义的符号与使用此 description 来创建的全局符号(<code>Symbol.for(x)</code>)是不等的。</li>\n<li>Symbol.keyFor(sym): 使用符号实例<code>sym</code>在全局注册表中检索其可能存在的<code>key</code>!使用<code>Symbol(description)</code>创建的普通符号的<code>key</code>为<code>undefield</code>。当<code>sym</code>不是符号时，抛出类型异常。</li>\n</ul>\n<h3>Symbol 其他</h3>\n<p>当使用 symbol 实例作为对象的属性时，这些属性默认是<code>可枚举</code>的，但不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>返回，在<code>JSON.stringify</code>中会被忽略。</p>\n<blockquote>\n<p>Reflect.ownKeys 可以获取目标对象自身的所有属性组成的数组</p>\n</blockquote>\n<p>来看看如下几个方法：</p>\n<ul>\n<li>Object.getOwnPropertyNames 返回常规属性数组</li>\n<li>Object.getOwnPropertySymbols 返回符号属性数组</li>\n<li>Object.getOwnPropertyDescriptors 返回描述符数组，包含符号属性和常规属性</li>\n</ul>\n<p>另外，符号属性是对内存中符号的一个引用，开发者需要显示的保存这些符号，以免在后续需要直接使用时需要麻烦地遍历其符号属性来获取引用。</p>\n<p>此外，ES6 引入了众多内置符号，例如：</p>\n<ul>\n<li>Symbol.iterator</li>\n<li>Symbol.asyncIterator</li>\n<li>...</li>\n</ul>\n<p>当真的需要为对象或某些数据提供可迭代的特性时，可以重载或实现这些内置符号的属性方法。</p>\n<h2>BigInt</h2>\n<h3>BigInt 基础</h3>\n<blockquote>\n<p>只有在特定领域需要用此数据类型，日常开发中极少接触到。</p>\n</blockquote>\n<p><code>BigInt</code>用于表示任意大的整数，以此弥补<code>Number</code>表示范围的缺失。可以在一个数字字面量后面加一个<code>n</code>的方式来定义一个<code>BigInt</code>，例如：<code>100n</code>，或者调用函数<code>BigInt(11)</code>得到<code>11n</code>。</p>\n<p>默认情况下，<code>JSON</code>在处理<code>BigInt</code>时需要实现<code>toJSON</code>方法，默认会引发类型错误。</p>\n<p>需要注意的是，<code>Number</code>和<code>BigInt</code>之间无法进行混合逻辑运算，在处理这个问题之前需要进行类型转换，这个过程容易丢失精度。这两种类型可以进行宽松的相等比较，也可以在一个数组中进行排序。</p>\n<h2>Object</h2>\n<h3>Object 基础</h3>\n<p><code>Object</code>在 JavaScript 中用于存储各种键值集合和更复杂的实体。我们可以通过<code>Object()</code>构造函数或<code>对象字面量</code>的方式来创建<code>Object</code>。</p>\n<blockquote>\n<p>JavaScript 的一切都是对象？</p>\n</blockquote>\n<p>上述其中原始数据类型就不是对象，但是我们可以调用他们的方法，其原理是在调用之前，创建了<code>Wrapper Object</code>。</p>\n<p>JavaScript 将基本类型的值（除了 null/undefield/symbol/bigInt）使用构造器函数创建临时对象，这个临时对象就是我们所谈论的包装对象 <code>Wrapper Object</code>。</p>\n<h3>Object 静态方法</h3>\n<h4>Object.assign</h4>\n<blockquote>\n<p>Object.assign(target, ...sources)</p>\n</blockquote>\n<p>将所有源自身<code>可枚举</code>属性(包括<code>符号属性</code>)的值从一个或多个源对象分配到目标对象，按源对象参数的顺序，后续的对象属性值会覆盖同名的属性值，并且返回此目标对象。如果是简单的复制对象的值，且值为原始数据类型，我们称之为<code>浅克隆</code>。</p>\n<p>该方法使用源对象的<code>[[Get]]</code>和目标对象的<code>[[Set]]</code>，所以它会调用相关 getter 和 setter。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">1</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title\">bar</span>() {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>};\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">let</span> copy = <span class=\"hljs-built_in\">Object</span>.assign({}, obj);\n<span class=\"lineNumber\">9</span><span class=\"hljs-built_in\">console</span>.log(copy); <span class=\"hljs-comment\">// { foo: 1, bar: 2 } copy.bar的值来自obj.bar的getter函数的返回值</span></code></pre> \n\n<p>在出现错误的情况下，例如，如果属性不可写，会引发<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError\"><code>TypeError</code></a>，如果在引发错误之前添加了任何属性，则可以更改<code>target</code>对象。</p>\n<p>看这个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> target = <span class=\"hljs-built_in\">Object</span>.defineProperty({}, <span class=\"hljs-string\">\"foo\"</span>, {\n<span class=\"lineNumber\">2</span>    <span class=\"hljs-attr\">value</span>: <span class=\"hljs-number\">1</span>,\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">writable</span>: <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">4</span>}); <span class=\"hljs-comment\">// target 的 foo 属性是个只读属性。</span>\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span class=\"hljs-built_in\">Object</span>.assign(target, {<span class=\"hljs-attr\">bar</span>: <span class=\"hljs-number\">2</span>}, {<span class=\"hljs-attr\">foo2</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-attr\">foo3</span>: <span class=\"hljs-number\">3</span>}, {<span class=\"hljs-attr\">baz</span>: <span class=\"hljs-number\">4</span>});\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\">// TypeError: \"foo\" is read-only</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// 注意这个异常是在拷贝第二个源对象的第二个属性时发生的。</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-built_in\">console</span>.log(target.bar);  <span class=\"hljs-comment\">// 2，说明第一个源对象拷贝成功了。</span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-built_in\">console</span>.log(target.foo2); <span class=\"hljs-comment\">// 3，说明第二个源对象的第一个属性也拷贝成功了。</span>\n<span class=\"lineNumber\">12</span><span class=\"hljs-built_in\">console</span>.log(target.foo);  <span class=\"hljs-comment\">// 1，只读属性不能被覆盖，所以第二个源对象的第二个属性拷贝失败了。</span>\n<span class=\"lineNumber\">13</span><span class=\"hljs-built_in\">console</span>.log(target.foo3); <span class=\"hljs-comment\">// undefined，异常之后 assign 方法就退出了，第三个属性是不会被拷贝到的。</span>\n<span class=\"lineNumber\">14</span><span class=\"hljs-built_in\">console</span>.log(target.baz);  <span class=\"hljs-comment\">// undefined，第三个源对象更是不会被拷贝到的。</span></code></pre> \n\n<blockquote>\n<p><code>Object.assign</code> 会尝试将<code>target</code>转换为对象，例如传入<code>null</code>或<code>undefined</code>，将会报错。如若 sources 中包含 <code>null</code>或<code>undefined</code>，则忽略这两个源。</p>\n</blockquote>\n<p>假如源值是一个对象的引用，它仅仅会复制其引用。</p>\n<blockquote>\n<p>Object.assign([1,2], [3,4,5]) 枚举数组，最后得出<code>[4,5,3]</code></p>\n</blockquote>\n<p>还有几点徐亚补充：</p>\n<ul>\n<li>assign 可以拷贝 Symbol 属性</li>\n<li>继承属性和不可枚举属性<code>无法拷贝</code></li>\n<li>原始类型会被包装成对象</li>\n</ul>\n<p>最后一点举个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> v1 = <span class=\"hljs-string\">\"abc\"</span>;\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> v2 = <span class=\"hljs-literal\">true</span>;\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> v3 = <span class=\"hljs-number\">10</span>;\n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">const</span> v4 = <span class=\"hljs-built_in\">Symbol</span>(<span class=\"hljs-string\">\"foo\"</span>)\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.assign({}, v1, <span class=\"hljs-literal\">null</span>, v2, <span class=\"hljs-literal\">undefined</span>, v3, v4);\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\">// 原始类型会被包装，null 和 undefined 会被忽略。</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// 注意，只有字符串的包装对象才可能有自身可枚举属性。</span>\n<span class=\"lineNumber\">9</span><span class=\"hljs-built_in\">console</span>.log(obj); <span class=\"hljs-comment\">// { \"0\": \"a\", \"1\": \"b\", \"2\": \"c\" }</span></code></pre> \n\n<h4>Object.create</h4>\n<blockquote>\n<p>Object.create(proto，[propertiesObject])</p>\n</blockquote>\n<p>此方法创建一个新对象，并且使用指定的对象来提供创建对象的原型。</p>\n<blockquote>\n<p>在 Vue 的源代码中，作者使用过 Object.create(null) 来创建空对象。</p>\n</blockquote>\n<p>相较于<code>{}</code>对象来说，<code>Object.create(null)</code>或<code>Object.defineProperties(null)</code>返回的对象都不具有<code>原型</code>对象。</p>\n<p><code>{}</code>具有<code>Object</code>对象的一系列属性，如果我们只需要一个纯粹的字典，其实我们可以使用<code>Object.create(null)</code>，如果需要扩展一些功能，再额外添加即可。</p>\n<p><code>create</code>方法还可以用于兼容所有版本 JavaScript 的类式继承，但笔者认为<code>ES6</code>支持的<code>Class</code>的可读性更好一些，兼容性方面我们有<code>Babel</code>支持，无需担心。</p>\n<h4>Object.is</h4>\n<p>判断两个值是否是同一个值：</p>\n<ul>\n<li>都是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a></li>\n<li>都是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/null\"><code>null</code></a></li>\n<li>都是 <code>true</code> 或 <code>false</code></li>\n<li>都是相同长度的字符串且相同字符按相同顺序排列</li>\n<li>都是相同对象（意味着每个对象有同一个引用）</li>\n<li>都是数字且\n<ul>\n<li>都是 <code>+0</code></li>\n<li>都是 <code>-0</code></li>\n<li>都是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a></li>\n<li>或都是非零而且非 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/NaN\"><code>NaN</code></a> 且为同一个值</li>\n</ul>\n</li>\n</ul>\n<h4>定义属性</h4>\n<p>通过<code>Object</code>构造器对象来定义属性，可以有两种方式：</p>\n<ul>\n<li>defineProperty</li>\n<li>defineProperties</li>\n</ul>\n<p>前者是对单个属性进行定义，后者支持传入一个数组，同时对多个属性进行定义。</p>\n<p>无论是单个属性或多个属性，都由以下几个部分组成：</p>\n<ul>\n<li>prop 属性名</li>\n<li>descriptor 描述符\n<ul>\n<li>数据描述符:</li>\n<li>存取描述符</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>如果一个描述符不具有 <code>value</code>、<code>writable</code>、<code>get</code> 和 <code>set</code> 中的任意一个键，那么它将被认为是一个数据描述符。如果一个描述符同时拥有 <code>value</code> 或 <code>writable</code> 和 <code>get</code> 或 <code>set</code> 键，则会产生一个异常。</p>\n</blockquote>\n<p>提供描述符的时候，只能选择一种描述符来使用，否则将会抛出异常。</p>\n<p>描述符可以拥有的键值如下表所示：</p>\n<p>|| <code>configurable</code> | <code>enumerable</code> | <code>value</code> | <code>writable</code> | <code>get</code>  | <code>set</code>  |\n| -------------- | ------------ | ------- | ---------- | ------ | ------ | ------ |\n| 数据描述符     | 可以         | 可以    | 可以       | 可以   | 不可以 | 不可以 |\n| 存取描述符     | 可以         | 可以    | 不可以     | 不可以 | 可以   | 可以   |</p>\n<p>各键的含义如字面所示，用于控制属性的操作性。</p>\n<h4>遍历对象</h4>\n<p>常用的遍历的方式如下：</p>\n<ul>\n<li>Object.keys</li>\n<li>Object.values</li>\n<li>Object.entries</li>\n</ul>\n<h5>Keys</h5>\n<blockquote>\n<p>Object.keys(obj)</p>\n</blockquote>\n<p>返回一个由给定对象的<code>自身</code>的<code>可枚举</code>属性组成的字符串数组（不包含 Symbol 属性，即使是可枚举的）。</p>\n<p>数组元素的顺序和手动遍历对象属性时一致。</p>\n<blockquote>\n<p>ES6 中如果传入的<code>obj</code>是字符串这些非对象类型数据，将会转为对象，如字符串转对象，取得其类数组下标返回。</p>\n</blockquote>\n<h5>values</h5>\n<blockquote>\n<p>Object.values(obj)</p>\n</blockquote>\n<p>返回一个给定对象<code>自身</code>的所有<code>可枚举</code>字符串属性值的数组，值的顺序和使用<code>for...in</code>循环的顺序相同（区别在于<code>for...in</code>枚举原型链上的属性）。</p>\n<h5>entries</h5>\n<blockquote>\n<p>Object.entries(obj)</p>\n</blockquote>\n<p>返回一个给定对象<code>自身</code>且<code>可枚举</code>字符串属性的<code>键值对</code>数组，并且保持顺序，不返回原型链上的属性。</p>\n<p>借助此方法和<code>Map</code>构造函数接受一个可迭代的<code>entries</code>的特征，我们可以轻松将对象转化为<code>Map</code>：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'yo'</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">100</span>};\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>(<span class=\"hljs-built_in\">Object</span>.entries(obj))</code></pre> \n\n<p>另外，也支持使用此可迭代的<code>entries</code>数组创建对象：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> entries = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Map</span>([\n<span class=\"lineNumber\">2</span>  [<span class=\"hljs-string\">'name'</span>, <span class=\"hljs-string\">'yo'</span>],\n<span class=\"lineNumber\">3</span>  [<span class=\"hljs-string\">'age'</span>, <span class=\"hljs-number\">100</span>]\n<span class=\"lineNumber\">4</span>]);\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span class=\"hljs-keyword\">const</span> obj = <span class=\"hljs-built_in\">Object</span>.fromEntries(entries);\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\">// obj is { name: \"yo\", age: 100 }</span></code></pre> \n\n<h4>冻结对象</h4>\n<blockquote>\n<p>Object.freeze(obj)</p>\n</blockquote>\n<p>冻结一个对象意味着被冻结的对象不能被修改，返回此被冻结的对象，而不是一个副本。</p>\n<p>可以使用<code>Object.isFrozen(obj)</code>来检查是否是一个冻结的对象。</p>\n<p>但是冻结对象不总是<code>不可变的</code>，当冻结的对象的属性值是一个对象时，我们称之为<code>浅冻结</code>，可以修改此属性值的对象。</p>\n<p>使用此方法可以冻结一个数组。</p>\n<p>通过递归，可以实现一个深冻结函数：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">deepFreeze</span>(<span class=\"hljs-params\">obj</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> propNames = <span class=\"hljs-built_in\">Object</span>.getOwnPropertyNames(obj);\n<span class=\"lineNumber\">3</span>  propNames.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">name</span> =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">const</span> prop = obj[name];\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">typeof</span> prop == <span class=\"hljs-string\">'object'</span> &#x26;&#x26; prop !== <span class=\"hljs-literal\">null</span></span>)</span> {\n<span class=\"lineNumber\">6</span>      deepFreeze(prop);\n<span class=\"lineNumber\">7</span>    };\n<span class=\"lineNumber\">8</span>  });\n<span class=\"lineNumber\">9</span>  \n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// 冻结自身</span>\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Object</span>.freeze(obj);\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n<h4>密封对象</h4>\n<blockquote>\n<p>Object.seal(obj)</p>\n</blockquote>\n<p>如果只需要将某个对象封闭起来，阻止添加新属性并且设置为不可配置，保持原来的值的可读性和可写性，那么不需要冻结此对象，只需要使用<code>seal</code>方法封闭对象即可。</p>\n<p>支持配合<code>Object.isSeal</code>判断对象是否是一个封闭对象。</p>\n<blockquote>\n<p>Object.isExtensible(obj) 可以检测对象是否是可扩展的，当对象被冻结或封闭时，对象不可扩展。</p>\n</blockquote>\n<h4>其他方法</h4>\n<p>获取描述符：</p>\n<ul>\n<li>getOwnPropertyDescriptor</li>\n<li>getOwnPropertyDescriptors</li>\n</ul>\n<p>获取属性相关：</p>\n<ul>\n<li>getOwnPropertyNames: 获取字符串属性数组</li>\n<li>getOwnPropertySymbols: 获取符号属性数组</li>\n</ul>\n<p>获取对象原型：</p>\n<ul>\n<li>getPrototypeOf</li>\n</ul>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/\">MDN Web Docs</a></li>\n</ul>\n","title":"JavaScript拾遗之数据类型","date":"12/2/2021","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1510511459019-5dda7724fd87?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzg0NDY2MzY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1510511459019-5dda7724fd87?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzg0NDY2MzY&ixlib=rb-1.2.1&q=80&w=400","intro":"上次面试的时候，面试官让我说一说 JavaScript 的数据类型，我说完之后感觉不太好，基础知识掌握得还是不够牢靠，今天来巩固一下 JavaScript 中的数据类型！"}},"__N_SSG":true}