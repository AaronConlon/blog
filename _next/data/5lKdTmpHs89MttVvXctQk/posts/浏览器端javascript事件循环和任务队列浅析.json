{"pageProps":{"post":{"slug":"浏览器端javascript事件循环和任务队列浅析","contentHtml":"<p>​        事件循环是 JavaScript 语言中非常重要的部分,理解事件循环有利于理解 JavaScript 的设计理念,让我们能编写更好的代码.本文用简单的术语对其进行总结.</p>\n<h3>1. 简介</h3>\n<p>众所周知<code>JavaScript</code>是单线程语言,在某个时间点只能运行一项任务,这个限制降低了编程复杂度,我们不需要担心并发问题,只需要思考如何消除线程阻塞,如何编写简明健壮的异步代码以实现我们的需求.</p>\n<p>在浏览器端,通常每一个浏览器标签都有自己的一个<code>事件循环(event loop)</code>机制来实现<code>非阻塞</code>.浏览器是多进程的,其同时管理多个彼此隔离的<code>事件循环</code>机制.</p>\n<p>本文涉及浏览器端 JavaScript 的<code>函数调用栈</code> 、<code>回调队列</code>、<code>微任务</code>、<code>宏任务</code>等知识。</p>\n<h3>2. 调用栈</h3>\n<p>在直接分析<code>事件循环</code>之前,我们先来看看函数<code>调用栈</code>的一些前置知识.</p>\n<p><code>调用栈</code>是一个<code>LIFO</code>的队列,<code>事件循环</code>机制持续性地检查<code>调用栈</code>中是否有函数需要执行,主线程执行每一个函数的时候都将此函数压入<code>调用栈</code>,同时保存此函数相关的<code>局部变量</code>和<code>数据</code>等信息.</p>\n<p>举个例子,我们在浏览器中执行一些测试代码,并且抛出异常.</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/exception-call-stack.png\" alt=\"\"></p>\n<p>浏览器执行每个函数的时候都将函数压入<code>调用栈</code>,出错的时候可以很方便的提示我们出错的函数信息.</p>\n<p>我们再来看一个简单的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> bar = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'bar'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> baz = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'baz'</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>)\n<span class=\"lineNumber\">5</span>  bar()\n<span class=\"lineNumber\">6</span>  baz()\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span>foo()\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">10</span>foo\n<span class=\"lineNumber\">11</span>bar\n<span class=\"lineNumber\">12</span>baz</code></pre> \n\n<p>上述示例执行的时候,首先调用<code>foo()</code>,然后在<code>foo()</code>中调用<code>bar()</code>,接着调用<code>baz()</code>,此时调用栈的结构大致如下:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/call-stack-first-example.png\" alt=\"\"></p>\n<p>事件循环不断地检查调用栈中的函数,并且依次执行这些函数.</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/execution-order-first-example.png\" alt=\"\"></p>\n<p>直到整个调用栈被清空.</p>\n<p>但是,我们可以推迟一些<code>函数</code>的执行时间,让它们在<code>调用栈</code>被清空的时候再执行.稍微修改一下上述代码示例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> bar = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'bar'</span>)\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> baz = <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'baz'</span>)\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'foo'</span>)\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-built_in\">setTimeout</span>(bar, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">8</span>  baz()\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>foo()\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">13</span>foo\n<span class=\"lineNumber\">14</span>baz\n<span class=\"lineNumber\">15</span>bar</code></pre> \n\n<p>如上所示,我们使用<code>setTimeout</code>函数,并且让它尽快执行.此时调用栈如下:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/call-stack-second-example.png\" alt=\"\"></p>\n<p>如此一来,<code>setTimeout</code>函数在调用栈中被转移了,直到栈底的<code>foo()</code>函数执行完毕才将<code>setTimeout</code>的相关部分传入<code>调用栈</code>,所有函数的执行顺序如下图:</p>\n<p><img src=\"https://flaviocopes.com/javascript-event-loop/execution-order-second-example.png\" alt=\"\"></p>\n<p>传给<code>setTimeout</code>的函数,在<code>setTimeout</code>进入调用栈并且执行的时候,被转移到了哪里?</p>\n<h3>3. 事件循环</h3>\n<p><code>JavaScript</code>主线程既可以在运行时将一些耗时亦或需要延后执行的任务单独放到<code>回调队列（callback queue）</code>中去，也可以接收浏览器其他线程发送过来的新任务，执行一些<code>WebApi</code>。</p>\n<blockquote>\n<p><strong>To coordinate events, user interaction, scripts, rendering, networking, and so forth, user agents must use event loops as described in this section.</strong></p>\n</blockquote>\n<p>为了更好地理解Event Loop，请看下图(转引自Philip Roberts的演讲<a href=\"http://vimeo.com/96425312\">《Help, I'm stuck in an event-loop》</a>)</p>\n<p><img src=\"https://miro.medium.com/max/700/1*iHhUyO4DliDwa6x_cO5E3A.gif\" alt=\"\"></p>\n<p><code>执行栈</code>内保存着当前运行的函数信息，<code>堆</code>内保存着变量、对象以及闭包作用域链等。</p>\n<p><code>JavaScript 主线程</code>通过<code>WebApi</code>将一些回调函数不断地添加到<code>回调队列中</code>。</p>\n<p>当函数<code>调用栈（深度有限）</code>被清空的时候，便从回调队列中取出回调任务并执行。</p>\n<p><code>回调队列</code>保存着等待执行的所有压入的回调函数，这里的回调函数是在一定的条件下才入队的，并且其执行也是依据队列的特性顺序出队执行的。</p>\n<blockquote>\n<p>Each <a href=\"https://tc39.es/ecma262/#sec-agents\">agent</a> has an associated event loop, which is unique to that agent.An <a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loop\">event loop</a> has one or more task queues.</p>\n</blockquote>\n<p>大部分任务来源于浏览器的渲染、用户的交互、本地和网络之间的 IO 事件以及 JavaScript 脚本。每一个任务循环具有一个或者多个任务队列。</p>\n<p>为了更精细地控制队列内的不同级别的回调任务的执行顺序，让回调队列内的任务得到更优的时效性和效率平衡，不同的任务又分为：</p>\n<ul>\n<li><code>宏任务(macrotasks)</code></li>\n<li><code>微任务（microtasks）</code></li>\n</ul>\n<p>让我们把视线从前面的那张流程图中转过来，事件循环需要更细粒度的控制流。</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1555240091093/6Ph81iBLm.png?auto=compress\" alt=\"\"></p>\n<p><code>MacroTask</code>和<code>MicroTask</code>都能算<code>callback task</code>，但在其执行流程上不能理解为一个<code>queue</code>，二者的执行顺序和流程稍后进行分析。</p>\n<p>我们可以从可操作粒度上体会不同的任务之间<code>“宏“</code>与<code>“微“</code>的区别。</p>\n<h3>4. 宏任务和微任务</h3>\n<blockquote>\n<p>宏任务存于<code>Task queue</code>。</p>\n</blockquote>\n<p>以下类型为宏任务：</p>\n<ul>\n<li><code>setTimeout, setInterval, setImmediate</code></li>\n<li><code>I/O tasks</code></li>\n<li><code>IndexDB</code></li>\n<li><code>webWorkers postMessage</code></li>\n<li><code>UI</code>渲染任务</li>\n<li>...</li>\n</ul>\n<blockquote>\n<p>微任务存于<code>Job queue</code>。</p>\n</blockquote>\n<p>以下为操作粒度更高，执行优先级更高的微任务：</p>\n<ul>\n<li><code>Promise</code></li>\n<li><code>process.nextTick(Nodejs)</code></li>\n<li><code>MutationObserver</code>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver\"><code>MutationObserver</code></a>接口提供了监视对DOM树所做更改的能力。它被设计为旧的Mutation Events功能的替代品，该功能是DOM3 Events规范的一部分。</li>\n</ul>\n</li>\n<li>...</li>\n</ul>\n<p>微任务产生的时机在于：</p>\n<ul>\n<li>JavaScript 修改由<code>MutationObserver</code>监控的<code>DOM</code>节点</li>\n<li>使用浏览器原生<code>Promise</code></li>\n</ul>\n<h3>5. 宏任务和微任务的执行时机</h3>\n<p>浏览器执行一段 JavaScript 脚本的时候解释器将创建其全局执行上下文，同时创建一个<code>微任务队列（microtask queue）</code>以存放所有的微任务。</p>\n<p>如上所述，在宏任务执行期间存在着产生若干微任务的时机，新增的微任务直接添加到微任务队列。</p>\n<p>因此，事件循环中宏任务和微任务的执行流程如图所示：</p>\n<p><img src=\"https://mmbiz.qpic.cn/mmbiz_png/4yoHftkuXLfwIQFyvKsiaP92Rd8Qvor0A3hOwpJySwqnkt0mY2StK13icO1lcibonfzxiczrTibfQ0UKO8cJLe0y08g/0?wx_fmt=png\" alt=\"\"></p>\n<p>通常情况下，在JavaScript引擎准备退出全局执行上下文并清空调用栈的时候，JavaScript引擎会检查全局执行上下文中的微任务队列，然后按照顺序执行队列中的微任务，此时微任务里新增的微任务也将马上被执行。</p>\n<p>之后将执行渲染，后续则从宏任务队列中取出一个任务添加到主线程的调用栈中。</p>\n<h3>最后</h3>\n<p>本文浅析了 JavaScript 在浏览器端的事件循环和任务队列的知识点，浅薄之见，如有错漏欢迎大家指正，谢谢。</p>\n<h3>参考</h3>\n<ul>\n<li>\n<p><a href=\"https://flaviocopes.com/javascript-event-loop/\">The JavaScript Event Loop</a></p>\n</li>\n<li>\n<p><a href=\"https://html.spec.whatwg.org/multipage/webappapis.html#event-loops\">HTML Standard</a></p>\n</li>\n<li>\n<p><a href=\"https://www.jianshu.com/p/50ab99baf026\">JavaScript中的事件循环与消息队列 - 简书</a></p>\n</li>\n<li>\n<p><a href=\"https://medium.com/@Rahulx1/understanding-event-loop-call-stack-event-job-queue-in-javascript-63dcd2c71ecd\">Understanding Event Loop, Call Stack, Event &#x26; Job Queue in Javascript | by Rahul Sagore | Medium</a></p>\n</li>\n<li>\n<p><a href=\"https://time.geekbang.org/column/article/113399\">极客时间 - 李兵 - 浏览器工作原理与实践</a></p>\n</li>\n<li>\n<p><a href=\"https://segmentfault.com/a/1190000012748907\">浏览器中的事件循环机制 - SegmentFault 思否</a></p>\n</li>\n<li>\n<p><a href=\"https://blog.greenroots.info/task-queue-and-job-queue-deep-dive-into-javascript-event-loop-model-cjui19qqa005wdgs1742fa4wz\">Task Queue and Job Queue - Deep dive into Javascript Event Loop Model</a></p>\n</li>\n</ul>\n","title":"浏览器端javascript事件循环和任务队列浅析","date":"2021/4/20","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1618655108396-ce1ba6c80b7d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTg4NzMxMjg&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1618655108396-ce1ba6c80b7d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTg4NzMxMjg&ixlib=rb-1.2.1&q=80&w=400","intro":"事件循环是 JavaScript 语言中非常重要的部分,理解事件循环有利于理解 JavaScript 的设计理念,让我们能编写更好的代码.本文用简单的术语对其进行总结."}},"__N_SSG":true}