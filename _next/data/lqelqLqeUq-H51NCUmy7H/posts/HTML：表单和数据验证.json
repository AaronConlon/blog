{"pageProps":{"post":{"slug":"HTML：表单和数据验证","contentHtml":"<p>在提交用户在表单中填写的数据到服务器的过程中，无论是客户端或者服务端都需要对数据进行验证。客户端验证既可以约束用户输入的内容，获取格式正确的信息，也可以提升用户体验，减轻服务器的压力。客户端验证很容易被绕过，因此服务端数据验证则是最后一道保障，必须要具有完备的验证逻辑。</p>\n<p>今天，我们来聊聊<code>客户端表单验证</code>。</p>\n<h2>前言</h2>\n<p>我们既希望表单尽可能地易用，也希望表单能够对数据做严格的验证，究其原因不外乎以下几点：</p>\n<ul>\n<li>开发者希望获取正确的数据，且数据具有正确的格式</li>\n<li>开发者希望能够保护用户的数据，例如希望用户的密码具有一定的复杂度，避免使用过于简单的密码</li>\n<li>开发者希望保护应用或网站本身，服务器安全也是开发者需要关注的一部分</li>\n</ul>\n<h2>数据验证技术</h2>\n<p>通常，开发者可以从以下两种方案去做数据验证：</p>\n<ul>\n<li>浏览器内置的数据验证功能接口</li>\n<li>使用 JavaScript 严格控制数据结构</li>\n</ul>\n<h4>使用内置验证接口</h4>\n<p><code>HTML5</code>为<code>form</code>标签提供了具有数据验证功能的属性：</p>\n<ul>\n<li><code>required</code>: 在提交前必须填写</li>\n<li><code>minlength</code>和<code>maxlength</code>：指定填写的字符串长度最小值和最大值</li>\n<li><code>min</code>和<code>max</code>： 指定值的范围</li>\n<li><code>type</code>：<code>input</code>标签常用此属性为输入值提供样式和数据类型默认匹配规则，例如值为<code>email</code>，则会验证填写的值是否是一个合格的<code>email</code>地址</li>\n<li><code>pattern</code>：指定一个正则表达式作为匹配规则，通常我们可以针对特定的数据格式提供一个严格的<code>pattern</code>正则表达式作为匹配条件</li>\n</ul>\n<p>当数据通过了浏览器内置的验证规则时，相关的元素可以使用<code>:valid</code> CSS 伪类来指定一些样式代码，并且在没有用户主动终止提交表单行为或者没有<code>Javascript</code>代码拦截表单提交行为的时候，数据可以顺利提交到服务器。</p>\n<blockquote>\n<p><code>input:required:valid</code>伪类可以设置多个条件同时满足的时候的样式</p>\n</blockquote>\n<p>如果数据无法通过浏览器内置的验证规则，则相关元素可以使用<code>:invalid</code> CSS 伪类来指定一些样式代码来强调或突出数据验证失败的讯息，浏览器也会默认提供一些数据验证失败的原因提示。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:required</span><span class=\"hljs-selector-pseudo\">:invalid</span>, <span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:focus</span><span class=\"hljs-selector-pseudo\">:invalid</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(/images/invalid.png);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">background-position</span>: right top;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span><span class=\"hljs-selector-tag\">input</span><span class=\"hljs-selector-pseudo\">:required</span><span class=\"hljs-selector-pseudo\">:valid</span> {\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(/images/valid.png);\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-attribute\">background-position</span>: right top;\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attribute\">background-repeat</span>: no-repeat;\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>为输入框设置一个靠右的状态提示背景图。</p>\n<h4>使用 JavaScript 验证表单</h4>\n<p><code>HTML5</code>表单特性很棒，但是遗憾的是并非所有浏览器都支持<code>HTML5</code>，有时候我们需要使用<code>JavaScript</code>来增强应用的兼容性。</p>\n<p>如果你想获得更灵活的控制权，或者统一不同浏览器的兼容性，提供错误信息提示的一致性方案，或是对错误信息的展示进行美化，从而让用户获得更好的使用体验，使用<code>JavaScript</code>进行表单验证是最佳的选择。</p>\n<p>好在大多数浏览器都支持<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation\">Constraint Validation API</a>,此特性提供了一系列关于浏览器表单数据验证的<code>DOM</code>元素接口：</p>\n<ul>\n<li>HTMLButtonElement</li>\n<li>HTMLFieldSetElement</li>\n<li>HTMLInputElement</li>\n<li>HTMLOutputElement</li>\n<li>HTMLSelectElement</li>\n<li>HTMLTextAreaElement</li>\n</ul>\n<p>根据命名就很容易得知其代表的元素标签是什么，<code>Constraint Validation API</code>使得上述元素具有以下属性和方法：</p>\n<ul>\n<li>validationMessage：返回一个本地化的数据验证描述字符串，验证失败时，各个浏览器厂商的实现方式不一致导致此属性的值可能不一致。验证成功则一致返回空字符串。</li>\n<li>valididy：返回一个<code>ValidityState</code>对象，此对象支持一系列的数据验证方法的布尔值，我们可以根据此对象的方法判断表单数据的正确性，并编写相关代码，即使在<code>IE 10~11</code>上，表单验证的支持度都很高，足以让我们通过原生的接口控制表单验证和样式。</li>\n<li>willValidate：如果表单提交时会进行数据验证则返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>checkValidity()：此方法返回元素的验证性布尔值。</li>\n<li>setCustomValidity(message)：此方法可以通过<code>JavaScript</code>统一兼容不同厂商的数据验证提示信息，但由于依然需要细粒度地兼容提示信息的样式，也许选择使用此方法的开发者并不多。</li>\n</ul>\n<p>现如今几乎很少有开发者自己手动编写数据验证验证代码，社区开源的诸多数据验证的第三方库（诸如<code>Validate.js</code>）在大多数时候都能满足我们的需求（即使存在些许需求需要微调，也可以在其基础上添加一些方法弥补），但是笔者认为<code>了解原生数据验证的原理和使用方法对于开发者来说依然是很有学习价值的</code>。</p>\n<p>话说回来，让我编写了一个简单的数据验证的<code>Demo</code>:</p>\n<p><code>HTML</code>部分为：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span>&#x3C;form onSubmit={sub} noValidate>\n<span class=\"lineNumber\">2</span>  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"text\"</span> <span class=\"hljs-attr\">minLength</span>=<span class=\"hljs-string\">\"2\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"username\"</span> <span class=\"hljs-attr\">required</span>/></span></span>\n<span class=\"lineNumber\">3</span>  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"password\"</span> <span class=\"hljs-attr\">required</span>/></span></span>\n<span class=\"lineNumber\">4</span>  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"email\"</span> <span class=\"hljs-attr\">required</span>/></span></span>\n<span class=\"lineNumber\">5</span>  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">button</span>></span>submit<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">button</span>></span></span>\n<span class=\"lineNumber\">6</span>&#x3C;/form>\n<span class=\"lineNumber\">7</span>{\n<span class=\"lineNumber\">8</span>  state !== <span class=\"hljs-literal\">true</span> &#x26;&#x26; <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>{state + \" 🤔\"}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span></span>\n<span class=\"lineNumber\">9</span>}</code></pre> \n\n<p><code>JavaScript</code>部分为：</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"lineNumber\">1</span>useEffect(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> userInput = <span class=\"hljs-built_in\">document</span>.querySelector(<span class=\"hljs-string\">\"#username\"</span>)\n<span class=\"lineNumber\">3</span>  userInput.addEventListener(<span class=\"hljs-string\">'input'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">evt</span>) =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">userInput.validity.tooShort</span>)</span> {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-comment\">// user.setCustomValidity(\"\")</span>\n<span class=\"lineNumber\">6</span>      setState(<span class=\"hljs-string\">\"username is too short.\"</span>)\n<span class=\"lineNumber\">7</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">8</span>      <span class=\"hljs-comment\">// user.setCustomValidity(\"\")</span>\n<span class=\"lineNumber\">9</span>      setState(<span class=\"hljs-literal\">true</span>)\n<span class=\"lineNumber\">10</span>    }\n<span class=\"lineNumber\">11</span>  })\n<span class=\"lineNumber\">12</span>},[])</code></pre> \n\n<p>为了简单起见，只检查用户名输入字符串是否大于等于2，我在<code>form</code>标签上添加了<code>noValidate</code>属性（此属性支持度非常高），屏蔽了不同厂商的数据验证提示样式，我们自己来写样式。</p>\n<p>最终数据未通过验证和通过验证的截图如下：</p>\n<p><img src=\"https://i.loli.net/2021/06/02/a2pQjSzb3ZPVfC1.png\" alt=\"image-20210602001552596\"></p>\n<p><img src=\"https://i.loli.net/2021/06/02/cimGA4wqBgKdsfT.png\" alt=\"image-20210602001538284\"></p>\n<p>结合数据验证的结果，我们可以通过控制不同标签的<code>:invalid</code>和<code>:valid</code>伪类去控制样式，从而让不同浏览器之间具有一致的表现效果。</p>\n<h2>最后</h2>\n<p>如果你需要控制客户端表单数据验证的样式和提示信息，则需要<code>JavaScript</code>配合原生的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Constraint_validation\">Constraint Validation API</a>接口来处理验证逻辑方面的细节，但这并不是最难的，困难的部分在于应对用于各种不可知的神奇输入内容。</p>\n<p>总之，再次引用<code>developer.mozilla.org</code>参考上关于表单数据验证的三点建议：</p>\n<ul>\n<li>明确地展示错误信息</li>\n<li>接受用户的输入格式</li>\n<li>指出错误发生的确切的位置，尤其是在大型界面上</li>\n</ul>\n<p>最后，<code>严格验证用户输入</code>，一旦用户输入通过了客户端验证，后面的问题就交给服务端吧。</p>\n<p>今天的内容就到这了，我们下次再会。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Learn/Forms/Form_validation\">Client-side form validation - Learn web development | MDN</a></li>\n<li><a href=\"https://www.the-art-of-web.com/html/html5-form-validation/#user_comments\">HTML5 Form Validation Examples &#x3C; HTML | The Art of Web</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/form-validation-with-html5-and-javascript/\">Data Validation – How to Check User Input on HTML Forms with Example JavaScript Code</a></li>\n<li><a href=\"https://www.falldowngoboone.com/blog/native-form-validation-with-javascript/\">Native form validation with JavaScript | falldowngoboone</a></li>\n</ul>\n","title":"HTML：表单和数据验证","date":"2021/5/30","tags":["HTML"],"mainImg":"https://images.unsplash.com/photo-1553196798-b71feabce946?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzgwMjc&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1553196798-b71feabce946?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzgwMjc&ixlib=rb-1.2.1&q=80&w=400","intro":"为了丰富我的 HTML 体系知识，专门针对表单和数据验证进行了回顾，本文将对表单和数据验证的知识进行总结。"}},"__N_SSG":true}