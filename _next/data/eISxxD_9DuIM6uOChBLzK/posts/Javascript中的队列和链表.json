{"pageProps":{"post":{"slug":"Javascript中的队列和链表","contentHtml":"<p>长话短说,本文将队列和链表的知识合二为一.通过一些示例再次巩固这部分的知识.大概内容分为:</p>\n<ul>\n<li>\n<p>简单队列</p>\n</li>\n<li>\n<p>双端队列</p>\n</li>\n<li>\n<p>队列应用</p>\n<ul>\n<li>击鼓传花</li>\n<li>回文字检查</li>\n</ul>\n</li>\n<li>\n<p>单向链表</p>\n</li>\n<li>\n<p>双向链表</p>\n</li>\n<li>\n<p>循环链表</p>\n</li>\n<li>\n<p>排序链表</p>\n</li>\n</ul>\n<h1>队列</h1>\n<p>队列,先进先出.排过队吗?按顺序添加和处理的任务,都可以用<code>队列</code>的结构进行存储和消费.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Queue</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\"></span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>._items = {}\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>._count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">this</span>._lowestCount = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">enqueue</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._count] = e\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">this</span>._count++\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">dequeue</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-built_in\">this</span>._lowestCount += <span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-keyword\">return</span> r\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span> \n<span class=\"lineNumber\">20</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._lowestCount === <span class=\"hljs-built_in\">this</span>._count\n<span class=\"lineNumber\">22</span>  }\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peek</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.isEmpty()  ? <span class=\"hljs-literal\">undefined</span> : <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount]\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span> \n<span class=\"lineNumber\">27</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._count - <span class=\"hljs-built_in\">this</span>._lowestCount\n<span class=\"lineNumber\">29</span>  }\n<span class=\"lineNumber\">30</span> \n<span class=\"lineNumber\">31</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">32</span>    <span class=\"hljs-built_in\">this</span>._items = {}\n<span class=\"lineNumber\">33</span>    <span class=\"hljs-built_in\">this</span>._count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">34</span>    <span class=\"hljs-built_in\">this</span>._lowestCount = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">37</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">38</span>    <span class=\"hljs-keyword\">let</span> r = <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">39</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> iterator <span class=\"hljs-keyword\">of</span> <span class=\"hljs-built_in\">Object</span>.values(<span class=\"hljs-built_in\">this</span>._items)) {\n<span class=\"lineNumber\">40</span>      r += r === <span class=\"hljs-string\">''</span> ? <span class=\"hljs-string\">`<span class=\"hljs-subst\">${iterator}</span>`</span> : <span class=\"hljs-string\">`, <span class=\"hljs-subst\">${iterator}</span>`</span>\n<span class=\"lineNumber\">41</span>    }\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> r\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>}\n<span class=\"lineNumber\">45</span> \n<span class=\"lineNumber\">46</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> Queue()\n<span class=\"lineNumber\">47</span><span class=\"hljs-built_in\">console</span>.log(a.isEmpty())\n<span class=\"lineNumber\">48</span>a.enqueue(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">49</span>a.enqueue(<span class=\"hljs-string\">'just for fun'</span>)\n<span class=\"lineNumber\">50</span><span class=\"hljs-built_in\">console</span>.log(a.toString())\n<span class=\"lineNumber\">51</span>a.clear()\n<span class=\"lineNumber\">52</span><span class=\"hljs-built_in\">console</span>.log(a.toString())</code></pre> \n\n<p>普通队列简单,但是有些场景需要对最新入队的元素进行操作.例如,针对需要存储一系列操作的需求.此时,需要灵活处理队首和队尾的数据内容.</p>\n<p>当引发撤销操作的时候,操作队列可以从尾部弹出最后的操作记录.</p>\n<p>我们需要双端队列.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Deque</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Queue</span></span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-title\">constructor</span> (<span class=\"hljs-params\"></span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">super</span>()\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">addFront</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.isEmpty()</span>)</span> {\n<span class=\"lineNumber\">7</span>      <span class=\"hljs-built_in\">this</span>.enqueue(e)\n<span class=\"lineNumber\">8</span>    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>._lowestCount > <span class=\"hljs-number\">0</span></span>)</span> {\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-built_in\">this</span>._lowestCount--      \n<span class=\"lineNumber\">10</span>      <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._lowestCount] = e\n<span class=\"lineNumber\">11</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">12</span>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-built_in\">this</span>._count;i><span class=\"hljs-number\">0</span>;i--) {\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-comment\">// 往后移动一位</span>\n<span class=\"lineNumber\">14</span>        <span class=\"hljs-built_in\">this</span>._items[i] = <span class=\"hljs-built_in\">this</span>._items[i - <span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">15</span>      }\n<span class=\"lineNumber\">16</span>      <span class=\"hljs-built_in\">this</span>._count++\n<span class=\"lineNumber\">17</span>      <span class=\"hljs-built_in\">this</span>._lowestCount = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">18</span>      <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-number\">0</span>] = e\n<span class=\"lineNumber\">19</span>    }\n<span class=\"lineNumber\">20</span>  }\n<span class=\"lineNumber\">21</span>\t<span class=\"hljs-comment\">// 从队尾出队</span>\n<span class=\"lineNumber\">22</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">removeBack</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">23</span>    <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-built_in\">this</span>.isEmpty()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">const</span> lastOne = <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._count - <span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">25</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.size() === <span class=\"hljs-number\">1</span></span>)</span> {\n<span class=\"lineNumber\">26</span>      <span class=\"hljs-built_in\">this</span>.clear()\n<span class=\"lineNumber\">27</span>    }\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-keyword\">delete</span> <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._count - <span class=\"hljs-number\">1</span>]\n<span class=\"lineNumber\">29</span>    <span class=\"hljs-built_in\">this</span>._count--\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-keyword\">return</span> lastOne\n<span class=\"lineNumber\">31</span>  }\n<span class=\"lineNumber\">32</span> \n<span class=\"lineNumber\">33</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">peekBack</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">34</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>._items[<span class=\"hljs-built_in\">this</span>._count]\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>}</code></pre> \n\n<p>其他方法继承于<code>Queue</code>,可以实现双端数据操作.</p>\n<p>现在,让我们来模拟<code>击鼓传花</code>问题.</p>\n<blockquote>\n<p><em>班级中玩一个游戏，所有学生围成一圈，从某位同学手里开始向旁边的同学传一束花。这个时候某个人（比方班长），在击鼓，鼓声停下的一刻，花落在谁手里，谁就进去表演节目</em>.</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-keyword\">new</span> Queue();\n<span class=\"lineNumber\">2</span>[<span class=\"hljs-string\">'杜小帅'</span>, <span class=\"hljs-string\">'高海'</span>, <span class=\"hljs-string\">'董文武'</span>, <span class=\"hljs-string\">'雪儿'</span>, <span class=\"hljs-string\">'洛克斯'</span>, <span class=\"hljs-string\">'庄杯'</span>, <span class=\"hljs-string\">'K'</span>].forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> a.enqueue(i));\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">let</span> createANum =  <span class=\"hljs-function\">() =></span> <span class=\"hljs-built_in\">Math</span>.random().toFixed(<span class=\"hljs-number\">1</span>) * <span class=\"hljs-number\">10</span>\n<span class=\"lineNumber\">4</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">start</span>(<span class=\"hljs-params\">queue</span>) </span>{\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">queue.size() === <span class=\"hljs-number\">1</span></span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`现场唯一的观众: <span class=\"hljs-subst\">${queue.dequeue()}</span>`</span>);\n<span class=\"lineNumber\">7</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">createANum() > <span class=\"hljs-number\">7</span></span>)</span> {\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${a.dequeue()}</span>, 请开始你的表演.`</span>);\n<span class=\"lineNumber\">10</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">11</span>      queue.enqueue(queue.dequeue())\n<span class=\"lineNumber\">12</span>    }\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}\n<span class=\"lineNumber\">15</span><span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">a.size() >= <span class=\"hljs-number\">1</span></span>)</span> {\n<span class=\"lineNumber\">16</span>  start(a)\n<span class=\"lineNumber\">17</span>}\n<span class=\"lineNumber\">18</span> \n<span class=\"lineNumber\">19</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">20</span><span class=\"hljs-comment\">// 庄杯, 请开始你的表演.</span>\n<span class=\"lineNumber\">21</span><span class=\"hljs-comment\">// 董文武, 请开始你的表演.</span>\n<span class=\"lineNumber\">22</span><span class=\"hljs-comment\">// 高海, 请开始你的表演.</span>\n<span class=\"lineNumber\">23</span><span class=\"hljs-comment\">// 杜小帅, 请开始你的表演.</span>\n<span class=\"lineNumber\">24</span><span class=\"hljs-comment\">// 我, 请开始你的表演.</span>\n<span class=\"lineNumber\">25</span><span class=\"hljs-comment\">// 洛克斯, 请开始你的表演.</span>\n<span class=\"lineNumber\">26</span><span class=\"hljs-comment\">// 现场唯一的观众: 雪儿</span></code></pre> \n\n<p>接下来是回文检查,什么是回文字?</p>\n<blockquote>\n<p>回文是指正反序都相等的字符串序列,例如 <code>lol</code>,<code>madam</code>等等.</p>\n</blockquote>\n<p>最简单的方式就是使用双端队列来处理这个问题.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">palindromeCheaker</span>(<span class=\"hljs-params\">str</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(str === <span class=\"hljs-literal\">undefined</span> || str === <span class=\"hljs-string\">''</span> || str === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">const</span> deque = <span class=\"hljs-keyword\">new</span> Deque();\n<span class=\"lineNumber\">4</span>  [...str].forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> deque.enqueue(i));\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">while</span>(<span class=\"hljs-params\">deque.size() > <span class=\"hljs-number\">1</span></span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">if</span>(deque.removeBack() !== deque.dequeue()) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span><span class=\"hljs-built_in\">console</span>.log(palindromeCheaker(<span class=\"hljs-string\">'121'</span>), palindromeCheaker(<span class=\"hljs-string\">'madam'</span>), palindromeCheaker(<span class=\"hljs-string\">'jay'</span>))\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">13</span><span class=\"hljs-comment\">// true, true, false</span></code></pre> \n\n<p>JavaScript 任务也使用了队列这种数据结构.详情可以看看:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33058983\">详解JavaScript中的Event Loop（事件循环）机制 - 知乎</a></p>\n<h1>链表</h1>\n<p>存储多个元素,数组可能是最常用的数据结构,如果需要从起点或者中间插入元素,数组的操作成本很高.尽管<code>JavaScript</code>数组支持了一些方法来做这些事,但是背后的情况同样如此.</p>\n<blockquote>\n<p>数组的元素在内存中是连续的,链表则可以是不连续的,链表的关键是使用节点的属性保存下一个或者上一个链表的信息.</p>\n</blockquote>\n<p>相比于传统数组,链表添加或者移除一个元素不需要移动其他元素,大大降低了内存成本.</p>\n<p><img src=\"https://pic2.zhimg.com/v2-8158f5bef33b4d38c0ff43d11139a003_1440w.jpg?source=172ae18b\" alt=\"\"></p>\n<p>上图是从网上随便找的示意图.观察可以发现,如果要找到某个节点,需要从<code>head</code>一路往下查找.让我们来实现这一数据结构.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">this</span>.count = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>.head = <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">e</span>)</span> {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">const</span> element = <span class=\"hljs-keyword\">new</span> Node(e)\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.head === <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">11</span>      <span class=\"hljs-built_in\">this</span>.head = element\n<span class=\"lineNumber\">12</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">13</span>      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">14</span>      <span class=\"hljs-keyword\">while</span> (current.next) {\n<span class=\"lineNumber\">15</span>        current = current.next\n<span class=\"lineNumber\">16</span>      }\n<span class=\"lineNumber\">17</span>      current.next = element\n<span class=\"lineNumber\">18</span>    }\n<span class=\"lineNumber\">19</span>  }\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">21</span>   * \n<span class=\"lineNumber\">22</span>   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number}</span> </span>index 返回删除节点的 element\n<span class=\"lineNumber\">23</span>   */</span>\n<span class=\"lineNumber\">24</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">removeAt</span>(<span class=\"hljs-params\">index</span>)</span> {\n<span class=\"lineNumber\">25</span>    <span class=\"hljs-keyword\">if</span> (index >= <span class=\"hljs-number\">0</span> &#x26;&#x26; index &#x3C; <span class=\"hljs-built_in\">this</span>.count) {\n<span class=\"lineNumber\">26</span>      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">27</span>      <span class=\"hljs-keyword\">if</span> (index == <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">28</span>        <span class=\"hljs-built_in\">this</span>.head = current.next\n<span class=\"lineNumber\">29</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">30</span>        <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index - <span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">31</span>        current = prev.next\n<span class=\"lineNumber\">32</span>        prev.next = current.next\n<span class=\"lineNumber\">33</span>      }\n<span class=\"lineNumber\">34</span>      <span class=\"hljs-built_in\">this</span>.count--\n<span class=\"lineNumber\">35</span>      <span class=\"hljs-keyword\">return</span> current.element\n<span class=\"lineNumber\">36</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">37</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">38</span>    }\n<span class=\"lineNumber\">39</span>  }\n<span class=\"lineNumber\">40</span> \n<span class=\"lineNumber\">41</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">removeValue</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-built_in\">this</span>.indexOf(element)\n<span class=\"lineNumber\">43</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.removeAt(index)\n<span class=\"lineNumber\">44</span>  }\n<span class=\"lineNumber\">45</span> \n<span class=\"lineNumber\">46</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getElementByIndex</span>(<span class=\"hljs-params\">index</span>)</span> {\n<span class=\"lineNumber\">47</span>    <span class=\"hljs-keyword\">if</span> (index >= <span class=\"hljs-number\">0</span> &#x26;&#x26; index &#x3C; <span class=\"hljs-built_in\">this</span>.count) {\n<span class=\"lineNumber\">48</span>      <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">49</span>      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &#x3C; index &#x26;&#x26; node !== <span class=\"hljs-literal\">null</span>; i++) {\n<span class=\"lineNumber\">50</span>        node = node.next\n<span class=\"lineNumber\">51</span>      }\n<span class=\"lineNumber\">52</span>      <span class=\"hljs-keyword\">return</span> node\n<span class=\"lineNumber\">53</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">54</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">55</span>    }\n<span class=\"lineNumber\">56</span>  }\n<span class=\"lineNumber\">57</span> \n<span class=\"lineNumber\">58</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">element, index</span>)</span> {\n<span class=\"lineNumber\">59</span>    <span class=\"hljs-keyword\">if</span> (index >= <span class=\"hljs-number\">0</span> &#x26;&#x26; index &#x3C;= <span class=\"hljs-built_in\">this</span>.count) {\n<span class=\"lineNumber\">60</span>      <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> Node(element)\n<span class=\"lineNumber\">61</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">62</span>        <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">63</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">64</span>        <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index - <span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">65</span>        node.next = prev.next\n<span class=\"lineNumber\">66</span>        prev.next = node\n<span class=\"lineNumber\">67</span>      }\n<span class=\"lineNumber\">68</span>      <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">69</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">70</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">71</span>    }\n<span class=\"lineNumber\">72</span>  }\n<span class=\"lineNumber\">73</span> \n<span class=\"lineNumber\">74</span>  <span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">75</span>   * \n<span class=\"lineNumber\">76</span>   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{any}</span> </span>element search a element, return a index\n<span class=\"lineNumber\">77</span>   */</span>\n<span class=\"lineNumber\">78</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">indexOf</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">79</span>    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">80</span>    <span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">81</span>    <span class=\"hljs-keyword\">while</span> (current) {\n<span class=\"lineNumber\">82</span>      <span class=\"hljs-keyword\">if</span> (current.element !== element) {\n<span class=\"lineNumber\">83</span>        current = current.next\n<span class=\"lineNumber\">84</span>        index++\n<span class=\"lineNumber\">85</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">86</span>        <span class=\"hljs-keyword\">return</span> index\n<span class=\"lineNumber\">87</span>      }\n<span class=\"lineNumber\">88</span>    }\n<span class=\"lineNumber\">89</span>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">90</span>  }\n<span class=\"lineNumber\">91</span> \n<span class=\"lineNumber\">92</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">isEmpty</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">93</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">94</span>  }\n<span class=\"lineNumber\">95</span> \n<span class=\"lineNumber\">96</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">size</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">97</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.count\n<span class=\"lineNumber\">98</span>  }\n<span class=\"lineNumber\">99</span> \n<span class=\"lineNumber\">100</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getHead</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">101</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">102</span>  }\n<span class=\"lineNumber\">103</span> \n<span class=\"lineNumber\">104</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">105</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">106</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">107</span>    }\n<span class=\"lineNumber\">108</span>    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">109</span>    <span class=\"hljs-keyword\">while</span> (current.next !== <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">110</span>      <span class=\"hljs-built_in\">console</span>.log(current.element);\n<span class=\"lineNumber\">111</span>      current = current.next\n<span class=\"lineNumber\">112</span>    }\n<span class=\"lineNumber\">113</span>    <span class=\"hljs-built_in\">console</span>.log(current.element);\n<span class=\"lineNumber\">114</span>  }\n<span class=\"lineNumber\">115</span>}\n<span class=\"lineNumber\">116</span> \n<span class=\"lineNumber\">117</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Node</span> </span>{\n<span class=\"lineNumber\">118</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">119</span>    <span class=\"hljs-built_in\">this</span>.element = element;\n<span class=\"lineNumber\">120</span>    <span class=\"hljs-built_in\">this</span>.next = <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">121</span>  }\n<span class=\"lineNumber\">122</span>}</code></pre> \n\n<p>来思考一个算法题目,翻转链表:</p>\n<blockquote>\n<p>题意：反转一个单链表。</p>\n<p>示例: 输入: 1->2->3->4->5->NULL\n输出: 5->4->3->2->1->NULL</p>\n</blockquote>\n<p>直接翻转指针,可以避免多余的链表创建和内存占用.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// data is a LinkedList</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">reverseLinkList</span>(<span class=\"hljs-params\">data</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span> (data.size() > <span class=\"hljs-number\">1</span>) {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">let</span> current = data.head\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">let</span> prev = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">let</span> next = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">while</span> (current !== <span class=\"hljs-literal\">undefined</span>) {\n<span class=\"lineNumber\">8</span>      next = current.next;\n<span class=\"lineNumber\">9</span>      current.next = prev;\n<span class=\"lineNumber\">10</span>      prev = current\n<span class=\"lineNumber\">11</span>      current = next\n<span class=\"lineNumber\">12</span>    }\n<span class=\"lineNumber\">13</span>    data.head = prev\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> data\n<span class=\"lineNumber\">15</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-keyword\">return</span> data\n<span class=\"lineNumber\">17</span>  }\n<span class=\"lineNumber\">18</span>}</code></pre> \n\n<p>接着,看看<code>双向链表</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DoublyNode</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">Node</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">element, prev = <span class=\"hljs-literal\">undefined</span>, next = <span class=\"hljs-literal\">undefined</span></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">super</span>(element, next)\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">this</span>.prev = prev;\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>}\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">DoublyLinkedList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">super</span>()\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-built_in\">this</span>.tail = <span class=\"hljs-literal\">undefined</span>;\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> DoublyNode(element)\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">16</span>      <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">17</span>      <span class=\"hljs-built_in\">this</span>.tail = node\n<span class=\"lineNumber\">18</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">19</span>      <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">20</span>      <span class=\"hljs-keyword\">while</span> (current.next) {\n<span class=\"lineNumber\">21</span>        current = current.next\n<span class=\"lineNumber\">22</span>      }\n<span class=\"lineNumber\">23</span>      current.next = node\n<span class=\"lineNumber\">24</span>      node.prev = current\n<span class=\"lineNumber\">25</span>    }\n<span class=\"lineNumber\">26</span>    <span class=\"hljs-built_in\">this</span>.tail = node\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">28</span>  }\n<span class=\"lineNumber\">29</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">element, index</span>)</span> {\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> DoublyNode(element)\n<span class=\"lineNumber\">31</span>    <span class=\"hljs-keyword\">if</span> (index >= <span class=\"hljs-number\">0</span> &#x26;&#x26; index &#x3C;= <span class=\"hljs-built_in\">this</span>.count) {\n<span class=\"lineNumber\">32</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">33</span>        <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">34</span>        <span class=\"hljs-built_in\">this</span>.tail = node\n<span class=\"lineNumber\">35</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">36</span>        <span class=\"hljs-keyword\">let</span> oldNode = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index)\n<span class=\"lineNumber\">37</span>        <span class=\"hljs-built_in\">console</span>.log(oldNode.element, <span class=\"hljs-string\">'is old node'</span>);\n<span class=\"lineNumber\">38</span>        <span class=\"hljs-comment\">// 新插入节点设置了前后节点</span>\n<span class=\"lineNumber\">39</span>        node.next = oldNode\n<span class=\"lineNumber\">40</span>        node.prev = oldNode.prev\n<span class=\"lineNumber\">41</span>        <span class=\"hljs-comment\">// 旧的节点设置了 prev</span>\n<span class=\"lineNumber\">42</span>        oldNode.prev = node\n<span class=\"lineNumber\">43</span>        <span class=\"hljs-keyword\">if</span> (node.prev) {\n<span class=\"lineNumber\">44</span>          <span class=\"hljs-comment\">// 如果前节点存在</span>\n<span class=\"lineNumber\">45</span>          node.prev.next = node\n<span class=\"lineNumber\">46</span>        } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">47</span>          <span class=\"hljs-comment\">// 不存在则说明插入的是链表头</span>\n<span class=\"lineNumber\">48</span>          <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">49</span>        }\n<span class=\"lineNumber\">50</span>      }\n<span class=\"lineNumber\">51</span>      <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">52</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">53</span>    }\n<span class=\"lineNumber\">54</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">55</span>  }\n<span class=\"lineNumber\">56</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getTail</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">57</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.tail\n<span class=\"lineNumber\">58</span>  }\n<span class=\"lineNumber\">59</span>  <span class=\"hljs-comment\">/**\n<span class=\"lineNumber\">60</span>   * \n<span class=\"lineNumber\">61</span>   * <span class=\"hljs-doctag\">@param <span class=\"hljs-type\">{number}</span> </span>index 1. 链表长为 1\n<span class=\"lineNumber\">62</span>   * 2. 长不为 1 => 1.删除首个元素/ 2.删除最后元素 / 3.删除中间元素\n<span class=\"lineNumber\">63</span>   */</span>\n<span class=\"lineNumber\">64</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">removeAt</span>(<span class=\"hljs-params\">index</span>)</span> {\n<span class=\"lineNumber\">65</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index)\n<span class=\"lineNumber\">66</span>    <span class=\"hljs-comment\">// 空链表和无效 index</span>\n<span class=\"lineNumber\">67</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span> &#x26;&#x26; node === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">68</span> \n<span class=\"lineNumber\">69</span>    <span class=\"hljs-comment\">// 链长 1,删除 1</span>\n<span class=\"lineNumber\">70</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">1</span> &#x26;&#x26; node === <span class=\"hljs-built_in\">this</span>.head) {\n<span class=\"lineNumber\">71</span>      <span class=\"hljs-built_in\">this</span>.head = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">72</span>      <span class=\"hljs-built_in\">this</span>.tail = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">73</span>      <span class=\"hljs-built_in\">this</span>.count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">74</span>      <span class=\"hljs-keyword\">return</span> node\n<span class=\"lineNumber\">75</span>    }\n<span class=\"lineNumber\">76</span>    <span class=\"hljs-comment\">// 链长不为 1</span>\n<span class=\"lineNumber\">77</span>    <span class=\"hljs-comment\">// index 对应的 node 有效</span>\n<span class=\"lineNumber\">78</span>    <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-built_in\">this</span>.head) {\n<span class=\"lineNumber\">79</span>      <span class=\"hljs-built_in\">this</span>.head = node.next\n<span class=\"lineNumber\">80</span>    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node === <span class=\"hljs-built_in\">this</span>.tail) {\n<span class=\"lineNumber\">81</span>      node.prev.next = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">82</span>      <span class=\"hljs-built_in\">this</span>.tail = node.prev\n<span class=\"lineNumber\">83</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">84</span>      node.prev.next = node.next\n<span class=\"lineNumber\">85</span>      node.next.prev = node.prev\n<span class=\"lineNumber\">86</span>    }\n<span class=\"lineNumber\">87</span>    <span class=\"hljs-built_in\">this</span>.count--\n<span class=\"lineNumber\">88</span>    <span class=\"hljs-keyword\">return</span> node\n<span class=\"lineNumber\">89</span>  }\n<span class=\"lineNumber\">90</span>}</code></pre> \n\n<p>双向链表增加了<code>tail</code>属性,保存了链表尾部元素,且对每个节点的结构,增加了<code>prev</code>属性保存前一个节点信息.</p>\n<p>下面看看<code>双向循环链表</code>,其跟双向链表的区别在于,对首个元素的<code>prev</code>设置为最后一个元素.最后一个元素的<code>next</code>设置为首个元素.因此,需要稍微调整代码结构.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LoopDoublyLinkedList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">DoublyLinkedList</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">super</span>()\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">push</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> DoublyNode(element)\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">8</span>      <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-built_in\">this</span>.tail = node\n<span class=\"lineNumber\">10</span>      node.prev = node\n<span class=\"lineNumber\">11</span>      node.next = node\n<span class=\"lineNumber\">12</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">13</span>      <span class=\"hljs-comment\">// 新节点的头和尾部改一下</span>\n<span class=\"lineNumber\">14</span>      node.next = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">15</span>      node.prev = <span class=\"hljs-built_in\">this</span>.tail\n<span class=\"lineNumber\">16</span>      <span class=\"hljs-built_in\">this</span>.tail.next = node\n<span class=\"lineNumber\">17</span>      <span class=\"hljs-built_in\">this</span>.head.prev = node\n<span class=\"lineNumber\">18</span>      <span class=\"hljs-built_in\">this</span>.tail = node\n<span class=\"lineNumber\">19</span>    }\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">21</span>  }\n<span class=\"lineNumber\">22</span> \n<span class=\"lineNumber\">23</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">removeAt</span>(<span class=\"hljs-params\">index</span>)</span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index)\n<span class=\"lineNumber\">25</span>    <span class=\"hljs-keyword\">if</span> (node) {\n<span class=\"lineNumber\">26</span>      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">1</span>) {\n<span class=\"lineNumber\">27</span>        <span class=\"hljs-built_in\">this</span>.clear()\n<span class=\"lineNumber\">28</span>      } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">29</span>        <span class=\"hljs-keyword\">let</span> prev = node.prev\n<span class=\"lineNumber\">30</span>        <span class=\"hljs-keyword\">let</span> next = node.next\n<span class=\"lineNumber\">31</span>        prev.next = next\n<span class=\"lineNumber\">32</span>        next.prev = prev\n<span class=\"lineNumber\">33</span>        <span class=\"hljs-built_in\">this</span>.count--\n<span class=\"lineNumber\">34</span>      }\n<span class=\"lineNumber\">35</span>      <span class=\"hljs-keyword\">return</span> node\n<span class=\"lineNumber\">36</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">37</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">38</span>    }\n<span class=\"lineNumber\">39</span>  }\n<span class=\"lineNumber\">40</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">element, index</span>)</span> {\n<span class=\"lineNumber\">41</span>    <span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-keyword\">new</span> DoublyNode(element)\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">let</span> targetNode = <span class=\"hljs-built_in\">this</span>.getElementByIndex(index)\n<span class=\"lineNumber\">43</span>    <span class=\"hljs-keyword\">if</span> (targetNode === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">44</span> \n<span class=\"lineNumber\">45</span>    <span class=\"hljs-comment\">// 确定了插入位置</span>\n<span class=\"lineNumber\">46</span>    <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\n<span class=\"lineNumber\">47</span>      <span class=\"hljs-comment\">// 插入表头</span>\n<span class=\"lineNumber\">48</span>      node.next = <span class=\"hljs-built_in\">this</span>.head.next\n<span class=\"lineNumber\">49</span>      node.prev = <span class=\"hljs-built_in\">this</span>.tail\n<span class=\"lineNumber\">50</span>      <span class=\"hljs-built_in\">this</span>.head.prev = node\n<span class=\"lineNumber\">51</span>      <span class=\"hljs-built_in\">this</span>.head = node\n<span class=\"lineNumber\">52</span>      <span class=\"hljs-built_in\">this</span>.tail.next = node\n<span class=\"lineNumber\">53</span>    } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">54</span>      node.prev = targetNode.prev\n<span class=\"lineNumber\">55</span>      node.next = targetNode\n<span class=\"lineNumber\">56</span>      targetNode.prev.next = node\n<span class=\"lineNumber\">57</span>      targetNode.prev = node\n<span class=\"lineNumber\">58</span>    }\n<span class=\"lineNumber\">59</span>    <span class=\"hljs-built_in\">this</span>.count++\n<span class=\"lineNumber\">60</span>  }\n<span class=\"lineNumber\">61</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">clear</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">62</span>    <span class=\"hljs-built_in\">this</span>.head = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">63</span>    <span class=\"hljs-built_in\">this</span>.tail = <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">64</span>    <span class=\"hljs-built_in\">this</span>.count = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">65</span>  }\n<span class=\"lineNumber\">66</span> \n<span class=\"lineNumber\">67</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">toString</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">68</span>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.count === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n<span class=\"lineNumber\">69</span>    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head\n<span class=\"lineNumber\">70</span>    <span class=\"hljs-comment\">// console.log(current.element);</span>\n<span class=\"lineNumber\">71</span>    <span class=\"hljs-comment\">// console.log(current.next, this.head);</span>\n<span class=\"lineNumber\">72</span>    <span class=\"hljs-keyword\">while</span> (current !== <span class=\"hljs-built_in\">this</span>.tail) {\n<span class=\"lineNumber\">73</span>      <span class=\"hljs-built_in\">console</span>.log(current.element);\n<span class=\"lineNumber\">74</span>      current = current.next\n<span class=\"lineNumber\">75</span>    }\n<span class=\"lineNumber\">76</span>    <span class=\"hljs-built_in\">console</span>.log(current.element);\n<span class=\"lineNumber\">77</span>  }\n<span class=\"lineNumber\">78</span>}</code></pre> \n\n<p>双向循环链表的关键在于处理新节点的<code>prev</code>和<code>next</code>值,只要不是<code>空</code>链表,则每一个节点都有这两个值.</p>\n<p>接下来是<code>有序链表</code>.为了让节点之间保持顺序,我们可以修改<code>insert</code>方法,让插入的位置由内部计算得出.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">SortedLinkedList</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title\">LinkedList</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">super</span>()\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">insert</span>(<span class=\"hljs-params\">element, index=<span class=\"hljs-number\">0</span></span>)</span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">this</span>.isEmpty()</span>)</span> {\n<span class=\"lineNumber\">7</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.insert(element, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">8</span>    }\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-comment\">// 自定义方法定义插入位置,用默认 index 代替 index 的效果.</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">const</span> pos = <span class=\"hljs-built_in\">this</span>.getIndexNextSortedElement(element);\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">super</span>.insert(element, pos)\n<span class=\"lineNumber\">12</span>  }\n<span class=\"lineNumber\">13</span>  \n<span class=\"lineNumber\">14</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">getIndexNextSortedElement</span>(<span class=\"hljs-params\">element</span>)</span> {\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-keyword\">let</span> current = <span class=\"hljs-built_in\">this</span>.head;\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-comment\">// 遍历,直接判断大小,也可以重新定义一个比较函数</span>\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\">;i &#x3C; <span class=\"hljs-built_in\">this</span>.size() &#x26;&#x26; current; i++</span>)</span> {\n<span class=\"lineNumber\">19</span>      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">current.element &#x3C; element</span>)</span> {\n<span class=\"lineNumber\">20</span>        <span class=\"hljs-keyword\">return</span> i\n<span class=\"lineNumber\">21</span>      }\n<span class=\"lineNumber\">22</span>      current = current.next\n<span class=\"lineNumber\">23</span>    }\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-keyword\">return</span> i\n<span class=\"lineNumber\">25</span>  }\n<span class=\"lineNumber\">26</span>}</code></pre> \n\n<p>其他方法都是继承的,不需要改变.由于插入的位置程序内部通过特定的比较算法去判断,因此实现了链表的有序性.</p>\n<p>在操作和查找一个有序的链表的场景之下,可以使用不同的查找算法提高查找效率.</p>\n<blockquote>\n<p>我想把这些数据结构都保存到自己的工具库中去,因此需要暂时停止下一步:集合和散列表的学习.转向 webpack5 和 babel7 ,用于创建良好的环境,支持自己保存工具库和自己的数据结构.</p>\n<p>2021年01月13日00:27:40,晚安.</p>\n</blockquote>\n<h1>参考</h1>\n<ul>\n<li><a href=\"https://zhuanlan.zhihu.com/p/52878334\">数据结构与算法-链表(上) - 知乎</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/52841915\">数据结构与算法-链表(下) - 知乎</a></li>\n</ul>\n","title":"Javascript中的队列和链表","date":"2021/1/7","tags":["JavaScript","数据结构与算法"],"mainImg":"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1526374965328-7f61d4dc18c5?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"几年前在学校使用 c++ 进行数据结构与算法的学习.学得跟屎一样,丢人现眼.前段时间在飞机上看完了队列和链表部分的内容,还是觉得需要整理一下写成文章."}},"__N_SSG":true}