{"pageProps":{"post":{"slug":"HTML浅解","contentHtml":"<p>​\t\t作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？</p>\n<p>​\t\t带着这些疑问，我决定重新学习<code>HTML</code>知识，如何学习？本文将带着疑问去学习<code>HTML</code>相关的知识，并且做出一定的总结。</p>\n<h2>前言</h2>\n<p><strong>HTML</strong>（超文本标记语言），也是万维网的核心标记语言，对于现代浏览器来说，<code>HTML</code>已经发展到了第五个版本，在多年的演变和改进之下，许多不合时宜的内容被清除了，同时随着版本更迭也有新的内容添加进来，作为一个 web 开发者，我们需要紧跟技术的发展，保持前瞻性和技术敏感度。</p>\n<p>知识无限，时间有限。</p>\n<p>忽略掉那些琐碎的片段，我们将从不同的问题开启每一个知识点。</p>\n<h2>Q&#x26;A</h2>\n<h3>1. HTML 和 XML 语法的差别</h3>\n<p>HTML（超文本标记语言）和 XML（可扩展标记语言）结构类似，但是在语法上具有以下不同之处：</p>\n<ul>\n<li>XML 严格区分大小写</li>\n<li>XML 具有严格的树状结构，禁止省略结束标记</li>\n<li>XML 属性值必须用引号包裹起来，而在 HTML 中则是可选的</li>\n<li>XML 所有属性必须具有值，HTML 则允许无值属性（采用默认值）</li>\n<li>XML 解析器不会像 HTML 这样过滤空格</li>\n<li>XML 没有固定的标记标签，所有标签都是自定义可扩展的</li>\n</ul>\n<p>二者在作用上也不同：</p>\n<ul>\n<li>XML 偏向于保存数据，可以被视为持久化结构</li>\n<li>HTML 偏向于描述数据结构</li>\n</ul>\n<p>其他方面：</p>\n<ul>\n<li>在浏览器中，HTML 文件的媒体类型是<code>text/html</code>，而 XML 的媒体类型则是<code>application/xhtml+xml</code>，不同的<code>MIME</code>类型在浏览器中将会以不同的解析器去解析文档。</li>\n</ul>\n<h3>2. 简单快速介绍一下 HTML 的知识</h3>\n<p>从最简单的一份<code>html</code>文档说起：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>></span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>></span>\n<span class=\"lineNumber\">3</span> <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Sample page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>\n<span class=\"lineNumber\">5</span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">6</span> <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">h1</span>></span>Sample page<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">h1</span>></span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">br</span> /></span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>This is a <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"demo.html\"</span>></span>simple<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span> sample.<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">&#x3C;!-- this is a comment --></span>\n<span class=\"lineNumber\">11</span> <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">12</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre> \n\n<p>如上述示例那样，HTML 文档具有树状结构，每一个节点标签都具备<code>开始标签</code>，但是不一定具有结束标签，标签支持<code>嵌套</code>。</p>\n<p>每个标签都可能有属性和值，举个例子：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"url\"</span>></span>somewhere<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">a</span>></span></code></pre> \n\n<p>标签具有各自的意义，属性值总是在<code>开始标签</code>内，并且如果属性值不包含特殊字符，则可以省略引号，但是更推荐保留引号，让整体结构的描述更准确。</p>\n<p>浏览器通过自己的<code>HTML</code>解析器去解析<code>HTML</code>文档，并且将之转换为<code>DOM（文档对象模型）</code>，这种模型将保存在内存中。</p>\n<p><img src=\"https://i.loli.net/2021/05/24/5e1l7FsB24hyqtR.png\" alt=\"image-20210524205054501\"></p>\n<p>上图是上述简单文档的<code>DOM</code>树状图形式，<code>DOM</code>提供了诸多<code>API</code>可以让开发者控制和修改<code>DOM</code>的结构。</p>\n<blockquote>\n<p>我们可以通过：<code>caniuse.com</code>对标签和属性的兼容性进行查询</p>\n</blockquote>\n<p>又绕回来说上述代码，最基础的上述结构中，可以继续延伸了解一下大部分标签。</p>\n<ul>\n<li><code>&#x3C;html></code> 为根元素，页面唯一</li>\n<li><code>&#x3C;head></code> 为头部信息标签，页面唯一，内部常嵌套一些补充信息和标题\n<ul>\n<li><code>&#x3C;meta></code> 元数据，常用于设置字符集，添加相关名字和描述性内容，常用于提高<code>SEO</code></li>\n<li><code>&#x3C;script></code> 引入 JavaScript</li>\n<li><code>&#x3C;title></code> 标题设置</li>\n<li><code>&#x3C;style></code> 嵌入 Css</li>\n<li><code>&#x3C;link></code> 外部资源链接</li>\n<li><code>&#x3C;base></code> 定义页面默认超链接的默认地址和打开方式，建议放在 head 的最前面</li>\n</ul>\n</li>\n<li><code>&#x3C;body></code> 页面主体，页面唯一，常用标签全部嵌套在内部。\n<ul>\n<li><code>&#x3C;h1>~&#x3C;h6></code> 设置标题</li>\n<li><code>&#x3C;p></code> 设置段落文本</li>\n<li><code>&#x3C;a></code> 超链接</li>\n<li><code>&#x3C;pre></code>预格式化</li>\n<li><code>&#x3C;q>,&#x3C;blockquete></code>长短引用内容</li>\n<li><code>&#x3C;br /></code>,<code>&#x3C; hr /></code> 换行标签和水平线标签</li>\n<li><code>&#x3C;b></code> 粗体</li>\n<li><code>&#x3C;small></code>小号字体</li>\n<li><code>&#x3C;i></code>斜体</li>\n<li><code>&#x3C;rt></code> 中文发音注释，顶部显示</li>\n<li><code>&#x3C;sub></code>下标</li>\n<li><code>&#x3C;sup></code> 上标</li>\n<li><code>&#x3C;iframe></code>内联框架，替换<code>&#x3C;frame></code></li>\n<li><code>&#x3C;cite></code>标签定义作品（比如书籍、歌曲、电影、电视节目、绘画、雕塑等等）的标题。默认斜体，引用分离，有助于自动摘录参考的功能。</li>\n<li><code>&#x3C;div></code> 通用块元素</li>\n<li><code>&#x3C;span></code> 内联文本元素</li>\n<li><code>&#x3C;textarea></code> 输入区</li>\n<li><code>&#x3C;input></code> 输入框\n<ul>\n<li><code>&#x3C;datalist></code> 输入框可选值列表</li>\n</ul>\n</li>\n<li><code>&#x3C;img></code> 图像</li>\n<li><code>&#x3C;map></code> 图像区域映射\n<ul>\n<li><code>&#x3C;area></code> 定义区域位置和映射目标地址</li>\n</ul>\n</li>\n<li><code>&#x3C;figure></code>标记文档中的媒体内容\n<ul>\n<li><code>&#x3C;figcaption></code>媒体的标题，常用于媒体标签的上面或者下面</li>\n</ul>\n</li>\n<li><code>&#x3C;button></code> 按钮</li>\n<li><code>&#x3C;from></code> 表单\n<ul>\n<li><code>&#x3C;fieldset></code> 表单边框\n<ul>\n<li><code>&#x3C;legend></code>表单边框描述，内容标题</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>&#x3C;video></code> 视频</li>\n<li><code>&#x3C;audio></code> 音频\n<ul>\n<li><code>&#x3C;source></code> 数据源和媒体类型说明，添加多个备用</li>\n</ul>\n</li>\n<li><code>&#x3C;table></code> 表格\n<ul>\n<li><code>&#x3C;col></code> 配合 <code>&#x3C;colgroup></code>为列添加属性</li>\n<li><code>&#x3C;caption></code> 表格标题</li>\n<li><code>&#x3C;tbody></code> 表格主体</li>\n<li><code>&#x3C;td></code>表格单元</li>\n<li><code>&#x3C;th></code> 表头单元格</li>\n<li><code>&#x3C;tfoot></code>表格脚注</li>\n<li>...</li>\n</ul>\n</li>\n<li><code>&#x3C;address></code> 定义作者地址信息</li>\n<li><code>&#x3C;ul>, &#x3C;ol></code> 有序和无序列表\n<ul>\n<li><code>&#x3C;li></code> 列表项</li>\n</ul>\n</li>\n<li><code>&#x3C;dl></code> 定义列表，增加列表的灵活性\n<ul>\n<li><code>&#x3C;dt></code> 定义列表标题</li>\n<li><code>&#x3C;dd></code> 定义描述，通常在标题下方，并且具有缩进</li>\n</ul>\n</li>\n<li><code>&#x3C;del></code> 被删除的文本</li>\n<li><code>&#x3C;ins></code> 默认下划线，定义插入的行内文本</li>\n<li><code>&#x3C;details></code> 默认不展开的内容隐藏\n<ul>\n<li><code>&#x3C;summary></code> details 默认显示的描述信息，不支持<code>IE</code></li>\n</ul>\n</li>\n<li><code>&#x3C;header></code> 正文中的标题</li>\n<li><code>&#x3C;nav></code>旨在封装一组链接，常用于导航栏</li>\n<li><code>&#x3C;footer></code> 页脚内容</li>\n<li><code>&#x3C;main></code> 正文主体核心内容区域</li>\n<li><code>&#x3C;article></code> 文章容器</li>\n<li><code>&#x3C;section></code> 相关性内容，比如章节、页眉、页脚或文档中的其他部分。</li>\n<li><code>&#x3C;aside></code> 表示与它周围文本没有密切关系的内容，通常的广告区域、搜索、分享链接。</li>\n<li><code>&#x3C;canvas></code> canvas 图像容器</li>\n<li><code>&#x3C;embed></code> 嵌入页面的元素，外部应用，互动插件等等，本意是不属于当前页面的内容，使用时指定外部资源类型。</li>\n<li><code>&#x3C;diakig></code> 对话框，支持性很差</li>\n<li><code>&#x3C;mark></code> 类似<code>strong</code>，H5 属性且更为通用</li>\n<li><code>&#x3C;meter></code>给定的数据范围度量，需要制定相关属性</li>\n<li><code>&#x3C;output></code>表示输出结果的行内元素</li>\n<li><code>&#x3C;time></code>标注时间</li>\n<li><code>&#x3C;datetime></code>标注日期</li>\n<li><code>&#x3C;progress> </code>进度条</li>\n<li><code>&#x3C;select></code> 下拉列表\n<ul>\n<li><code>&#x3C;optgroup></code> 可选组选项\n<ul>\n<li><code>&#x3C;option></code> 选项</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>所有<code>HTML</code>短语标签如下：</p>\n<p>| <em>     | 呈现为被强调的文本。                                         |\n| -------- | ------------------------------------------------------------ |\n| <strong> | 定义重要的文本。                                             |\n| <dfn>    | 定义一个定义项目。                                           |\n| <code>   | 定义计算机代码文本。                                         |\n| <samp>   | 定义样本文本。                                               |\n| <kbd>    | 定义键盘文本。它表示文本是从键盘上键入的。它经常用在与计算机相关的文档或手册中。 |\n| <var>    | 定义变量。您可以将此标签与 <pre> 及 <code> 标签配合使用。    |</p>\n<h3>3. HTML 和语义化有何意义</h3>\n<p>我们知道，<code>HTML</code>标签都具有独特的语义，使用合适的标签来组织整体的结构却不是开发者“必须”去做的一件事，在很多情况下，开发者混用不适宜的标签去达到相同的效果屡见不鲜。</p>\n<p>清晰的语义能带来良好的页面结构，并且非常有利于搜索引擎和网络爬虫解析页面内容，大大提高页面内容的识别准确性，优化<code>SEO</code>让页面得到更好的传播和搜索权重。</p>\n<h3>4. 谈谈 HTML 中的语法错误问题</h3>\n<p>HTML 的语法错误的处理措施非常宽松，某种程度上 HTML 语法的灵活性让错误的语法产生了不完整的行为。</p>\n<p><code>HTML</code>的语法错误在浏览器中是可以被允许的，不良的语法结构将导致 DOM 语法树的结构不够直观。</p>\n<p>来看看如下语法结构：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>She dreamt.\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>She dreamt that she ate breakfast.\n<span class=\"lineNumber\">3</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>Then lunch.\n<span class=\"lineNumber\">4</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">i</span>></span>And finally dinner.</code></pre> \n\n<p>浏览器通过解析器解析此结构最终在 DOM 语法树中的结果如下：</p>\n<p><img src=\"https://i.loli.net/2021/05/26/bfOFlSEG73CZqLn.png\" alt=\"image-20210526223813242\"></p>\n<p>也许这与我们的期望相去甚远，原来两层的语法树却形成了多层的嵌套结构，我们可以从中看出几个语法错误的特点：</p>\n<ul>\n<li>HTML 的语法非常宽松，语法错误是可以被允许和正常解析的</li>\n<li>错误的语法将在解析后产生意想不到的 DOM 结构，并且很有可能降低性能</li>\n</ul>\n<h3>5. 简单谈谈你对于 HTML 元标签的理解</h3>\n<p><code>HTML</code>文档信息可以在其<code>head</code>标签内使用<code>meta</code>标签进行补充说明，一般的形式是以<code>key/value</code>键值对为结构描述关于文档的额外说明。</p>\n<p><code>&#x3C;meta></code>不支持嵌套，没有闭合标签，其内容不会再页面显示，通常我们会增加一些额外信息描述，这往往有利于搜索引擎和提高<code>SEO</code>效率，对于机器是可读的</p>\n<p><code>meta</code>的有效属性包含以下四个：</p>\n<ul>\n<li><code>name</code> 属性名</li>\n<li><code>content</code>属性值</li>\n<li><code>scheme</code> 指定<code>content</code>的格式，但<code>H5</code>不支持</li>\n<li><code>http-equiv</code> 把<code>content</code>关联到<code>HTTP</code>头部，例如控制页面刷新时间，设置字符集类型和文档类型</li>\n<li><code>charset</code> 字符集</li>\n</ul>\n<p>以下是我们日常工作中可能会用到的键值对数据，。</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"description\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"博客\"</span>></span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"keywords\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"HTML,CSS,XML,JavaScript\"</span>></span>\n<span class=\"lineNumber\">4</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"author\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"someone\"</span>></span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span> = <span class=\"hljs-string\">\"revised\"</span> <span class=\"hljs-attr\">content</span> = <span class=\"hljs-string\">\"Tutorialspoint, 5/27/2021\"</span> /></span>\n<span class=\"lineNumber\">6</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>></span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span> = <span class=\"hljs-string\">\"refresh\"</span> <span class=\"hljs-attr\">content</span> = <span class=\"hljs-string\">\"5; url = https://www.google.com\"</span> /></span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span></code></pre> \n\n<h3>6. HTML 无障碍方面有何了解</h3>\n<p>无障碍设计的目标是让健全或者残疾人，年轻人或老年人都可以平等，便捷地获取站点的服务，增加受益群体。</p>\n<p>通常，最大的受益人群是不擅长访问互联网的普通人或者视力障碍用户，甚至是听力、精神、肢体障碍用户。</p>\n<p><code>W3C</code>推动了无障碍化实施规范，主要的辅助即使包括硬件放大镜或者软件放大镜，盲文显示器和读屏软件等。</p>\n<p>在开发的时候，可以采用可读性高的设计方案，甚至是对比度高的字体和图片等。另外，编写语义化的<code>HTML</code>将会对屏幕阅读器非常友好。</p>\n<p>在时间充分的情况下，建议遵循<code>WAI-ARIA</code>规范或者<a href=\"http://www-03.ibm.com/able/guidelines/web/accessweb.html\">IBM无障碍化网站开发检查项(IBM Web accessibility checklist – Version 5.2 )</a>进行开发。</p>\n<p>在测试的时候，可以使用<code>webking</code>静态检测工具进行测试。</p>\n<h3>7. 关于 HTML 注释的知识点</h3>\n<p>对于任何语言来说，注释都是很有必要的，在浏览器中注释将会被忽略，但是对于复杂的页面来说，必要的注释能让阅读源码的人提高阅读效率。</p>\n<p><code>HTML</code>使用<code>&#x3C;!-- ... --></code>作为注释标签（注意，边界不能有多余的空格，否则注释将被视为普通字符串），注释可以跨行。</p>\n<p>还有一种注释被称为条件注释：<code>&#x3C;!--[if IE 8]> ... &#x3C;![endif]--></code>，这种注释在<code>IE</code>中能被有效识别，在其他浏览器中被忽略，因此尝尝被用于为<code>IE</code>浏览器设置兼容性属性。</p>\n<blockquote>\n<p><code>&#x3C;comment></code>标签内部也可以被视为注释（IE 浏览器有效），但是在<code>HTML5</code>中已经无效</p>\n</blockquote>\n<p>在一些旧浏览器中，依然支持如下两种注释：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">&#x3C;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>></span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">html</span>></span>\n<span class=\"lineNumber\">3</span>   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">title</span>></span>Commenting Style Sheets<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">title</span>></span>      \n<span class=\"lineNumber\">5</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">style</span>></span><span class=\"xml\">\n<span class=\"lineNumber\">6</span>         <span class=\"hljs-comment\">&#x3C;!--\n<span class=\"lineNumber\">7</span>            .example {\n<span class=\"lineNumber\">8</span>               border:1px solid #4a7d49;\n<span class=\"lineNumber\">9</span>            }\n<span class=\"lineNumber\">10</span>         //--></span>\n<span class=\"lineNumber\">11</span>      </span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">style</span>></span>\n<span class=\"lineNumber\">12</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">script</span>></span><span class=\"handlebars\"><span class=\"xml\">\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-comment\">&#x3C;!-- \n<span class=\"lineNumber\">14</span>        document.write(\"Hello World!\")\n<span class=\"lineNumber\">15</span>        //--></span>\n<span class=\"lineNumber\">16</span>      </span></span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">script</span>></span>\n<span class=\"lineNumber\">17</span>   <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">head</span>></span>\n<span class=\"lineNumber\">18</span>\t\n<span class=\"lineNumber\">19</span>   <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">20</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span> = <span class=\"hljs-string\">\"example\"</span>></span>Hello , World!<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">21</span>   <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">body</span>></span>\n<span class=\"lineNumber\">22</span>\t\n<span class=\"lineNumber\">23</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">html</span>></span></code></pre> \n\n<p>但是在现代浏览器中，上述<code>JS</code>和<code>CSS</code>部分注释都无效。</p>\n<h3>8. 对于 img 标签的理解</h3>\n<p><code>img</code>标签必须设置<code>src</code>和<code>alt</code>属性，添加具有实际意义的<code>alt</code>属性可以让页面更友好。</p>\n<p><code>img</code>是替换内联元素，可以理解为<code>inline-block</code>。</p>\n<p>可以提前为<code>img</code>标签添加<code>width</code>和<code>height</code>属性值和对齐方向属性<code>align</code>(H5 已弃用)，如此一来在加载过程中也能具有稳定的宽高显示，从而保证页面的稳定。如果要实现固定的宽高比，自适应宽高比，则可以预设宽高值之一为固定值，另一个为<code>auto</code>。</p>\n<blockquote>\n<p><code>img</code>此类自闭合标签是无法在内部嵌套子元素的，因此也就没法使用伪类<code>::before</code>和<code>::after</code></p>\n</blockquote>\n<p><code>img</code>标签的事件监听如下：</p>\n<ul>\n<li><code>onload</code>: 图像顺利加载完成</li>\n<li><code>onerror</code>: 图像资源 404、403、500、请求超时或者返回的资源不是有效的图片</li>\n<li><code>onabort</code>: 图像加载被强制停止，例如主动点击浏览器<code>stop</code>按钮</li>\n</ul>\n<p><code>HTML5</code>的趋势之一，就是减少元素标签的属性值，关于样式的部分尽可能使用<code>CSS</code>文件来描述。</p>\n<h3>9. 列举几个 HTML 最佳实践</h3>\n<ul>\n<li>编写有效可读的<code>DOM</code>\n<ul>\n<li>全部小写</li>\n<li>保持缩进</li>\n<li>自动关闭标签</li>\n<li>避免过渡注释</li>\n<li>组织<code>DOM</code>，尽量减少元素</li>\n</ul>\n</li>\n<li>尽量不使用内联样式和内联脚本，内联的样式必须是关键样式（渲染页面顶部所需的最小CSS集）</li>\n<li>将脚本标签放在 body 底部</li>\n<li>照顾无障碍用户，使用意义明确的标签和描述性属性值</li>\n<li>正确使用 title 和 meta 标签，增强<code>SEO</code></li>\n<li>压缩文件和使用<code>CDN</code>加速</li>\n<li>对数据交互进行验证，永远不要相信用户的输入，提高应用的安全性</li>\n</ul>\n<h3>10. 谈谈你所理解的 table 标签</h3>\n<p>曾经开发者们使用表格进行布局，现在<code>table</code>标签更纯粹了，绝大多数用来展示表格数据。</p>\n<p>表格允许开发者们将图片、图像、链接等数据排列到单元格的行和列中。</p>\n<p>一个表格标签，内部嵌套着行盒子<code>tr</code>(table row)和单元格<code>td</code>。如果有必要，可以添加一行<code>th</code>表格列标题。</p>\n<p>甚至是使用<code>thead</code>、<code>tbody</code>、<code>tfoot</code>将整体结构拆开：</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">table</span>></span>\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">thead</span>></span>\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>Month<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">th</span>></span>Savings<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">th</span>></span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">thead</span>></span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tbody</span>></span>\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">10</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>January<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">11</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>$100<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">14</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>February<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">15</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>$80<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">16</span>    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tbody</span>></span>\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tfoot</span>></span>\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">20</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>Sum<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">21</span>      <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">td</span>></span>$180<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">td</span>></span>\n<span class=\"lineNumber\">22</span>    <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tr</span>></span>\n<span class=\"lineNumber\">23</span>  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">tfoot</span>></span>\n<span class=\"lineNumber\">24</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">table</span>></span></code></pre> \n\n<p>表格标签支持多属性控制样式，但是推荐使用<code>CSS</code>控制样式。</p>\n","title":"HTML浅解","date":"2021/5/24","tags":["HTML"],"mainImg":"https://images.unsplash.com/photo-1446057032654-9d8885db76c6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzk4NTM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1446057032654-9d8885db76c6?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjIzNzk4NTM&ixlib=rb-1.2.1&q=80&w=400","intro":"作为一个 web 开发者，我们需要掌握的 HTML 知识到底应该有多少？HTML 真的如此简单吗，我们是否应该给与其更多的重视？"}},"__N_SSG":true}