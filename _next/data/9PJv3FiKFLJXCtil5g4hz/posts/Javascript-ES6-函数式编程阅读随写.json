{"pageProps":{"post":{"slug":"Javascript-ES6-函数式编程阅读随写","contentHtml":"<h1>函数式编程简介</h1>\n<blockquote>\n<p>函数要小,要更小.</p>\n</blockquote>\n<p>函数式编程,远离外部环境的依赖,隔绝突变与状态.</p>\n<p>数学的函数定义中,函数必须接收一个<code>参数</code>,返回一个值.函数根据接收的参数运行.给定的参数下,返回值是不变的.</p>\n<p><code>JavaScript函数式编程</code>基于数学函数及其思想进行发展.运用函数式的范式进行开发能创造可缓存和可测试的代码库.</p>\n<blockquote>\n<p>简单分辨函数与方法 - JS,不必深究 window和 global 对象.</p>\n</blockquote>\n<ul>\n<li>函数: 一段通过名称可调用的代码</li>\n<li>方法: 通过名称且关联对象的名称被调用的代码</li>\n</ul>\n<p>函数的引用透明性指的是,函数对相同的输入返回相同的值.不依赖全局数据的函数,能够自由地在多线程状态下运行,全程无锁.并且函数是<code>可缓存</code>的,合理运用这一点,可以节省大量重复计算的资源消耗和时间消耗.</p>\n<blockquote>\n<p>引用透明性是一种哲学</p>\n</blockquote>\n<p><strong>命令式?声明式?</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++) \n<span class=\"lineNumber\">3</span>  <span class=\"hljs-built_in\">console</span>.log(i)</code></pre> \n\n<p>上述代码示例,我们告诉编译器如何去做,这就是<code>命令式</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"lineNumber\">2</span>arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> <span class=\"hljs-built_in\">console</span>.log(i))</code></pre> \n\n<p><code>forEach</code>是一个高阶函数,意在告知编译器<code>做什么</code>,<code>如何做</code>的部分则在高阶函数内的普通函数中实现.这便是<code>声明式</code>.</p>\n<p><strong>纯函数</strong>:对给定的输入,返回相同的输出的函数.纯函数不依赖于外部环境.也不会改变外部环境.易于对函数进行<code>测试</code>.</p>\n<p>纯函数是<code>易于阅读</code>的.为纯函数设置<code>具有意义</code>的函数名是一种最佳实践.</p>\n<blockquote>\n<p>纯函数应该被设计为只做一件事,并且把它做到完美,这也会是 Unix 的哲学.</p>\n</blockquote>\n<p>纯函数支持<code>管道和组合</code>.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>cat package.json | grep axios</code></pre> \n\n<p><code>bash</code>命令的管道和组合威力巨大,组合是函数式编程的核心.我们称之为<code>function composition</code>.</p>\n<h1>JavaScript 函数式基础</h1>\n<p>略,简述基础<code>JavaScript</code>.</p>\n<h1>高阶函数 HOF</h1>\n<p><strong>JavaScript 数据类型</strong>:</p>\n<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Object</li>\n<li>undefined</li>\n<li>Symbol</li>\n<li>BigInt</li>\n</ul>\n<p>除了<code>object</code>外,都是原始数据类型.</p>\n<blockquote>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\">计算机科学</a>中，<strong>抽象化</strong>（英语：Abstraction）是将资料与程序，以它的语义来呈现出它的外观，但是隐藏起它的实现细节。抽象化是用来减少程序的复杂度，使得程序员可以专注在处理少数重要的部分。一个电脑系统可以分割成几个<a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B1%A4\">抽象层</a>（Abstraction layer），使得程序员可以将它们分开处理。</p>\n</blockquote>\n<p>抽象化,让我们专注于可控层面的工作,将复杂的内容简单化,让开发者专注于预订的目标,不必<code>事事关心</code>.</p>\n<p>我们通过<code>高阶函数</code>实现抽象.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> forEach = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, Fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++) Fn(arr[i])\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>这是一个简单的高阶函数,抽象了<code>遍历数组</code>的问题,如果你使用这个函数,你并不需要关注内部代码是如何实现的.上述例子是一个简单逻辑,同理也可以是更为复杂的逻辑,这样一来就将复杂问题<code>抽象</code>出来了.</p>\n<p>让我们开始学习构建复杂的高阶函数.</p>\n<p>创建一个<code>every</code>函数如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++</span>)</span> {\n<span class=\"lineNumber\">4</span>    result = result &#x26;&#x26; fn(arr[i])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// for..of.. 版本</span>\n<span class=\"lineNumber\">10</span><span class=\"hljs-comment\">// for...of..是 es6 的函数,可以方便遍历数组</span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">14</span>    result = result &#x26;&#x26; fn(arr[value])\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">17</span>}</code></pre> \n\n<p>如此一来,我们抽象了对数组遍历的操作.</p>\n<p>接着,编写一个<code>some</code>函数,其接受一个数组和一个函数,如果数组中一个元素通过接收的函数返回<code>true</code>,则<code>some</code>函数返回<code>true</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    result = result || fn(arr[value])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<blockquote>\n<p>some 函数和 every 函数都不算高效,这里只是作为对高阶函数的展示.</p>\n</blockquote>\n<p><code>JavaScript</code>的<code>array</code>原型内置<code>sort</code>函数,可以给数组排序.这是一个典型的<code>高阶函数</code>.它接收一个可选的函数来决定排序顺序逻辑.极大的提高了排序的灵活性.我们知道,默认的<code>sort</code>排序是将数组元素转换为<code>string</code>并且按<code>Unicode</code>编码点进行排序,因此数字 2 在默认排序算法中小于 12.让我们看看此可选的<code>compare</code>函数的骨架:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">条件</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-comment\">// a 小于 b</span>\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">条件</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// a 大于 b</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// a 等于 b</span>\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n<p>举个例子,现在我们有一个用户数组,每个元素是一个用户的信息.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> people = [\n<span class=\"lineNumber\">2</span>  {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Aaron'</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">10</span>\n<span class=\"lineNumber\">5</span>  },\n<span class=\"lineNumber\">6</span>  {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Rose'</span>,\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">11</span>\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>]</code></pre> \n\n<p>而需求则是,通过姓名排序或者通过年龄排序.根据前置知识,可以写出如下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 简化逻辑,忽略相等的情况</span>\n<span class=\"lineNumber\">2</span>people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.name > b.name ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">3</span>people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.age > b.age ? <span class=\"hljs-number\">1</span>: -<span class=\"hljs-number\">1</span>)</code></pre> \n\n<p>上述代码,我们将雷同的部分写了两遍.现在我们来设计一个函数,接收一个参数,返回一个函数.是的,将要设计的这个函数是一个<code>高阶函数</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> sortBy = <span class=\"hljs-function\">(<span class=\"hljs-params\">property</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> a[property] > b[property] ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// 简化版</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">const</span> sortBy = <span class=\"hljs-function\"><span class=\"hljs-params\">property</span> =></span> <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a[property] > b[property] ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span></code></pre> \n\n<p>现在,我们可以重写按<code>name</code>或者<code>age</code>的排序代码了.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>people.sort(sortBy(<span class=\"hljs-string\">'name'</span>))\n<span class=\"lineNumber\">2</span>people.sort(sortBy(<span class=\"hljs-string\">'age'</span>))</code></pre> \n\n<p>这就是<code>高阶函数</code>的魅力.运用高阶函数,提高代码质量,降低代码数量.</p>\n<h1>闭包与高阶函数</h1>\n<p>简而言之,闭包就是一个内部函数.在一个函数内部的函数,可以称为<code>闭包函数</code>.</p>\n<p>从<code>技术上</code>来讲,上述闭包函数的闭包场景存在三个可访问的作用域:</p>\n<ul>\n<li>自身声明内变量</li>\n<li>外部函数变量</li>\n<li>全局变量</li>\n</ul>\n<p><strong>闭包可以记住上下文环境</strong>.话说回来,由于我们要在函数式编程中处理很多函数,因此需要一种调试方法.</p>\n<p>举个例子,一个字符串数组,想要解析成整数数组,如下代码会有问题:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>[<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>].map(<span class=\"hljs-built_in\">parseInt</span>)</code></pre> \n\n<p><code>map</code>函数用三个参数调用了<code>parseInt</code>,分别是:</p>\n<ol>\n<li>element</li>\n<li>index</li>\n<li>arr</li>\n</ol>\n<p>而<code>parseInt</code>函数全盘接纳,来看看此函数的定义:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">parseInt</span>(string, radix);</code></pre> \n\n<p><code>radix</code>是可选的基数,如果提供 10,则转换为十进制的整数.</p>\n<p>如果 <code>radix</code> 是 <code>undefined</code>、<code>0</code>或未指定的，JavaScript会假定以下情况：</p>\n<ol>\n<li>如果输入的 <code>string</code>以 \"<code>0x</code>\"或 \"<code>0x</code>\"（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。</li>\n<li>如果输入的 <code>string</code>以 \"<code>0</code>\"（0）开头， <code>radix</code>被假定为<code>8</code>（八进制）或<code>10</code>（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。<strong>因此，在使用 <code>parseInt</code> 时，一定要指定一个 radix</strong>。</li>\n<li>如果输入的 <code>string</code> 以任何其他值开头， <code>radix</code> 是 <code>10</code> (十进制)。</li>\n</ol>\n<p>如果第一个字符不能转换为数字，<code>parseInt</code>会返回 <code>NaN</code>。</p>\n<p>此时,<code>['1', '2'].map(parseInt)</code>的结果是: [1, NaN].</p>\n<p>如何用函数式的思维,创建一个高阶函数,对<code>parseInt</code>进行抽象.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> unary = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> fn.length === <span class=\"hljs-number\">1</span> ? fn : <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> fn(arg)\n<span class=\"lineNumber\">2</span>[<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>].map(unary(<span class=\"hljs-built_in\">parseInt</span>))</code></pre> \n\n<p>现在,即使<code>map</code>以三个参数调用<code>unary</code>函数执行后返回的函数,都只会让<code>element</code>参数生效.</p>\n<p>我们得到了预期中的结果:<code>[1,2,3]</code> :seedling:</p>\n<p>现在,让我们为自己的工具库添加一个工具函数,这个函数接收一个函数作为参数,让这个接收的函数只能被执行一次.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> once = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> done = <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> done ? <span class=\"hljs-literal\">undefined</span> : ((done = <span class=\"hljs-literal\">true</span>), fn.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>))\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>现在用一个变量<code>done</code>保存函数的执行状态.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> demoFn = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">console</span>.log(a, b, <span class=\"hljs-string\">'just called once.'</span>)\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">const</span> newDemoFn = once(demoFn)\n<span class=\"lineNumber\">5</span>newDemoFn(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// output: 1 2 just called once.</span>\n<span class=\"lineNumber\">6</span>newDemoFn(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// no output</span></code></pre> \n\n<p>继续,创建下一个函数<code>memoized</code>,使函数记住其计算结果:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> memoized = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> lookupTable = {}\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> lookupTable[arg] || (lookupTable[arg] = fn(arg))\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>一个速查<code>table</code>保存了函数解构,如果不存在则执行此函数,保存到速查表中并且返回此结果.</p>\n<p><strong>memoized 函数是经典的函数式编程,是闭包与纯函数的实战</strong></p>\n<h1>数组的函数式编程</h1>\n<p>我们将创建一组函数用于解决常见的数组问题,关键在于函数式的方法,而非命令式的方法.</p>\n<blockquote>\n<p>把函数应用于一个值,并且创建新的值的过程被称为\"投影\"</p>\n</blockquote>\n<p><code>Array.map</code>就是典型的投影函数.我们来试着创建一个<code>map</code>函数.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> result = []\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    result.push(fn(v))\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>\t<span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>一个<code>filter</code>函数,对数组内容进行过滤.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> filter = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> result = []\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">if</span>(fn(v)) result.push(v)\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>一个<code>reduce</code>函数,对数组的所有值进行<code>归约</code>操作.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">var</span> reduce = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn, defaultAccumlator</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> accumlator;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">defaultAccumlator !== <span class=\"hljs-literal\">undefined</span></span>)</span> {\n<span class=\"lineNumber\">4</span>    accumlator = defaultAccumlator\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">6</span>      accumlator = fn(accumlator, v)\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>    accumlator = arr[<span class=\"hljs-number\">0</span>]\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&#x3C;arr.length;i++</span>)</span> {    \n<span class=\"lineNumber\">11</span>      accumlator = fn(accumlator, arr[i])\n<span class=\"lineNumber\">12</span>    }\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">return</span> [accumlator]\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p><strong>继续</strong>,上<code>zip</code>函数,</p>\n","title":"Javascript-ES6-函数式编程阅读随写","date":"2020/12/16","tags":["Javascript"],"mainImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"第一次看到这本书的时候,记得是几年前在桂电图书馆里,断断续续看了六章,后来便离开了学校.现在买了纸质书打算重新看一遍,这里记录下阅读随想."}},"__N_SSG":true}