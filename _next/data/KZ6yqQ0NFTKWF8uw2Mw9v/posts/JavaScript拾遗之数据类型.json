{"pageProps":{"post":{"slug":"JavaScript拾遗之数据类型","contentHtml":"<h1>前言提要</h1>\n<p>上次面试的时候，面试官让我说一说 JavaScript 的数据类型，我说完之后感觉不太好，基础知识掌握得还是不够牢靠，今天来巩固一下 JavaScript 中的数据类型！</p>\n<h1>概述</h1>\n<p>在脑海里构建一个图谱，JavaScript 标准至今的数据类型包括：</p>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#primitive_values\">Primitive values</a> (immutable datum represented directly at the lowest level of the language)</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#boolean_type\">Boolean type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#null_type\">Null type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#undefined_type\">Undefined type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#number_type\">Number type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#bigint_type\">BigInt type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#string_type\">String type</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#symbol_type\">Symbol type</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#objects\">Objects</a> (collections of properties)</p>\n<p><code>7 种原始数据类型和一种引用类型</code>！复杂的数据结构都是由基础类型的数据构成的，对基础数据理解和熟悉程度越高，越有助于我们编写高效代码，提高效率和代码可读性。</p>\n<p>每一年<strong>TC39</strong>都会出现一些提案，每一年都有新的方法添加到标准中来，对这些方法了解越深，我们处理问题的思路越广，效率越高。</p>\n</li>\n</ul>\n<h1>详解类型</h1>\n<h2>Number</h2>\n<h3>Number 基础</h3>\n<p><strong>Number</strong>包含了整数和浮点数，在常规的数值之外，还需要注意以下几个特殊的数：</p>\n<ul>\n<li>Infinity</li>\n<li>-Infinity</li>\n<li>NaN (Not a number）</li>\n</ul>\n<p>顾名思义，无穷大和不是一个数(NaN)都是 number ！在类型转换为 number 的时候可能会出现 NaN!\n当我们需要使用一个始终是最大的数时，<code>Infinity</code>会非常有用，正负无穷都可以保证能够覆盖我们设置的某个正常值的表示范围。</p>\n<blockquote>\n<p>JavaScript 中的数学运算，使用<code>0</code>作为分母是不会报错的，例如正数除以 0 等于正无穷，负数则为负无穷，0除以 0 等于 NaN</p>\n</blockquote>\n<p>举个例子：\n在某些算法题中需要寻找数组中的最小值，我们可以初始化一个用于比较的值为<code>Infinity</code>，然后使用<code>Math.min()</code>函数来比较数据，利用的就是这个值是正无穷的特性，让代码可读性更好。</p>\n<p>还有什么地方用到这个知识点吗？\n有，还真有！例如我们在通过 JSON 序列化数据的时候，无穷大将序列化为<code>null</code>，注意这个问题📢，别让 bug 出现！另外，如果想通过字符串解析到无穷大的数，可以使用<code>parseFloat('Infinity')</code>或<code>Number('Infinity')</code>来处理，使用<code>parseInt</code>将会得到<code>NaN</code>!</p>\n<blockquote>\n<p>new Number() vs Number() ?</p>\n</blockquote>\n<p>使用 new 去初始化对象将会得到一个 Object 而不是一个原始数据类型，使用 Number() 则意味着强制类型转换为 Number 类型，如果无法转换为为数字则返回 NaN！</p>\n<blockquote>\n<p>0.1 + 0.2 ?</p>\n</blockquote>\n<p>两数相加时，二者转为二进制再对阶运算时尾数无限循环，引擎阶段造成精读丢失。</p>\n<h3>Number 静态属性</h3>\n<blockquote>\n<p>你可以在很多地方轻松查看文档，因此我将挑重点来学习。</p>\n</blockquote>\n<ul>\n<li>EPSILON: 数之间的最小间隔，可以用于检查 0.1 + 0.2 等于 0.3 的相等性，IE11 不支持，可以用 Math.pow(2, -52)来模拟！</li>\n<li>MAX_SAFE_INTEGER 和 MIN_SAFE_INTEGER: JavaScript Number使用IEEE754 标准的 64 位来表示一个数，因此为了方便获取最大的安全数 Math.pow(2, 53) - 1 和最小的安全数，为 Number 增加了这两个属性。这个属性可以用于判断某些传递的数是否可以安全地计算而不丢失精读，多用于前后端数据传递的处理，对超过安全范围的数进行判断。</li>\n<li>MAX_VALUE 和 MIN_VALUE: JavaScript 中能呈现的最大的正数和最小的正数，为这些数设置专属的具名属性有利于语言底层操作这些数，提升可读性。当我们发现某些数过大的时候，还是得了解原因，选择针对性的库去处理这些问题。</li>\n<li>POSITIVE_INFINITY 和 NEGATIVE_INFINITY 分别为正负无穷大，这一块唯一需要注意的是<code>这些特殊的值之间的逻辑运算</code>。</li>\n</ul>\n<h3>Number 方法</h3>\n<p>当我们需要对数进行处理时，熟悉这些方法非常有用。</p>\n<ul>\n<li>isNaN: <code>NaN</code>是全局属性，但<code>NaN</code>不等于<code>NaN</code>，判断目标是否不是一个数，在不进行类型转换的前提下，最好的方法就是使用<code>Number.isNaN()</code>方法。全局的<code>isNaN()</code>会对<code>'NaN'</code>这样的字符串进行转化，并认为这是一个<code>NaN</code>。</li>\n<li>isFinite: 判断目标是否为有限的数，全局的<code>isFinite()</code>函数会将字符串转化为数字，再判断是否是一个有限的数，<code>Number.isFinite</code>不会，当你不需要自动类型转换的时候，务必使用<code>Number.isFinite()</code></li>\n<li>isInteger: 判断目标类型是否是<code>number</code>，并且是整数！同样需要注意，这个方法不会自动转换类型！</li>\n<li>parseFloat: 将目标字符串转化为浮点数，其中的关键在于在解析的过程中遇到<code>+、v、0-9、.、科学计数法e</code>之外的字符时，将会直接忽略该字符和以后的字符。并且第二个小数点也会使得解析终止，另外<code>空白符</code>在首尾时将会被忽略。如果无法解析，则返回<code>NaN</code>。如果一个目标是具有<code>toString</code>或<code>valueOf</code>方法的对象，则会将这些方法返回的内容作为目标进行解析。目标是<code>BigInt</code>则会丢失精度。</li>\n<li>parseInt: 此方法解析一个字符串（如果不是字符串，将先使用<code>toString()</code>进行自动转换），并且返回指定<code>基数(radix)</code>的十进制整数。基数是<code>2~36</code>之间的整数。尽管基数在规范中是可选参数，但是在不同浏览器之间对于不指定基数情况下的实现结果不相同，因此强烈建议指定基数！同样类似于<code>parseFloat</code>，对特殊字符将会终止转化，忽略首尾空白字符，转换<code>BigInt</code>会丢失精度！</li>\n</ul>\n<blockquote>\n<p>要将一个数字转换为特定 radix 中的字符串字段，请使用 <code>thatNumber.toString(radix)</code>函数!</p>\n</blockquote>\n<h3>Number 对象上的额外属性</h3>\n<ul>\n<li>toFixed(digits): 使用定点表示法来格式化一个数字，不足个数的使用 0 来补全，返回数字字符串（该数字会在必要时被<code>四舍五入</code>）。</li>\n<li>toExponential(digits): 将数字转化为指定具有小数点后若干位的指数形式。</li>\n<li>toLocaleString: 在需要将数字显示国际化的时候可查。</li>\n<li>toPrecision: 返回指定精度的字符串表示（如果需要保持整体的有效个数长度，可以使用此方法。）</li>\n<li>toString([radix]): 常用于转换数字为指定进制的数字字符串（2~36）</li>\n<li>valueOf: 返回一个被 Number 对象包装的原始值！</li>\n</ul>\n<h3>Number 应用</h3>\n<ul>\n<li>使用 Number 对象的属性给变量赋值，用以得到特殊数字</li>\n<li>检查是否超过可以精确表示的数的范围，利用<code>MAX_SAFE_INTEGER</code></li>\n<li>使用<code>Number(new Date())</code>获得某个日期对象的<code>valueOf()</code>函数结果，也等于<code>getTime()</code>的结果。</li>\n<li>使用<code>Number(str)</code>将字符串表示的数转化为数字类型，例如这个离谱的<code>Number('') === 0</code>，或者转化 null 等于 0。</li>\n<li>数字转特定进制的字符串，使用数字的<code>toString</code>方法并且指定基数参数即可。</li>\n</ul>\n<h2>String</h2>\n<h1>判断类型</h1>\n","title":"JavaScript拾遗之数据类型","date":"12/2/2021","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1510511459019-5dda7724fd87?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzg0NDY2MzY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1510511459019-5dda7724fd87?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzg0NDY2MzY&ixlib=rb-1.2.1&q=80&w=400","intro":"上次面试的时候，面试官让我说一说 JavaScript 的数据类型，我说完之后感觉不太好，基础知识掌握得还是不够牢靠，今天来巩固一下 JavaScript 中的数据类型！"}},"__N_SSG":true}