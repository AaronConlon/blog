{"pageProps":{"post":{"slug":"TypeScript-上卷","content":"\n### *.d.ts*\n\n#### 总领\n\nTypeScript Declaration File: 用于存放类型声明，便于编辑器的智能提示。\n\n> 类型声明具有一个原则：`不冲突即合法`\n\n不同的声明文件有所区别，诸如`Jquery`之类的库可以通过`global`的方式引用，也可以通过模块的方式引用。\n\n不同的场景，可以将类库声明分为以下几类：\n\n- global 暴露为全局变量的类库\n- module 通过加载机制引用的类库\n- plugin 会影响其他类库功能的插件\n\n基于这些场景，最佳实践是将声明文件分为以下几种并统一归类：\n\n- global.d.ts: 全局类库声明\n- module-function.d.ts: 暴露为函数的 module 类库声明\n- module-class.d.ts: 暴露出一个 class 的类库声明\n- module.d.ts: 一般的类库（暴露的内容既不是函数也不是 class）\n- module-plugin.d.ts: 模块插件类库声明\n- global-plugin.d.ts: 全局插件\n- global-modifying-module.d.ts: 适用于 module 形式的全局插件类库\n\n为不同功能或类型的类库按以上分类方式进行分类声明，有利于编写整洁的代码和提升可读性。\n\n##### 语法格式\n\n接下来看一下各种类型声明的语法格式：\n\n首先是全局变量声明：\n\n```typescript\ndeclare var foo: number;\n```\n\n如此便声明了一个全局变量`foo`，编译器就会在遇到这个变量的时候得到其类型声明，就不会出现错误提示提及此变量未定义。\n\n> 当然也可以用`declare let`或`delare fconst`来声明只读和块级作用域\n\n其次，来看看全局函数声明和全局对象声明：\n\n```typescript\n// 函数声明\ndeclare function greet(name: string): void;\n// 对象声明\ndeclare namespace myLib {\n  function makeGreeting(s: string): string;\n  const age: number;\n}\n```\n\n函数声明还很好理解，全局对象声明这里有一个`namespace`命名空间关键字，在`TypeScript Handbook`里是这么形容的：\n\n> 命名空间是位于全局命名空间下的一个普通的带有名字的JavaScript对象。\n\n在声明过后，就可以在全局直接使用`myLib.age`。\n\n##### 实践规范\n\n除了语法格式，还应该遵守规范约束：\n\n- 用基础类型而非包装类型（string 而非 String）\n- 不要使用未出现的泛型参数\n- 无返回值的函数返回声明不应该用`any`，而应该用`void`\n- 善用可选参数、组合类型而少用函数重载\n\n##### 类型、值和命名空间\n\n`TypeScript`的类型系统的基本构成即：\n\n- 类型\n- 值\n- 命名空间\n\n类型的声明，可以有以下几种方式：\n\n```typescript\n// 别名\ntype options = number | string;\n\n// 接口\ninterface I {\n  x: number\n}\n\n// 类\nclass C {}\n\n// 枚举\nenum Direction {Left, Right, Top, Bottom}\n\n// 类型引用\nimport * as m from 'someModule';\n```\n\n值的声明，则如下：\n\n```typescript\n// 变量\nlet\nconst\nvar\n\n// 模块\nnamespace\nmodule\n\n// 枚举\nenum\n\n// 类\nclass\n\n// 引用\nimport\n\n// 函数\nfunction\n```\n\n而命名空间，则通常用于组织类型，例如：`const x : A.B.C`则表示`x`的类型来自于`A.B`命名空间下的`C`\n\n`class/enum/import`既可以声明值也可以提供类型，当在同一个命名空间下存在多个不同类型却名字相同的值时，不冲突即为合法，并且最终进行合并。举个例子：\n\n```typescript\n// 类型与类型的结合\ninterface Foo {\n  x: number;\n}\nclass Foo {\n  y: number;\n}\n// ... elsewhere ...\ninterface Foo {\n  z: number;\n}\nlet a: Foo = ...;\nconsole.log(a.x + a.y + a.z); // OK\n```\n\n\n\n##### 自动生成\n\n`tsc`可以为扩展名改变的`js`文件自动创建类型声明文件，并且可以识别`jsdoc`。\n\n当我们的`js`代码提供了良好的`jsdoc`文档时，`tsc`自动生成的`d.ts`文件有时可以满足我们的需求。\n\n\n\n##### 发布\n\n在编写`TypeScript`库的时候将`.d.ts`文件放在根目录一同发布出去即可让用户自动获取良好的类型声明支持。\n\n在日常工作中，有些模块库的声明需要手动下载安装，例如之前一个版本的`lodash`:\n\n`npm i -D @types/lodash`\n\n\n\n### 基本类型\n\n#### 基础\n\n`JavaScript`七种类型，在`TypeScript`中一一对应如下：\n\n```typescript\nconst isDone: boolean = false; // 布尔值\n\nconst decimal: number = 1; // 数字\n\nconst color: string = 'red'; // 字符串\n\nconst n: null = null; // null\n\nconst udf: undefined = undefined; // undefined\n\nconst obj: object = {}; // Object\n\nconst s: symbol = Symbol(); // Symbol\n```\n\n此外，还有以下几种基础类型：\n\n```typescript\nconst list: number[] = [1, 2]; // 数组\n\nconst x: [string, number] = ['ok', 1]; // 元组\n\nenum Direction { left, right, bottom, top }; // 枚举\n\nconst anything: any = 1; // 任意类型\nconst list: any[] = ['a', 'b', 1]; // 任意数组\n\nfunction foo(): void {}; // 空类型\n\nfunction neverReturn(): never {throw 'error'}; // 不存在返回值\n\nlet value: unknown; // 未知类型，更安全更严格的 any，但却不可以赋值给其他已知类型\n```\n\n#### 关注点\n\n- Array 具有两种声明格式\n  - elemType[]\n  - Array<elemType>\n- Tuple 越界时，值为所有定义的混合类型\n- void 的意义约束了返回值只能是`null/undefined`\n- `null/undefined/never`是其他类型的子类型，因此可以赋值给任何其他类型的变量\n- 其他任何类型都不可以赋值给`never`(any 也不行)\n- `never`可以用做类型保护，例如声明`declare const name: never`可以避免隐式访问`window.name`\n\n> 开启`--strictNullChecks`时，`null/undefined`只可以赋值给`void`和各自对应的类型\n\n#### 类型断言\n\n类型断言可以理解成编译时的强制类型转换，意在告诉编译器：“我你比懂类型，这就是个`type`”。\n\n类型断言具有两种类型：\n\n- `variable as type`: 通用\n- `<type>variable`: jsx 中有语法冲突，故一般用前者\n\n#### Interface\n\n`TypeScript`中的接口不必显示实现，而只表示一种类型的约束。\n\n```typescript\ninterface Demo {\n  // 索引签名，适用于无法确定属性名的场合\n  [x: string]: string\n  // 只读属性\n  readonly x: number;\n  // 只读数组\n  list: ReadonlyArray<number>;\n  // 只读索引签名\n  readonly [propName: string]: string\n}\n```\n\n接口还可以用来表示函数类型：\n\n```typescript\ninterface SearchFc {\n  (source: string, subStr: string): string;\n}\nlet mySearchFc = (source: string, subStr: string) => {\n  let res = source.search(subStr);\n  return res.toString();\n}\n```\n\n> 函数参数检查会按顺序检查，但是不必严格限制参数名\n\n此外，接口和类之间还有`implements`的关系：\n\n```typescript\ninterface ClockInterface {\n  currentTime: Date;\n  setTime: (d: Date) => void\n}\nclass Clock implements ClockInterface {\n  currentTime: Date;\n  setTime(d: Date) {\n    this.currentTime = d;\n  }\n  constructor(h: number, m: number) {}\n}\n```\n\n> 接口即协议，接口即契约\n\n接口可以`继承`：\n\n```typescript\n// 单继承\ninterface Shape {\n  color: string;\n}\ninterface Square extends Shape {\n  sideLength: number;\n}\n// 多继承\ninterface PenStroke {\n  penWidth: number;\n}\ninterface Square extends Shape, PenStroke {\n  sideLength: number;\n}\n```\n\n#### 类\n\n","title":"TypeScript-上卷","date":"2022/2/26","tags":[null],"mainImg":"https://images.unsplash.com/photo-1592609931095-54a2168ae893?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDU4NzEzMDI&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1592609931095-54a2168ae893?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDU4NzEzMDI&ixlib=rb-1.2.1&q=80&w=400","intro":"工作中日常用到 TypeScript，故在此学习并记录备忘。此为上卷，亦有中下两卷。"}},"__N_SSG":true}