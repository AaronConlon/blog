{"pageProps":{"post":{"slug":"Javascript-ES6-函数式编程阅读随写","contentHtml":"<h1>函数式编程简介</h1>\n<blockquote>\n<p>函数要小,要更小.</p>\n</blockquote>\n<p>函数式编程,远离外部环境的依赖,隔绝突变与状态.</p>\n<p>数学的函数定义中,函数必须接收一个<code>参数</code>,返回一个值.函数根据接收的参数运行.给定的参数下,返回值是不变的.</p>\n<p><code>JavaScript函数式编程</code>基于数学函数及其思想进行发展.运用函数式的范式进行开发能创造可缓存和可测试的代码库.</p>\n<blockquote>\n<p>简单分辨函数与方法 - JS,不必深究 window和 global 对象.</p>\n</blockquote>\n<ul>\n<li>函数: 一段通过名称可调用的代码</li>\n<li>方法: 通过名称且关联对象的名称被调用的代码</li>\n</ul>\n<p>函数的引用透明性指的是,函数对相同的输入返回相同的值.不依赖全局数据的函数,能够自由地在多线程状态下运行,全程无锁.并且函数是<code>可缓存</code>的,合理运用这一点,可以节省大量重复计算的资源消耗和时间消耗.</p>\n<blockquote>\n<p>引用透明性是一种哲学</p>\n</blockquote>\n<p><strong>命令式?声明式?</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">for</span>(i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++) \n<span class=\"lineNumber\">3</span>  <span class=\"hljs-built_in\">console</span>.log(i)</code></pre> \n\n<p>上述代码示例,我们告诉编译器如何去做,这就是<code>命令式</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]\n<span class=\"lineNumber\">2</span>arr.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">i</span> =></span> <span class=\"hljs-built_in\">console</span>.log(i))</code></pre> \n\n<p><code>forEach</code>是一个高阶函数,意在告知编译器<code>做什么</code>,<code>如何做</code>的部分则在高阶函数内的普通函数中实现.这便是<code>声明式</code>.</p>\n<p><strong>纯函数</strong>:对给定的输入,返回相同的输出的函数.纯函数不依赖于外部环境.也不会改变外部环境.易于对函数进行<code>测试</code>.</p>\n<p>纯函数是<code>易于阅读</code>的.为纯函数设置<code>具有意义</code>的函数名是一种最佳实践.</p>\n<blockquote>\n<p>纯函数应该被设计为只做一件事,并且把它做到完美,这也会是 Unix 的哲学.</p>\n</blockquote>\n<p>纯函数支持<code>管道和组合</code>.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>cat package.json | grep axios</code></pre> \n\n<p><code>bash</code>命令的管道和组合威力巨大,组合是函数式编程的核心.我们称之为<code>function composition</code>.</p>\n<h1>JavaScript 函数式基础</h1>\n<p>略,简述基础<code>JavaScript</code>.</p>\n<h1>高阶函数 HOF</h1>\n<p><strong>JavaScript 数据类型</strong>:</p>\n<ul>\n<li>Number</li>\n<li>String</li>\n<li>Boolean</li>\n<li>Null</li>\n<li>Object</li>\n<li>undefined</li>\n<li>Symbol</li>\n<li>BigInt</li>\n</ul>\n<p>除了<code>object</code>外,都是原始数据类型.</p>\n<blockquote>\n<p>在<a href=\"https://zh.wikipedia.org/wiki/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8\">计算机科学</a>中，<strong>抽象化</strong>（英语：Abstraction）是将资料与程序，以它的语义来呈现出它的外观，但是隐藏起它的实现细节。抽象化是用来减少程序的复杂度，使得程序员可以专注在处理少数重要的部分。一个电脑系统可以分割成几个<a href=\"https://zh.wikipedia.org/wiki/%E6%8A%BD%E8%B1%A1%E5%B1%A4\">抽象层</a>（Abstraction layer），使得程序员可以将它们分开处理。</p>\n</blockquote>\n<p>抽象化,让我们专注于可控层面的工作,将复杂的内容简单化,让开发者专注于预订的目标,不必<code>事事关心</code>.</p>\n<p>我们通过<code>高阶函数</code>实现抽象.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> forEach = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, Fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++) Fn(arr[i])\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>这是一个简单的高阶函数,抽象了<code>遍历数组</code>的问题,如果你使用这个函数,你并不需要关注内部代码是如何实现的.上述例子是一个简单逻辑,同理也可以是更为复杂的逻辑,这样一来就将复杂问题<code>抽象</code>出来了.</p>\n<p>让我们开始学习构建复杂的高阶函数.</p>\n<p>创建一个<code>every</code>函数如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> i=<span class=\"hljs-number\">0</span>;i&#x3C;arr.length;i++</span>)</span> {\n<span class=\"lineNumber\">4</span>    result = result &#x26;&#x26; fn(arr[i])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// for..of.. 版本</span>\n<span class=\"lineNumber\">10</span><span class=\"hljs-comment\">// for...of..是 es6 的函数,可以方便遍历数组</span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">14</span>    result = result &#x26;&#x26; fn(arr[value])\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">17</span>}</code></pre> \n\n<p>如此一来,我们抽象了对数组遍历的操作.</p>\n<p>接着,编写一个<code>some</code>函数,其接受一个数组和一个函数,如果数组中一个元素通过接收的函数返回<code>true</code>,则<code>some</code>函数返回<code>true</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> every = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    result = result || fn(arr[value])\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<blockquote>\n<p>some 函数和 every 函数都不算高效,这里只是作为对高阶函数的展示.</p>\n</blockquote>\n<p><code>JavaScript</code>的<code>array</code>原型内置<code>sort</code>函数,可以给数组排序.这是一个典型的<code>高阶函数</code>.它接收一个可选的函数来决定排序顺序逻辑.极大的提高了排序的灵活性.我们知道,默认的<code>sort</code>排序是将数组元素转换为<code>string</code>并且按<code>Unicode</code>编码点进行排序,因此数字 2 在默认排序算法中小于 12.让我们看看此可选的<code>compare</code>函数的骨架:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">compare</span>(<span class=\"hljs-params\">a, b</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">条件</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-comment\">// a 小于 b</span>\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">条件</span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// a 大于 b</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// a 等于 b</span>\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">12</span>}</code></pre> \n\n<p>举个例子,现在我们有一个用户数组,每个元素是一个用户的信息.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> people = [\n<span class=\"lineNumber\">2</span>  {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Aaron'</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">10</span>\n<span class=\"lineNumber\">5</span>  },\n<span class=\"lineNumber\">6</span>  {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Rose'</span>,\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">11</span>\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>]</code></pre> \n\n<p>而需求则是,通过姓名排序或者通过年龄排序.根据前置知识,可以写出如下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 简化逻辑,忽略相等的情况</span>\n<span class=\"lineNumber\">2</span>people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.name > b.name ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">3</span>people.sort(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a.age > b.age ? <span class=\"hljs-number\">1</span>: -<span class=\"hljs-number\">1</span>)</code></pre> \n\n<p>上述代码,我们将雷同的部分写了两遍.现在我们来设计一个函数,接收一个参数,返回一个函数.是的,将要设计的这个函数是一个<code>高阶函数</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> sortBy = <span class=\"hljs-function\">(<span class=\"hljs-params\">property</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> a[property] > b[property] ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// 简化版</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">const</span> sortBy = <span class=\"hljs-function\"><span class=\"hljs-params\">property</span> =></span> <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> a[property] > b[property] ? <span class=\"hljs-number\">1</span> : -<span class=\"hljs-number\">1</span></code></pre> \n\n<p>现在,我们可以重写按<code>name</code>或者<code>age</code>的排序代码了.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>people.sort(sortBy(<span class=\"hljs-string\">'name'</span>))\n<span class=\"lineNumber\">2</span>people.sort(sortBy(<span class=\"hljs-string\">'age'</span>))</code></pre> \n\n<p>这就是<code>高阶函数</code>的魅力.运用高阶函数,提高代码质量,降低代码数量.</p>\n<h1>闭包与高阶函数</h1>\n<p>简而言之,闭包就是一个内部函数.在一个函数内部的函数,可以称为<code>闭包函数</code>.</p>\n<p>从<code>技术上</code>来讲,上述闭包函数的闭包场景存在三个可访问的作用域:</p>\n<ul>\n<li>自身声明内变量</li>\n<li>外部函数变量</li>\n<li>全局变量</li>\n</ul>\n<p><strong>闭包可以记住上下文环境</strong>.话说回来,由于我们要在函数式编程中处理很多函数,因此需要一种调试方法.</p>\n<p>举个例子,一个字符串数组,想要解析成整数数组,如下代码会有问题:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>[<span class=\"hljs-string\">'1'</span>, <span class=\"hljs-string\">'2'</span>].map(<span class=\"hljs-built_in\">parseInt</span>)</code></pre> \n\n<p><code>map</code>函数用三个参数调用了<code>parseInt</code>,分别是:</p>\n<ol>\n<li>element</li>\n<li>index</li>\n<li>arr</li>\n</ol>\n<p>而<code>parseInt</code>函数全盘接纳,来看看此函数的定义:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">parseInt</span>(string, radix);</code></pre> \n\n<p><code>radix</code>是可选的基数,如果提供 10,则转换为十进制的整数.</p>\n<p>如果 <code>radix</code> 是 <code>undefined</code>、<code>0</code>或未指定的，JavaScript会假定以下情况：</p>\n<ol>\n<li>如果输入的 <code>string</code>以 \"<code>0x</code>\"或 \"<code>0x</code>\"（一个0，后面是小写或大写的X）开头，那么radix被假定为16，字符串的其余部分被当做十六进制数去解析。</li>\n<li>如果输入的 <code>string</code>以 \"<code>0</code>\"（0）开头， <code>radix</code>被假定为<code>8</code>（八进制）或<code>10</code>（十进制）。具体选择哪一个radix取决于实现。ECMAScript 5 澄清了应该使用 10 (十进制)，但不是所有的浏览器都支持。<strong>因此，在使用 <code>parseInt</code> 时，一定要指定一个 radix</strong>。</li>\n<li>如果输入的 <code>string</code> 以任何其他值开头， <code>radix</code> 是 <code>10</code> (十进制)。</li>\n</ol>\n<p>如果第一个字符不能转换为数字，<code>parseInt</code>会返回 <code>NaN</code>。</p>\n<p>此时,<code>['1', '2'].map(parseInt)</code>的结果是: [1, NaN].</p>\n<p>如何用函数式的思维,创建一个高阶函数,对<code>parseInt</code>进行抽象.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> unary = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> fn.length === <span class=\"hljs-number\">1</span> ? fn : <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> fn(arg)\n<span class=\"lineNumber\">2</span>[<span class=\"hljs-string\">'1'</span>,<span class=\"hljs-string\">'2'</span>,<span class=\"hljs-string\">'3'</span>].map(unary(<span class=\"hljs-built_in\">parseInt</span>))</code></pre> \n\n<p>现在,即使<code>map</code>以三个参数调用<code>unary</code>函数执行后返回的函数,都只会让<code>element</code>参数生效.</p>\n<p>我们得到了预期中的结果:<code>[1,2,3]</code> :seedling:</p>\n<p>现在,让我们为自己的工具库添加一个工具函数,这个函数接收一个函数作为参数,让这个接收的函数只能被执行一次.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> once = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> done = <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =></span> done ? <span class=\"hljs-literal\">undefined</span> : ((done = <span class=\"hljs-literal\">true</span>), fn.apply(<span class=\"hljs-built_in\">this</span>, <span class=\"hljs-built_in\">arguments</span>))\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>现在用一个变量<code>done</code>保存函数的执行状态.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> demoFn = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">console</span>.log(a, b, <span class=\"hljs-string\">'just called once.'</span>)\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span><span class=\"hljs-keyword\">const</span> newDemoFn = once(demoFn)\n<span class=\"lineNumber\">5</span>newDemoFn(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// output: 1 2 just called once.</span>\n<span class=\"lineNumber\">6</span>newDemoFn(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">// no output</span></code></pre> \n\n<p>继续,创建下一个函数<code>memoized</code>,使函数记住其计算结果:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> memoized = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> lookupTable = {}\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">arg</span>) =></span> lookupTable[arg] || (lookupTable[arg] = fn(arg))\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>一个速查<code>table</code>保存了函数解构,如果不存在则执行此函数,保存到速查表中并且返回此结果.</p>\n<p><strong>memoized 函数是经典的函数式编程,是闭包与纯函数的实战</strong></p>\n<h1>数组的函数式编程</h1>\n<p>我们将创建一组函数用于解决常见的数组问题,关键在于函数式的方法,而非命令式的方法.</p>\n<blockquote>\n<p>把函数应用于一个值,并且创建新的值的过程被称为\"投影\"</p>\n</blockquote>\n<p><code>Array.map</code>就是典型的投影函数.我们来试着创建一个<code>map</code>函数.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> result = []\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    result.push(fn(v))\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>\t<span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>一个<code>filter</code>函数,对数组内容进行过滤.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> filter = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> result = []\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">if</span>(fn(v)) result.push(v)\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>一个<code>reduce</code>函数,对数组的所有值进行<code>归约</code>操作.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">var</span> reduce = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr, fn, defaultAccumlator</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> accumlator;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">defaultAccumlator !== <span class=\"hljs-literal\">undefined</span></span>)</span> {\n<span class=\"lineNumber\">4</span>    accumlator = defaultAccumlator\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">const</span> v <span class=\"hljs-keyword\">of</span> arr</span>)</span> {\n<span class=\"lineNumber\">6</span>      accumlator = fn(accumlator, v)\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>    accumlator = arr[<span class=\"hljs-number\">0</span>]\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">1</span>;i&#x3C;arr.length;i++</span>)</span> {    \n<span class=\"lineNumber\">11</span>      accumlator = fn(accumlator, arr[i])\n<span class=\"lineNumber\">12</span>    }\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">return</span> [accumlator]\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<p><strong>继续</strong>,上<code>zip</code>函数,用于合并两个单独的数组,返回一个处理过的新数组.这个函数可以对给定的两个数组的限定对象进行结对处理,如何处理取决于具体的函数逻辑.结对的结果就是返回一个新的数组.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> zip = <span class=\"hljs-function\">(<span class=\"hljs-params\">arr1, arr2, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> index, result = []\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\">index = <span class=\"hljs-number\">0</span>;index &#x3C; <span class=\"hljs-built_in\">Math</span>.min(arr1.length, arr2.length);index++</span>)</span> {\n<span class=\"lineNumber\">4</span>    result.push(fn(arr1[index], arr2[index]))\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<h1>currying 和偏应用</h1>\n<p><strong>一些术语</strong>:</p>\n<ul>\n<li>unary function: 一元函数,只接收一个参数的函数.</li>\n<li>binary function: 二元函数</li>\n<li>变参函数:接受可变数量参数的函数</li>\n<li>currying: 柯里化,这是一个过程,将一个多参函数转变为一个嵌套的一元函数.</li>\n</ul>\n<p>上代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span> <span class=\"hljs-keyword\">const</span> curry = <span class=\"hljs-function\"><span class=\"hljs-params\">binaryFn</span> =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">firstArg</span> =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-params\">secondArg</span> =></span> {\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-keyword\">return</span> binaryFn(firstArg, secondArg);\n<span class=\"lineNumber\">5</span>    }\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// 简化</span>\n<span class=\"lineNumber\">9</span><span class=\"hljs-keyword\">const</span> curry = <span class=\"hljs-function\"><span class=\"hljs-params\">binaryFn</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">firstArg</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">secondArg</span> =></span> binaryFn(firstArg, secondArg)</code></pre> \n\n<p>完美利用了闭包的特性,也许对于一些深谙此道的 coder 而言,这不算什么.但是对于此刻的我来说,从未如此清晰体会到闭包和 currying.如此之美.</p>\n<p>开发者编写代码的时候会在应用中编写日志,下面我们编写一个<code>日志函数</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> loggerHelper = <span class=\"hljs-function\">(<span class=\"hljs-params\">mode, msg, errorMsg, lineNo</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">mode === <span class=\"hljs-string\">'DEBUG'</span></span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">console</span>.debug(msg, errorMsg + <span class=\"hljs-string\">'at line:'</span> + lineNo)\n<span class=\"lineNumber\">4</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">mode === <span class=\"hljs-string\">'WARN'</span></span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">console</span>.warn(msg, errorMsg + <span class=\"hljs-string\">'at line:'</span> + lineNo)\n<span class=\"lineNumber\">6</span>  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">mode === <span class=\"hljs-string\">'ERROR'</span></span>)</span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-built_in\">console</span>.error(msg, errorMsg + <span class=\"hljs-string\">'at line:'</span> + lineNo)\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-string\">\"WRONG MODE\"</span>\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p>上述代码不是良好的设计,多次重用了部分代码,让整体不够简洁.之前创建的<code>curry</code>函数也无法处理这个日志函数.我们需要<strong>更进一步</strong>.我们需要把多参数函数转化为<code>unary function</code>.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> curry = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(<span class=\"hljs-keyword\">typeof</span> fn !== <span class=\"hljs-string\">'function'</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'No function provided'</span>)\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// args 是可变参数</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">curryFn</span>(<span class=\"hljs-params\">...args</span>) </span>{\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// 如果可变参数少于被柯里化的函数的参数数量</span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">args.length &#x3C; fn.length</span>)</span> {\n<span class=\"lineNumber\">7</span>      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">8</span>        <span class=\"hljs-comment\">// 执行此函数,返回一个处理一次参数的函数</span>\n<span class=\"lineNumber\">9</span>        <span class=\"hljs-keyword\">return</span> curryFn.apply(<span class=\"hljs-literal\">null</span>, args.concat(\n<span class=\"lineNumber\">10</span>        \t<span class=\"hljs-built_in\">Array</span>.slice.call(<span class=\"hljs-built_in\">arguments</span>)\n<span class=\"lineNumber\">11</span>        ))\n<span class=\"lineNumber\">12</span>      }\n<span class=\"lineNumber\">13</span>    }\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> fn.apply(<span class=\"hljs-literal\">null</span>, args)\n<span class=\"lineNumber\">15</span>}</code></pre> \n\n<blockquote>\n<p><code>arguments</code>对象是所有（非箭头）函数中都可用的<strong>局部变量</strong>。你可以使用<code>arguments</code>对象在函数中引用函数的参数。此对象包含传递给函数的每个参数，第一个参数在索引0处。</p>\n</blockquote>\n<p>回到<code>日志函数</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> errorDebugLog = curry(loggerHelper)(<span class=\"hljs-string\">'ERROR'</span>)(<span class=\"hljs-string\">'ERROR:'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> warnDebugLog = curry(loggerHelper)(<span class=\"hljs-string\">'WARN'</span>)(<span class=\"hljs-string\">'WARN:'</span>)\n<span class=\"lineNumber\">3</span>errorDebugLog(<span class=\"hljs-string\">'balabala..'</span>, <span class=\"hljs-number\">21</span>) <span class=\"hljs-comment\">// output: 'ERROR: balabala at line 21'</span></code></pre> \n\n<p>这就是闭包的魅力,在首次传入<code>loggerHelper</code>的时候,闭包生成了可访问变量作用域,记住了函数信息.</p>\n<p>现在,让我们来解决两个问题:</p>\n<ul>\n<li>在数组内容中检查是否存在数字</li>\n<li>求数组的平方</li>\n</ul>\n<p>首先,创建一个检查函数:<code>findNumberInArr</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> match = curry(<span class=\"hljs-function\">(<span class=\"hljs-params\">expr, str</span>) =></span> str.match(expr))\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> hasNumber = curry(match(<span class=\"hljs-regexp\">/[0-9]+/</span>))\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> filter = curry(<span class=\"hljs-function\">(<span class=\"hljs-params\">fn, arr</span>) =></span> arr.filter(fn))\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// create fn</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">const</span> findNumberInArr = filter(hasNumber)\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// test</span>\n<span class=\"lineNumber\">7</span>findNumberInArr([<span class=\"hljs-string\">'demo'</span>, <span class=\"hljs-string\">'demo1'</span>]) <span class=\"hljs-comment\">// output: ['demo1']</span></code></pre> \n\n<p>现在求数组的平方,我们通过<code>curry</code>函数进行处理,这次不要直接通过<code>map</code>函数传入一个平方函数解决这个问题.换一个视角.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> map = curry(<span class=\"hljs-function\">(<span class=\"hljs-params\">fn, arr</span>) =></span> arr.map(f))\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> squareAll = map(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =></span> x*x)\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// 现在,squareAll 是一个unary 函数</span>\n<span class=\"lineNumber\">4</span>squareAll([<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>]) <span class=\"hljs-comment\">// output: [1, 4, 9]</span></code></pre> \n\n<p>我们可以很多地方直接使用<code>squareAll</code>函数了.如果需要在多个地方求数组的平方,这个函数可以简化降低代码量,当然,我们还可以配合<code>memoized</code>函数进行缓存处理!</p>\n<p>是时候谈谈<code>偏应用</code>了,接下来我们将创建一个<code>partial</code>函数以解决我们的问题.</p>\n<p>比如我们有这样一个场景,我们需要在 10 秒后执行一个函数,这个需求在多个地方用得上,也许我们会直接如此编程:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// some code</span>\n<span class=\"lineNumber\">3</span>}, <span class=\"hljs-number\">10000</span>)</code></pre> \n\n<p>一旦需要在另一个地方使用这个逻辑,就需要重写一遍这些代码.而且无法使用<code>curry</code>函数进行处理,因为时间参数是最后一个参数.解决这个问题的方案之一就是创建一个封装函数:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> setTimeoutWrapper = <span class=\"hljs-function\">(<span class=\"hljs-params\">time, fn</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">setTimeout</span>(fn, time)\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>然后使用<code>curry</code>函数进行优化.然而,我们可以进一步减少创建此类函数的开销.</p>\n<p><strong>这就是偏应用</strong>的应用场景.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">var</span> partial = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, ...partialArgs</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> args = partialArgs\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> (...fullArguments) {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">let</span> arg = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-function\"><span class=\"hljs-title\">for</span>(<span class=\"hljs-params\"><span class=\"hljs-keyword\">let</span> i=<span class=\"hljs-number\">0</span>;i&#x3C;args.length &#x26;&#x26; arg &#x3C; fullArguments.length;i++</span>)</span> {\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">args[i] === <span class=\"hljs-literal\">undefined</span></span>)</span> {\n<span class=\"lineNumber\">7</span>        args[i] = fullArguments[arg++]\n<span class=\"lineNumber\">8</span>      }\n<span class=\"lineNumber\">9</span>    }\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">return</span> fn.apply(<span class=\"hljs-literal\">null</span>, args)\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>}\n<span class=\"lineNumber\">13</span> \n<span class=\"lineNumber\">14</span><span class=\"hljs-keyword\">const</span> delayTenMs = partial(<span class=\"hljs-built_in\">setTimeout</span>, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-number\">10</span>)\n<span class=\"lineNumber\">15</span><span class=\"hljs-keyword\">const</span> demoFn = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-comment\">// sdasdsadad</span>\n<span class=\"lineNumber\">17</span>}\n<span class=\"lineNumber\">18</span>delayTenMs(demoFn)</code></pre> \n\n<p>再次使用了闭包,记住了<code>setTimeout</code>需要的参数列表长度,暂未提供的参数用 undefined 代替.后续返回一个函数,提供参数的同时,补全之前用 undefined 代替的部分参数,最终执行函数.</p>\n<p>例如,我们需要美化一个<code>json</code>对象的输出.先看看 json stringify 函数的定义.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">JSON</span>.stringify(value[, replacer [, space]])</code></pre> \n\n<p><strong>参数</strong></p>\n<ul>\n<li>\n<p><code>value</code></p>\n<p>将要序列化成 一个 JSON 字符串的值。</p>\n</li>\n<li>\n<p><code>replacer</code> 可选</p>\n<p>如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为 null 或者未提供，则对象所有的属性都会被序列化。</p>\n</li>\n<li>\n<p><code>space</code> 可选</p>\n<p>指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串（当字符串长度超过10个字母，取其前10个字母），该字符串将被作为空格；如果该参数没有提供（或者为 null），将没有空格。</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {<span class=\"hljs-attr\">foo</span>: <span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-attr\">bar</span>: <span class=\"hljs-string\">\"foo\"</span>}\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// 第二参数</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">JSON</span>.stringify(obj, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// 想办法移除样板代码 null 和 2</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">const</span> prettyJson = partial(<span class=\"hljs-built_in\">JSON</span>.stringify, <span class=\"hljs-literal\">undefined</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">6</span>prettyJson(obj)</code></pre> \n\n<p>啊!<code>partial</code>函数有 bug.<code>partialArgs</code>传递的是数组,数组传递的是引用.如果不创建一个新的数组,并且在最后重置数组的话,执行一次<code>partial</code>化后的函数<code>delayTenMs</code>,内部 args 就固定了,闭包变量保存了首次执行的时候提供的参数去替换<code>undefined</code>,这里的<code>undefined</code>就像占位符.</p>\n<p>书上并没有给出一个示例代码来解决问题,只是提出存在 bug 的观点,我写下了如下代码,使用扩展运算符重置占位符效果的<code>undefined</code>变量.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> partial = <span class=\"hljs-function\">(<span class=\"hljs-params\">fn, ...partialArgs</span>) =></span> {  \n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">let</span> args = [...partialArgs]\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...fullArgs</span>) =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">let</span> argIndex = <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> index = <span class=\"hljs-number\">0</span>; index &#x3C; args.length &#x26;&#x26; argIndex &#x3C; fullArgs.length; index++) {\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">args[index] === <span class=\"hljs-literal\">undefined</span></span>)</span> {\n<span class=\"lineNumber\">7</span>        args[index] = fullArgs[argIndex++]\n<span class=\"lineNumber\">8</span>      }\n<span class=\"lineNumber\">9</span>    }\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">const</span> result = fn.apply(<span class=\"hljs-literal\">null</span>, args)\n<span class=\"lineNumber\">11</span>    args = [...partialArgs]\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> result\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>晚安.</p>\n<p>2020年12月21日01:41:11</p>\n<h1>管道和组合</h1>\n<p>函数式组合在函数式编程中被称为<code>组合 composition</code>.</p>\n<blockquote>\n<p>每个程序只为做好一件事,重构要比在旧的复杂程序中添加新属性更好. From Ken·Thompson</p>\n</blockquote>\n<blockquote>\n<p>每一个程序的输出应该是另一个未知程序的输入.</p>\n</blockquote>\n<p>我们将要创建<code>compose</code>函数,例如:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> compose = <span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =></span> a(b(c))</code></pre> \n\n<p>依然是熟悉的高阶函数,接收函数作为参数,返回函数.返回的函数的<code>参数</code>是关键.</p>\n<p><code>compose</code>函数能解决我们常见的一些问题.你是否写过类似如下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> data = someFn(<span class=\"hljs-string\">'this'</span>)\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> result = otherFn(data)</code></pre> \n\n<p>一个函数的输出,作为另一个函数的输入.<code>compose</code>函数为此而生.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> getResult = compose(otherFn, someFn)</code></pre> \n\n<p><code>getResult</code>是一个函数,接收的参数跟<code>someFn</code>函数一致.我们创建了一个函数<code>getResult</code>.这是一种优雅而简单的实现方式.</p>\n<p>上述<code>someFn</code>只接收一个参数,如果需要接收多个参数的话,我们可以使用<code>curry</code>和<code>partial</code>两个函数进行优化.</p>\n<blockquote>\n<p>组合的思想就是把小函数组合成大函数,简单的函数易于阅读,测试和维护.</p>\n</blockquote>\n<p>创建小的函数单元,可以通过 compose 组合重建应对各种需求.</p>\n<p>但是,上述<code>compose</code>函数无法处理更多函数作为参数.仅仅支持两个函数作为参数是不够的,让我们来优化一下.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> compose = <span class=\"hljs-function\">(<span class=\"hljs-params\">...fns</span>) =></span> <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> reduce(fns.reverse(), <span class=\"hljs-function\">(<span class=\"hljs-params\">acc, fn</span>) =></span> fn(acc), value)</code></pre> \n\n<p>竟然如此简单桥面,接收一个入口参数<code>value</code>,首先设置为初始的<code>acc</code>值,依次执行并且返回作为下一个函数的入口.</p>\n<p>组合是从右到左执行的,而管道则从左到右.接下来创建<code>pipe</code>管道函数.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> pipe = <span class=\"hljs-function\">(<span class=\"hljs-params\">...fns</span>) =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> reduce(fns, <span class=\"hljs-function\">(<span class=\"hljs-params\">acc,fn</span>) =></span> fn(acc), value)</code></pre> \n\n<p>只是执行方向不同而已,因此参数列表不必反向.</p>\n<blockquote>\n<p>在公共代码库中建议使用单一的数据流,我更喜欢管道,因为这让我想起 shell 知识.同时使用管道和组合容易在团队中引起混淆.</p>\n</blockquote>\n<p>接下来,本书描述了<strong>组合</strong>的优势.</p>\n<p>组合支持结合律.</p>\n","title":"Javascript-ES6-函数式编程阅读随写","date":"2020/12/16","tags":["Javascript"],"mainImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569585723035-0e9e6ff87cbf?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"第一次看到这本书的时候,记得是几年前在桂电图书馆里,断断续续看了六章,后来便离开了学校.现在买了纸质书打算重新看一遍,这里记录下阅读随想."}},"__N_SSG":true}