{"pageProps":{"post":{"slug":"使用jest测试typescript代码","contentHtml":"<p>首先,这是一篇对构建 <code>typescript+jest</code> 代码环境的简单介绍,并不是进阶版本,如果你对<code>ts+jest</code>的测试知识已经有所了解,则不需在此花费时间.</p>\n<p>让我们开始吧.</p>\n<h3>工具</h3>\n<ul>\n<li>Nodejs</li>\n<li>yarn</li>\n<li>vscode</li>\n</ul>\n<h3>创建项目</h3>\n<p><code>show me the code.</code>:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>mkdir ts-jest-example\n<span class=\"lineNumber\">2</span><span class=\"hljs-built_in\">cd</span> ts-jest-example\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\"># 初始化 package.json</span>\n<span class=\"lineNumber\">4</span>yarn init -y\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\"># 安装依赖</span>\n<span class=\"lineNumber\">6</span>yarn add -D typescript\n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\"># 配置 tsconfig.json 的 typescript 代码编译选项</span>\n<span class=\"lineNumber\">8</span>npx tsc --init</code></pre> \n\n<p>然后可以使用<code>vscode</code>对<code>tsconfig.json</code>进行微调.</p>\n<p>首先建议按<code>typescript</code>官方的建议,设置<code>include</code>和<code>exclude</code>目录,指定是否需要编译的部分代码.</p>\n<p>创建输出目录<code>outDir</code>, 指定<code>rootDir</code>.</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"include\"</span>: [<span class=\"hljs-string\">\"./src/**/*\"</span>],\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"exclude\"</span>: [<span class=\"hljs-string\">\"node_modules\"</span>],\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"es5\"</span>,                          <span class=\"hljs-comment\">/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */</span>\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,                     <span class=\"hljs-comment\">/* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */</span>\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"./out\"</span>,                        <span class=\"hljs-comment\">/* Redirect output structure to the directory. */</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">\"rootDir\"</span>: <span class=\"hljs-string\">\"./src\"</span>,                       <span class=\"hljs-comment\">/* Specify the root directory of input files. Use to control the output directory structure with --outDir. */</span>\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-attr\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,                           <span class=\"hljs-comment\">/* Enable all strict type-checking options. */</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-attr\">\"esModuleInterop\"</span>: <span class=\"hljs-literal\">true</span>,                  <span class=\"hljs-comment\">/* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */</span>\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-attr\">\"skipLibCheck\"</span>: <span class=\"hljs-literal\">true</span>,                     <span class=\"hljs-comment\">/* Skip type checking of declaration files. */</span>\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-attr\">\"forceConsistentCasingInFileNames\"</span>: <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\">/* Disallow inconsistently-cased references to the same file. */</span>\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>接下来在<code>package.json</code>添加两个命令:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>...\n<span class=\"lineNumber\">2</span><span class=\"hljs-string\">\"scripts\"</span>: {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">\"build\"</span>: <span class=\"hljs-string\">\"tsc\"</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">\"test\"</span>: <span class=\"hljs-string\">\"jest\"</span>\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span>...</code></pre> \n\n<h3>编写案例</h3>\n<p>创建<code>./src/index.ts</code>文件并且导出<code>add</code>函数:</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">add</span>(<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-title\">number</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> a + b;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>在日常的<code>webpack</code>构建流程中,并不是去测试构建的最终<code>js</code>代码,我们可以对未<code>build</code>的<code>typescript</code>代码进行测试,使用<code>jest</code>进行测试之前仍然需要一些基础配置.</p>\n<p>针对<code>typescript</code>代码,我们使用<code>ts-jest</code>作为预处理器,让<code>jest</code>能测试使用<code>typescript</code>编写的项目.</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\"># 安装</span>\n<span class=\"lineNumber\">2</span>yarn add -D jest @types/jest ts-jest\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\"># 创建 jest 配置文件</span>\n<span class=\"lineNumber\">4</span>npx ts-jest config:init</code></pre> \n\n<p>现在,可以看到<code>jest.config.js</code>文件里的配置项如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">module</span>.exports = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">'ts-jest'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">'node'</span>,\n<span class=\"lineNumber\">4</span>};</code></pre> \n\n<p>最简单版本,如果需要更多定制化的<code>jest</code>配置,建议查阅官方文档.</p>\n<p>最后,针对上述的<code>add</code>函数编写简单测试用例,在根目录创建<code>test</code>文件夹,默认执行的是此文件夹下所有<code>*.test.ts</code>文件的测试内容.</p>\n<pre><code class=\"hljs language-typescript\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> add <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"../src/index\"</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>describe(<span class=\"hljs-string\">\"test add function\"</span>, <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>  it(<span class=\"hljs-string\">\"should equal 2 for add(1, 1)\"</span>, <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">5</span>    expect(add(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>)).toBe(<span class=\"hljs-number\">5</span>)\n<span class=\"lineNumber\">6</span>  })\n<span class=\"lineNumber\">7</span>})</code></pre> \n\n<p>执行测试:<code>yarn test</code>即可在终端得到反馈信息.</p>\n<blockquote>\n<p>函数式编程便于测试</p>\n</blockquote>\n<p>反馈信息丰富,包括错误内容,错误位置和返回结果对比,耗时数据和通过条目展示等等.</p>\n<blockquote>\n<p>vscode eslint 对 describe 等变量告警提示未定义的解决方法.</p>\n</blockquote>\n<p>编辑<code>eslint</code>配置文件,增加全局环境变量声明即可.</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"env\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"jest/globals\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<h3>总结</h3>\n<p>这是一篇非常简单的使用<code>jest</code>设置<code>typescript</code>代码测试环境的简介文章,针对<code>jest </code>的配置还有很多内容可以深入学习,今天除夕,就到此为止吧.</p>\n<p>新年快乐,心想事成.</p>\n","title":"使用jest测试typescript代码","date":"2021/2/11","tags":["jest","typescript"],"mainImg":"https://images.unsplash.com/photo-1579154392429-0e6b4e850ad2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1579154392429-0e6b4e850ad2?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"由于在学习数据结构与算法,直接使用不开会员的 leetcode 已经没法满足我了,使用 JavaScript 代码进行编码似乎不如使用 typescript 更好,于是转用 typescript,并且此时需要一个测试框架对象代码进行测试,以此印证算法是否可行.于是我选择了 Jest."}},"__N_SSG":true}