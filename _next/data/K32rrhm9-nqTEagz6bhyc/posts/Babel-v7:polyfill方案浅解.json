{"pageProps":{"post":{"slug":"Babel-v7:polyfill方案浅解","contentHtml":"<h2>前言</h2>\n<p>本文将对<code>babel7</code>的语法转换和<code>polyfill</code>的相关知识进行分析，主要内容为<code>@babel/preset-env</code>和<code>plugin-transform-runtime</code>，Babel 7.4之后不再推荐使用<code>@babel/polyfill</code>。</p>\n<h2>Preset-env</h2>\n<blockquote>\n<p>Preset-env 会污染全局环境。</p>\n</blockquote>\n<p>babel 7 版本推荐使用<code>@babel/preset-env</code>代替以往的诸多<code>polyfill</code>方案，现今我们可以使用<code>preset-env</code>简单地实现语法和功能特性的需求。</p>\n<blockquote>\n<p>@babel/preset-env is a smart preset that allows you to use the latest JavaScript without needing to micromanage which syntax transforms (and optionally, browser polyfills) are needed by your target environment(s).</p>\n</blockquote>\n<p>可知，<code>preset-env</code>可以转换新语法，甚至可以配置转换新的<code>API</code>，通过配置其可选项来实现功能支持。</p>\n<p><code>@babel/preset-env</code>有三个常用的关键可选项:</p>\n<ul>\n<li>\n<p>targets</p>\n</li>\n<li>\n<p>useBuiltIns</p>\n</li>\n<li>\n<p>corejs</p>\n</li>\n</ul>\n<h3>target</h3>\n<p>首先是<code>targets</code>，这个字段可以填写<code>browserslist</code>的查询字符串，官方推荐使用<code>.browserslistrc</code>文件去指明编译的<code>target</code>，这个配置文件还可以和<code>autoprefixer</code>、<code>stylelint</code>等工具一起共享配置。</p>\n<p>所以某种程度上不推荐在<code>.babelrc</code>的<code>preset-env</code>配置中直接使用<code>targets</code>进行配置。</p>\n<blockquote>\n<p>如果<code>preset-env</code>中指明<code>ignoreBrowserslistConfig</code>，则忽略<code>.browserslistrc</code>的配置项。</p>\n</blockquote>\n<h3>useBuiltIns</h3>\n<p>其次是用于指定<code>polyfill</code>方案的<code>useBuiltIns</code>，其默认值是<code>false</code>，在不主动<code>import</code>的情况下不使用<code>preset-env</code>来实现<code>polyfills</code>，只使用其默认的语法转换功能。</p>\n<blockquote>\n<p>如果使用默认值<code>false</code>，则应该避免在入口文件引入<code>polyfill</code>，使得打包体积过大。</p>\n</blockquote>\n<p>但是如果我们需要使用其<code>polyfill</code>功能，则可以选择两种方式：</p>\n<ul>\n<li>entry</li>\n<li>usage</li>\n</ul>\n<p><code>entry</code>指的是将会根据浏览器目标环境(<code>targets</code>)的配置，引入全部浏览器暂未支持的<code>polyfill</code>模块，无论在项目中是否使用到。</p>\n<p>先安装两个包：</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>yarn add core-js@3 regenerator-runtime</code></pre> \n\n<p>我们需要做的就是在入口处引入<code>polyfill</code>（或者在 webpack 配置文件中新增这两个包作为额外的入口）:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'core-js/stable'</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'regenerator-runtime/runtime'</span></code></pre> \n\n<p>对于项目开发来说，这种方案较为稳妥。尽管将浏览器暂不支持的模块全部引入可能会让某些项目中未使用的模块占据一定的额外体积，但是可以避免项目中引入的第三方库<code>polyfill</code>处理不当，导致引用异常。</p>\n<p>其次，设置<code>useBuiltIns</code>的值为<code>usage</code>时，我们不需要手动在入口文件引入<code>polyfill</code>，<code>Babel</code>将会根据我们的代码使用情况自动注入<code>polyfill</code>，如此一来在打包的时候将会相对地减少打包体积。</p>\n<p><code>唯一的问题</code>:当项目中引入的第三方库有<code>polyfill</code>处理不当的情况下，将会出现引用异常的问题，使用社区广泛使用的流行库能降低这个风险。</p>\n<h3>corejs</h3>\n<p>core-js是完全模块化的javascript标准库。</p>\n<p>推荐让浏览器的<code>polyfill</code>统一由<code>corejs</code>来管理。</p>\n<blockquote>\n<p>core-js v2 已经不再维护，推荐一致使用 v3 版本</p>\n</blockquote>\n<p>我们来看一个使用<code>entry</code>的整体<code>preset-env</code>配置示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// .babelrc</span>\n<span class=\"lineNumber\">2</span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-string\">\"presets\"</span>: [\n<span class=\"lineNumber\">4</span>    [\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">6</span>      {\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-string\">\"targets\"</span>: {\n<span class=\"lineNumber\">8</span>          <span class=\"hljs-string\">\"chrome\"</span>: <span class=\"hljs-string\">\"80\"</span> <span class=\"hljs-comment\">// 推荐使用 .browserslistrc</span>\n<span class=\"lineNumber\">9</span>        },\n<span class=\"lineNumber\">10</span>        <span class=\"hljs-string\">\"useBuiltIns\"</span>: <span class=\"hljs-string\">\"entry\"</span>,\n<span class=\"lineNumber\">11</span>        <span class=\"hljs-string\">\"corejs\"</span>: {\n<span class=\"lineNumber\">12</span>          <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">3</span>, <span class=\"hljs-comment\">// 2 和 3 版本都需要手动安装库：yarn add core-js@3</span>\n<span class=\"lineNumber\">13</span>          <span class=\"hljs-string\">\"proposals\"</span>: <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">14</span>        }\n<span class=\"lineNumber\">15</span>      }\n<span class=\"lineNumber\">16</span>    ]\n<span class=\"lineNumber\">17</span>  ],\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-string\">\"plugins\"</span>: []\n<span class=\"lineNumber\">19</span>}</code></pre> \n\n<blockquote>\n<p>笔者个人而言，不推荐使用 proposals 功能，只使用最新规范中的特性。</p>\n</blockquote>\n<p>之后再在入口文件手动引入<code>polyfill</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'core-js/stable'</span>;\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'regenerator-runtime/runtime'</span>;\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// other code</span></code></pre> \n\n<h2>Plugin-transform-runtime</h2>\n<p>使用之前请安装库:</p>\n<pre><code class=\"hljs language-bash\"><span class=\"lineNumber\">1</span>yarn add @babel/runtime //默认 corejs为 <span class=\"hljs-literal\">false</span>，如果使用 core-js v3 的 runtime，则需要安装 @babel/runtime-corejs3\n<span class=\"lineNumber\">2</span>yarn add -D babel-plugin-transform-runtime</code></pre> \n\n<p>之前提过<code>preset-env</code>的<code>polyfill</code>会污染全局，作为项目开发无可厚非，但是如果我们在开发提供给其他开发者使用的<code>library</code>，我想我们不应该污染全局，并且应该提供更好的打包体积和效率。</p>\n<blockquote>\n<p>A plugin that enables the re-use of Babel's injected helper code to save on codesize.</p>\n</blockquote>\n<p><code>plugin-transform-runtime</code>可以主要做了三件事：</p>\n<ul>\n<li>当开发者使用异步或生成器的时候，自动引入<code>@babel/runtime/regenerator</code>，开发者不必在入口文件做额外引入</li>\n<li>提供沙盒环境，避免全局环境的污染</li>\n<li>移除<code>babel</code>内联的<code>helpers</code>，统一使用<code>@babel/runtime/helpers</code>代替，减小打包体积</li>\n</ul>\n<p>当使用此方案时，不需要在入口文件处手动引入<code>core-js</code>和<code>regenerator-runtime</code>。详细的配置项建议在需要用的时候查看官方文档。</p>\n<h2>总结</h2>\n<p><code>@babel/preset-env</code>和<code>plugin-transform-runtime</code>二者都可以设置使用<code>corejs</code>来处理<code>polyfill</code>，二者各有使用场景，在项目开发和类库开发的时候可以使用不同的配置。</p>\n<p><code>不要同时为二者配置core-js的功能</code>，以免产生复杂的不良后果。</p>\n<p>最后，让我们来看看两个场景下的<code>babel</code>配置项：</p>\n<h3>项目开发</h3>\n<p><code>useBuiltIns</code>使用<code>usage</code>，尽量使用社区广泛使用的优质库以优化打包体积，不使用暂未进入规范的特性。<code>plugin-transform-runtime</code>只使用其移除内联复用的辅助函数的特性，减小打包体积。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-string\">\"presets\"</span>: [\n<span class=\"lineNumber\">3</span>    [\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">5</span>      {\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-comment\">// targets 官方推荐使用 .browserslistrc 配置</span>\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-string\">\"useBuiltIns\"</span>: <span class=\"hljs-string\">\"usage\"</span>,\n<span class=\"lineNumber\">8</span>        <span class=\"hljs-string\">\"corejs\"</span>: {\n<span class=\"lineNumber\">9</span>          <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">3</span>,\n<span class=\"lineNumber\">10</span>          <span class=\"hljs-string\">\"proposals\"</span>: <span class=\"hljs-literal\">false</span>\n<span class=\"lineNumber\">11</span>        }\n<span class=\"lineNumber\">12</span>      }\n<span class=\"lineNumber\">13</span>    ]\n<span class=\"lineNumber\">14</span>  ],\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-string\">\"plugins\"</span>: [\n<span class=\"lineNumber\">16</span>    [\n<span class=\"lineNumber\">17</span>      <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span>,\n<span class=\"lineNumber\">18</span>      {\n<span class=\"lineNumber\">19</span>        <span class=\"hljs-string\">\"corejs\"</span>: <span class=\"hljs-literal\">false</span> <span class=\"hljs-comment\">// 默认值，即使如此依然需要 yarn add @babel/runtime</span>\n<span class=\"lineNumber\">20</span>      }\n<span class=\"lineNumber\">21</span>    ]\n<span class=\"lineNumber\">22</span>  ]\n<span class=\"lineNumber\">23</span>}</code></pre> \n\n<h3>类库开发</h3>\n<p>类库开发尽量不使用污染全局环境的<code>polyfill</code>，因此<code>@babel/preset-env</code>只发挥语法转换的功能，<code>polyfill</code>由<code>plugin-transform-runtime</code>来处理，推荐使用<code>core-js@3</code>，并且不使用未进入规范的特性。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-string\">\"presets\"</span>: [\n<span class=\"lineNumber\">3</span>    [\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-string\">\"@babel/preset-env\"</span>,\n<span class=\"lineNumber\">5</span>    ]\n<span class=\"lineNumber\">6</span>  ],\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-string\">\"plugins\"</span>: [\n<span class=\"lineNumber\">8</span>    [\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-string\">\"@babel/plugin-transform-runtime\"</span>,\n<span class=\"lineNumber\">10</span>      {\n<span class=\"lineNumber\">11</span>        <span class=\"hljs-string\">\"corejs\"</span>: {\n<span class=\"lineNumber\">12</span>          <span class=\"hljs-string\">\"version\"</span>: <span class=\"hljs-number\">3</span>,\n<span class=\"lineNumber\">13</span>          <span class=\"hljs-string\">\"proposals\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">14</span>        },\n<span class=\"lineNumber\">15</span>        <span class=\"hljs-string\">\"useESModules\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">16</span>      }\n<span class=\"lineNumber\">17</span>    ]\n<span class=\"lineNumber\">18</span>  ]\n<span class=\"lineNumber\">19</span>}</code></pre> \n\n<p>总的来说，在配置开发环境的时候还是要参考官方文档的说明，这样才能减少出错的可能。</p>\n<h2>参考</h2>\n<ul>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-preset-env#usebuiltins\">@babel/preset-env · Babel</a></p>\n</li>\n<li>\n<p><a href=\"https://babeljs.io/docs/en/babel-plugin-transform-runtime#docsNav\">@babel/plugin-transform-runtime · Babel</a></p>\n</li>\n<li>\n<p><a href=\"https://zhuanlan.zhihu.com/p/361874935\">吃一堑长一智系列: 99% 开发者没弄明白的 babel 知识 - 知乎</a></p>\n</li>\n</ul>\n","title":"Babel 7: polyfill方案浅解 ","date":"2021/7/11","tags":["Babel"],"mainImg":"https://images.unsplash.com/photo-1550482781-48d477e61c72?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjYwMTE2Mzg&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1550482781-48d477e61c72?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjYwMTE2Mzg&ixlib=rb-1.2.1&q=80&w=400","intro":"前端工程化中，使用 babel 对新语法和 API 预置 polyfill 是非常流行的做法之一，但之前笔者对这个过程和其中使用到的插件不够了解，因此在网上搜寻了一些博客和知识分享，学习一番，再次总结一下。"}},"__N_SSG":true}