{"pageProps":{"post":{"slug":"测试-Jest测试环境配置","contentHtml":"<p>在一切开始之前,我已经全局安装了<code>eslint</code>和<code>jest</code>.那么直入正题,上代码:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span>mkdir Demo &#x26;&#x26; cd Demo\n<span class=\"lineNumber\">2</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> 初始化</span>\n<span class=\"lineNumber\">3</span>npm init -y\n<span class=\"lineNumber\">4</span>jest --init\n<span class=\"lineNumber\">5</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> eslint 这里,选择了检查语法和修复,并且遵循 standard 的规范进行编码</span>\n<span class=\"lineNumber\">6</span>eslint --init</code></pre> \n\n<blockquote>\n<p>如果需要显示覆盖率，则修改 package.json 的 test script,修改为: \"test\": \"jest --coverage\"</p>\n</blockquote>\n<p>接着便按照<code>jest</code> 的文档,试着写一个用例.在<code>vscode</code>中出现了诸如 <code>describ</code> 和<code>test</code>等未定义的<code>eslint</code>警告.</p>\n<p>接着,需要安装一款插件:<a href=\"https://www.npmjs.com/package/eslint-plugin-jest\">eslint-plugin-jest - npm</a>,并且按官方文档进行配置,在 eslint 的配置文件这里增加插件项目:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"plugins\"</span>: [<span class=\"hljs-string\">\"jest\"</span>]\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>以及添加规则,避免没必要的警告.</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"rules\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"jest/no-disabled-tests\"</span>: <span class=\"hljs-string\">\"warn\"</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"jest/no-focused-tests\"</span>: <span class=\"hljs-string\">\"error\"</span>,\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">\"jest/no-identical-title\"</span>: <span class=\"hljs-string\">\"error\"</span>,\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-attr\">\"jest/prefer-to-have-length\"</span>: <span class=\"hljs-string\">\"warn\"</span>,\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-attr\">\"jest/valid-expect\"</span>: <span class=\"hljs-string\">\"error\"</span>\n<span class=\"lineNumber\">8</span>  }\n<span class=\"lineNumber\">9</span>}</code></pre> \n\n<p>其实也可以通过配置环境变量项目告知 eslint 部分变量已经由<code>jest</code>提供.依然是编辑<code>eslint</code>的配置文件.</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"env\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"jest/globals\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<blockquote>\n<p>可以通过修改 jest 的配置文件,自动生成 web 的测试覆盖率文档和详解.</p>\n</blockquote>\n<p>接着,还需要支持<code>typescript</code>.</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> 安装 ts 依赖和插件</span>\n<span class=\"lineNumber\">2</span>npm i ts-jest @types/jest typescript @types/node --save-dev\n<span class=\"lineNumber\">3</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> init ts config</span>\n<span class=\"lineNumber\">4</span>touch tsconfig.json\n<span class=\"lineNumber\">5</span><span class=\"hljs-meta\">#</span><span class=\"bash\"> 如果全局安装了 tsc 则直接 tsc --init 即可创建初始化的 ts 配置文件</span></code></pre> \n\n<p>编辑配置文件 <code>tsconfig.json</code>:</p>\n<pre><code class=\"hljs language-json\"><span class=\"lineNumber\">1</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">\"compilerOptions\"</span>: {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attr\">\"target\"</span>: <span class=\"hljs-string\">\"es5\"</span>,\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-attr\">\"module\"</span>: <span class=\"hljs-string\">\"commonjs\"</span>,\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-attr\">\"lib\"</span>: [\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-string\">\"es2015\"</span>\n<span class=\"lineNumber\">7</span>    ],\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-attr\">\"strict\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-attr\">\"declaration\"</span>: <span class=\"hljs-literal\">true</span>,\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-attr\">\"outDir\"</span>: <span class=\"hljs-string\">\"build\"</span>,\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-attr\">\"sourceMap\"</span>: <span class=\"hljs-literal\">true</span>\n<span class=\"lineNumber\">12</span>  },\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-attr\">\"include\"</span>: [\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-string\">\"src/**/*\"</span>,\n<span class=\"lineNumber\">15</span>    <span class=\"hljs-string\">\"__test__/**/*\"</span>\n<span class=\"lineNumber\">16</span>  ],\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-attr\">\"exclude\"</span>: [\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-string\">\"node_modules\"</span>\n<span class=\"lineNumber\">19</span>  ]\n<span class=\"lineNumber\">20</span>}</code></pre> \n\n<p>接下来这部分是我从<code>图雀社区</code>复制过来的.修改 <code>jest.config.js</code> 配置</p>\n<p>添加如下配置项：</p>\n<pre><code>// An array of file extensions your modules use\n<span class=\"lineNumber\">2</span>moduleFileExtensions: [\n<span class=\"lineNumber\">3</span>    \"js\",\n<span class=\"lineNumber\">4</span>    \"json\",\n<span class=\"lineNumber\">5</span>    \"jsx\",\n<span class=\"lineNumber\">6</span>    \"ts\",\n<span class=\"lineNumber\">7</span>    \"tsx\",\n<span class=\"lineNumber\">8</span>    \"node\"\n<span class=\"lineNumber\">9</span>],\n<span class=\"lineNumber\">10</span>// A preset that is used as a base for Jest's configuration\n<span class=\"lineNumber\">11</span>preset: \"ts-jest\",\n<span class=\"lineNumber\">12</span></code></pre> \n\n<p>简单来说就是方便不用写引入的扩展名,以及为<code>ts</code>代码设置一个<code>preset</code>预处理,最后执行的是<code>js</code>代码.</p>\n<p>自此,基础的<code>jest</code>测试环境配置完成,已经满足我小范围函数测试的需求了.</p>\n","title":"测试-Jest测试环境配置","date":"2020/12/9","tags":["Jest","Test","Configuration"],"mainImg":"https://images.unsplash.com/photo-1542736667-069246bdbc6d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1542736667-069246bdbc6d?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"在学习TS的过程中,我经常需要对一些函数和代码段进行测试,一开始是直接运行测试,后来打算使用正经的测试框架进行测试,于是选择了Jest.即使有些函数和代码段并不正经.新的 Apple Mini 到货之后,我开始了环境配置,在此记录这个过程."}},"__N_SSG":true}