{"pageProps":{"post":{"slug":"javascript-定时器与系统时间补偿","contentHtml":"<p>今天我们来回顾一下<code>JavaScript</code>中的几个定时器相关的函数功能使用以及知识点分析，并且使用<code>时间补偿</code>机制创建<code>尽可能准确</code>的定时器任务。</p>\n<h2>1. 计时器函数</h2>\n<p>我们需要明确的是，<code>计时器函数</code>并不是<code>ECMAScript</code>规范或者<code>v8</code>引擎实现的一部分，无论是在浏览器端还是在<code>Nodejs</code>端，<code>setTimeout</code>和<code>setInterval</code>这类定时器函数都是<code>globalThis</code>接口的一部分.</p>\n<blockquote>\n<p>globalThis: ES2020 增加的标准，旨在统一不同环境下的全局对象访问入口，例如 nodejs 之 global，浏览器之 Window / this / frames, web workers 之 self。</p>\n</blockquote>\n<h3>1.1 setTimeout</h3>\n<p>首先是<code>setTimeout</code>函数，用于在指定的时间延迟后执行一个回调函数，其语法为：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> timeoutID = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>[, <span class=\"hljs-title\">delay</span>, <span class=\"hljs-title\">arg1</span>, <span class=\"hljs-title\">arg2</span>, ...])</span>;\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">let</span> timeoutID = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>[, <span class=\"hljs-title\">delay</span>])</span>;\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">let</span> timeoutID = <span class=\"hljs-built_in\">setTimeout</span>(code[, delay]);</code></pre> \n\n<p>首个参数通常是一个<code>函数</code>，另一种不推荐的危险选择是首个参数传入可执行的字符串,这将会在指定的 delay 毫秒后编译执行字符串。</p>\n<p><code>delay</code>参数是延迟的毫秒数，省略或者使用负数都将默认设置为 0，意为尽快执行。</p>\n<p>第三可选参数则是传入此回调函数的参数（IE9 及其以下版本不支持此特性）。</p>\n<p>此函数返回一个<code>timeoutID</code>是一个唯一的正整数，可以使用<code>clearTimeout(timeoutID)</code>来取消此定时器。</p>\n<h3>1.2 setInterval</h3>\n<p><code>setInterval</code>语法上与<code>setTimeout</code>类似，但是我们可以使用此函数在指定的时间间隔下将相同的回调函数加入宏任务队列。</p>\n<p>在某些场景下我们可以使用<code>setInterval()</code>函数处理一些需要间歇性执行的任务，并且可以保存其返回值<code>intervalID</code>，通过<code>clearInterval(intervalID)</code>函数终止此功能。</p>\n<h3>1.3 setImmediate</h3>\n<p><code>setImmediate</code>用于<code>Nodejs</code>端，其具有与<code>setTimeout(fn,0)</code>极其类似的功能，二者都将加入到宏任务队列中，但是在<code>Nodejs</code>中二者却又处于不同的执行阶段，在一个异步流程中，<code>setImmediate()</code>会比<code>setTimeout(fn, 0)</code>先执行，也许你会对二者的执行顺序有所疑惑，不急，待会我们来看看其中的原理。</p>\n<blockquote>\n<p>Nodejs 中 setTimeout(fn) 或者 setTimeout(fn, 0) 会被强制改为<code>setTimeout(fn, 1)</code></p>\n</blockquote>\n<h3>1.4 定时器 this</h3>\n<p>上述几个定时器相关的函数在日常的使用时，需要注意<code>this</code>变量的指向问题可能引发的不一致异常。</p>\n<p>首先，传入的回调函数的<code>this</code>指向性在不同版本的<code>nodejs</code>和不同版本<code>浏览器</code>之间有所不同，并且受到<code>严格模式</code>的影响，最好的选择是在必要情况下使用<code>es6 bind()</code>函数显式的绑定<code>this</code>，亦或是不在回调函数中使用<code>this</code>。</p>\n<h3>1.5 最小延迟时间</h3>\n<blockquote>\n<ol>\n<li>If timeout is less than 0, then set timeout to 0.</li>\n<li>If nesting level is greater than 5, and timeout is less than 4, then set timeout to 4.</li>\n</ol>\n</blockquote>\n<p>根据<code>whatwg</code>的规范说明，延时参数在超过 5 层的嵌套后最小延迟时间为<code>4ms</code>。</p>\n<p>未被激活的后台浏览器标签出于降低消耗和节省电量等原因，最小延时限制为<code>1000 ms</code>。这个设计也许会对某些场景下页面转向后台再转到前台的时候定时器异常，这种情况下我们可以使用一下功能监听页面变动：</p>\n<ul>\n<li>window.focus + window.blur</li>\n<li>visibilityChange event</li>\n</ul>\n<p>举个例子，为<code>document</code>添加<code>visibilityChange</code>事件监听,页面恢复的时候修正计时器。</p>\n<h2>2. 定时器线程和执行时机</h2>\n<p>对于浏览器来说，我们先来看看<code>chromium</code>的进程示意图：</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/128265bfc2be4ede80c06927c6e78d0b~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"\"></p>\n<p><code>定时触发器</code>线程和<code>JS</code>引擎线程是分开的，这也是我们编写的<code>定时器</code>函数并不会阻塞<code>JS</code>主线程的原因。</p>\n<p>再来看看<code>nodejs</code>事件循环示意图：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/carbon.png\" alt=\"\"></p>\n<p>我们回到这个问题： <code>Nodejs</code>端，<code>setTimeout(fn)</code>和 <code>setImmediate(fn)</code>谁先执行？</p>\n<p>首先我们要明确，<code>timers</code>定时器执行<code>setTimeout</code>和<code>setInterval</code>的回调，<code>check</code>阶段执行<code>setImmediate</code>的回调。</p>\n<p>从上述<code>Nodejs</code>事件循环流程图可以看出，<code>timers</code>和<code>check</code>二者的执行不在一个阶段。</p>\n<p>在一个异步流程里，<code>setImmediate</code>会先执行。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)\n<span class=\"lineNumber\">4</span>  }, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>  setImmediate(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setImmediate'</span>)\n<span class=\"lineNumber\">8</span>  })\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span><span class=\"hljs-built_in\">setTimeout</span>(foo)\n<span class=\"lineNumber\">11</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">12</span>setImmediate\n<span class=\"lineNumber\">13</span><span class=\"hljs-built_in\">setTimeout</span></code></pre> \n\n<p>简而言之，外层一个<code>setTimeout</code>执行的时候在<code>timers</code>阶段，内部<code>setTimeout</code>直接放到了下一个<code>timers</code>阶段，而<code>setImmediate</code>放在了当前循环的<code>check</code>尾部，因此先输出<code>setImmediate</code>。</p>\n<p>再来：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setTimeout'</span>)\n<span class=\"lineNumber\">4</span>  }, <span class=\"hljs-number\">0</span>)\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>  setImmediate(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'setImmediate'</span>)\n<span class=\"lineNumber\">8</span>  })\n<span class=\"lineNumber\">9</span>}\n<span class=\"lineNumber\">10</span>foo()</code></pre> \n\n<p>在同步流程中直接调用，二者的输出是不固定顺序的。也许首次是<code>setTimeout</code>先输出，但是再试一次就不一定了。</p>\n<p>执行同步代码的时候，二者分别加入到<code>timers</code>和<code>check</code>内，同步代码进入事件循环之后直接检查<code>timers</code>,如果同步代码在进入事件循环之前已经过去了<code>1ms（Nodejs 规定的默认值）</code>，则直接执行输出<code>setTimeout</code>，如果同步代码在进入事件循环的时候还未达到这<code>1ms</code>的回调执行条件，则会将上述<code>timeout</code>安排到下一个事件循环阶段。</p>\n<h2>3. setTimeout 和时间补偿</h2>\n<p>机缘巧合下看到一篇文章提及<code>setTimeout</code>由于主线程耗时任务的阻塞引起的延时超出预期的文章，其提出了一个利用系统时间进行动态调整延时的方法以实现尽可能准确的<code>setInterval</code>函数效果（原文放在参考部分）。</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/20210425000050.png\" alt=\"\"></p>\n<p>如图所示，阻塞代码的耗时是不可预测的，按照默认的延时参数势必导致一部分的时间差异常。</p>\n<p>利用时间补偿机制，对<code>setTimeout</code>的第二个参数进行动态修正，可以尽可能减小阻塞代码的影响。</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/20210425000950.png\" alt=\"\"></p>\n<p>实例代码如下：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">interval</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span> \t<span class=\"hljs-keyword\">const</span> speed = <span class=\"hljs-number\">500</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">const</span> start = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime();\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">instance</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">const</span> ideal = (counter * speed);\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">const</span> real = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>().getTime() - start;\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">const</span> diff = real - ideal;\n<span class=\"lineNumber\">9</span>    counter++\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">setTimeout</span>(instance, speed - diff)\n<span class=\"lineNumber\">11</span>  }\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-built_in\">setTimeout</span>(instance, speed)\n<span class=\"lineNumber\">13</span>}</code></pre> \n\n<p>这是一种有趣的想法，也许在其他特定场景下使用<code>requestAnimationFrame()</code>或者<code>web workers</code>来处理阻塞代码的问题。</p>\n<h2>参考</h2>\n<ul>\n<li>\n<p><a href=\"https://www.sitepoint.com/creating-accurate-timers-in-javascript/\">Creating Accurate Timers in JavaScript - SitePoint</a></p>\n</li>\n<li>\n<p><a href=\"https://www.tutorialrepublic.com/javascript-tutorial/javascript-timers.php\">JavaScript Timer Functions - Tutorial Republic</a></p>\n</li>\n<li>\n<p><a href=\"https://www.freecodecamp.org/news/javascript-timers-everything-you-need-to-know-5f31eaa37162/\">JavaScript Timers: Everything you need to know</a></p>\n</li>\n<li>\n<p><a href=\"https://juejin.cn/post/6844904100195205133\">setTimeout和setImmediate到底谁先执行，本文让你彻底理解Event Loop</a></p>\n</li>\n<li>\n<p><a href=\"https://mp.weixin.qq.com/s/u7jtQkWM0k_joOd5gr4VJA\">忍者秘籍：如何实现准时的setTimeout</a></p>\n</li>\n</ul>\n","title":"javascript 定时器与系统时间补偿","date":"2021/4/23","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1617108029768-c12fff3d7754?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTkxMzc5ODE&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1617108029768-c12fff3d7754?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTkxMzc5ODE&ixlib=rb-1.2.1&q=80&w=400","intro":"定时器是异步编程的众多前置知识之一，今天让我们来详细学习一下 JavaScript timer 的知识，点上这一技能点。"}},"__N_SSG":true}