{"pageProps":{"post":{"slug":"谷歌HTML-CSS代码风格指南<译>","content":"\n## 1. 背景\n\n本文档为编写`HTML`和`CSS`定义了若干代码风格和编码准则。本文的目标是为了提高代码质量和团队协作能力，并且使其支持基础建设的架构，将适用于原生的`HTML`、`CSS`甚至是`GSS`文件中。并且只要代码质量可维护，代码即可通过工具良好地进行的混淆、压缩或合并。\n\n> [Google HTML/CSS Style Guide](https://google.github.io/styleguide/htmlcssguide.html)\n\n## 2. 通用\n\n### 2.1 通用样式规则\n\n#### 2.1.1 协议\n\n嵌入式资源引用尽可能使用`HTTPS`协议\n\n总是使用`HTTPS`协议引用图片和其他媒体文件，样式表或脚本文件，除非目标文件不支持`HTTPS`协议的引用。\n\n<p style=\"text-align: center\">HTML 示例</p>\n\n```html\n<!-- 不推荐：省略协议 -->\n<script src=\"//ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n<!-- 不推荐：使用 HTTP -->\n<script src=\"http://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n\n<!-- 推荐 -->\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js\"></script>\n```\n\n<p style=\"text-align: center\">CSS 示例</p>\n\n```css\n/* 不推荐 */\n@import '//fonts.googleapis.com/css?family=Open+Sans';\n\n/* 不推荐 */\n@import 'http://fonts.googleapis.com/css?family=Open+Sans';\n\n/* 推荐 */\n@import 'https://fonts.googleapis.com/css?family=Open+Sans';\n```\n\n### 2.2 通用格式规则\n\n#### 2.2.1 缩进\n\n缩进设置为单次 2 个空格。\n\n不要混用`tab`和`空格键`。\n\n#### 2.2.2 大小写\n\n以下范围内所有代码必须小写：\n\n- `HTML` 标签及其属性、属性值（除非是文本或者 `CDATA`）\n- `CSS` 选择器及其属、属性值（字符串除外）\n\n示例如下：\n\n<p style=\"text-align: center\">HTML 示例</p>\n\n```html\n<!-- 不推荐 -->\n<A HREF=\"/\">Home</A>\n\n<!-- 推荐 -->\n<img src=\"google.png\" alt=\"Google\">\n```\n\n<p style=\"text-align: center\">CSS 示例</p>\n\n```css\n/* 不推荐 */\ncolor: #E5E5E5;\n\n/* 推荐 */\ncolor: #e5e5e5;\n```\n\n#### 2.2.3 结尾空格\n\n应移除每行结尾不必要的若干空格字符。\n\n```html\n<!-- 不推荐 -->\n<p>What?_\n\n<!-- 推荐 -->\n<p>Yes please.\n```\n\n### 2.3 元数据规则\n\n#### 2.3.1 编码\n\n使用无`BOM`的`UTF-8`编码，确保你的编辑器使用没有字节顺序标记的`UTF-8`编码格式。\n\n> 更多有关于编码的信息和怎样指定它，请查看 [Character Sets & Encodings in XHTML, HTML and CSS](http://www.w3.org/International/tutorials/tutorial-char-enc/en/all.html)。\n\n在`HTML`模板和文件中指定编码`<meta charset=\"utf-8\">`不需要指定样式表的编码，其默认为`UTF-8`。\n\n\n\n#### 2.3.2 注释\n\n尽可能添加翔实的注释。\n\n> 此规则是可选的，没有必要为每一个地方添加充分的注释，这样反而会让整体代码不够简洁，这取决于项目复杂度。\n\n用注释去解释代码：这是什么？它的目的是什么？各自的解决方案是什么，优先使用哪一个？\n\n#### 2.3.3 行动项\n\n使用`TODO`标志来标记任务或行动项。\n\n使用关键字`TODO`并且高亮关键字，或者使用其他诸如`@@`的注释格式，添加任务内容或者条目描述（用括号括起来），可以在冒号后添加条目说明：\n\n```html\n{# TODO(john.doe): revisit centering #}\n<center>Test</center>\n\n<!-- TODO: remove optional tags -->\n<ul>\n  <li>Apples</li>\n  <li>Oranges</li>\n</ul>\n```\n\n## 3. HTMl\n\n### 3.1 HTML 风格指南\n\n#### 3.1.1 文档类型\n\n使用`HTML5`。\n\n推荐为所有`HTML`文档使用`HTML5`语法编写：`<!DOCTYPE html>`。\n\n（推荐编写`text/html`类型的`HTML`。不使用`XHTML`，其媒体类型为`application/xhtml+xml`，极少数浏览器不支持，且需要更多存储空间）\n\n使用`HTML`不必为空元素写闭合标签，例如直接写：`<br>`，不要写`<br />`。\n\n#### 3.1.2 HTML 有效性\n\n尽可能使用有效的`HTML`代码，除非对文件大小有严格的性能目标而不得不缩减代码量。\n\n使用诸如[(W3C HTML validator)](https://validator.w3.org/nu/)这样的工具进行测试。\n\n使用有效的`HTML`是一个可衡量的代码质量基线，有利于了解其技术要求和约束，并且确保正确使用`HTML`。\n\n```html\n<!-- 不推荐 -->\n<title>Test</title>\n<article>This is only a test.\n\n<!-- 推荐 -->\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Test</title>\n<article>This is only a test.</article>\n```\n\n#### 3.1.3 语义化\n\n> Use elements (sometimes incorrectly called “tags”) for what they have been created for.\n\n根据其设计用途使用`HTML`元素（有时被错误地称为标签）。比如，使用标题元素`h1~h6`来展示标题，使用`p`元素来展示段落，使用`a`元素来展示超链接，诸如此类。\n\n根据`HTML`元素的设计用途来展示数据，有利于提高可访问性、可重用性和代码质量。\n\n```html\n<!-- 不推荐 -->\n<div onclick=\"goToRecommendations();\">All recommendations</div>\n\n<!-- 推荐 -->\n<a href=\"recommendations/\">All recommendations</a>\n```\n\n#### 3.1.4 多媒体备选方案\n\n为多媒体提供备选方案。\n\n对于多媒体，例如图像、视频、canvas 动画，应该确保提供替代性的内容。\n\n对于图片，应该提供有效且明确的`alt`属性值。对于音视频来说，应该提供有效的副本和文案说明。\n\n提供备选方案是很重要的，例如：盲人可以通过图片的`alt`属性值了解图片的相关内容，少数无法理解音视频内容的用户可以根据其文案去了解音视频的内容。\n\n（图像的`alt`属性会产生冗余，如果使用图像只是为了纯粹的装饰，可以写成`alt=\"\"`）\n\n```html\n<!-- 不推荐 -->\n<img src=\"spreadsheet.png\">\n\n<!-- 推荐 -->\n<img src=\"spreadsheet.png\" alt=\"Spreadsheet screenshot.\">\n```\n\n#### 3.1.5 关注点分离\n\n将结构、表现与行为分开。\n\n严格保持结构（HTML）、表现（CSS）和行为（Javascript）分离，并尽量让这三者之间的交互保持最低限度。确保文档和模板只包含`HTML`结构，把所有表现都放在样式表里 ，把所有行为都放在`Javascript`脚本里。\n\n另外，尽量减少外部链接，使样式和脚本在文档中的接触面尽可能的小。\n\n将表现和行为分开维护可以降低更改`HTML`文档结构和模板的成本。\n\n```html\n<!-- 不推荐 -->\n<!DOCTYPE html>\n<title>HTML sucks</title>\n<link rel=\"stylesheet\" href=\"base.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"grid.css\" media=\"screen\">\n<link rel=\"stylesheet\" href=\"print.css\" media=\"print\">\n<h1 style=\"font-size: 1em;\">HTML sucks</h1>\n<p>I’ve read about this on a few sites but now I’m sure:\n  <u>HTML is stupid!!1</u>\n<center>I can’t believe there’s no way to control the styling of\n  my website without doing everything all over again!</center>\n\n<!-- 推荐 -->\n<!DOCTYPE html>\n<title>My first CSS-only redesign</title>\n<link rel=\"stylesheet\" href=\"default.css\">\n<h1>My first CSS-only redesign</h1>\n<p>I’ve read about this on a few sites but today I’m actually\n  doing it: separating concerns and avoiding anything in the HTML of\n    my website that is presentational.</p>\n<p>It’s awesome!</p>\n```\n\n#### 3.1.6 实体字符\n\n不要滥用使用实体字符\n\n> 笔者对此很疑惑，实体字符的优点非常明显\n\n没有必要使用诸如：`&mdash;, &rdquo;, or &#x263a;`之类的实体字符，尽管团队里使用一致的编辑器编码（UTF-8）。\n\n在HTML文档中具有特殊含义的字符（例如 `< `和 `& `)以及 “不可见” 字符 （例如no-break空格）例外。\n\n```html\n<!-- 不推荐 -->\n欧元货币符号是 &ldquo;&eur;&rdquo;。\n<!-- 推荐 -->\n欧元货币符号是 “€”。\n```\n\n#### 3.1.7 可选标签\n\n省略可选标签（可选）。\n\n> 笔者支持必须保持可选标签\n\n如若为了优化文件大小和校验，可以考虑省略可选标签，哪些是可选标签可以参考 [HTML5 specification](http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission)。\n\n（这种处理方案可能需要更明确的规定作为指引，众多开发者具有不同看法，考虑到一致性和简洁性的原因，最好的方法是统一省略可选标签。）\n\n```html\n<!-- 不推荐 -->\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Spending money, spending bytes</title>\n  </head>\n  <body>\n    <p>Sic.</p>\n  </body>\n</html>\n<!-- 推荐 -->\n<!DOCTYPE html>\n<title>Saving money, saving bytes</title>\n<p>Qed.\n```\n\n#### 3.1.8 `type`属性\n\n在引入样式表和脚本时省略`type`属性。\n\n在样式表（除非不使用 CSS）和脚本（除非不适用 JavaScript）的标签中不添加`type`属性。\n\n没有必要指定`type`属性值为`text/css`或`text/javascript`，无论是`HTML5`还是旧版本浏览器都默认支持此属性值。\n\n```html\n<!-- 不推荐 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\"\n  type=\"text/css\">\n<!-- 推荐 -->\n<link rel=\"stylesheet\" href=\"//www.google.com/css/maia.css\">\n<!-- 不推荐 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"\n  type=\"text/javascript\"></script>\n<!-- 推荐 -->\n<script src=\"//www.google.com/js/gweb/analytics/autotrack.js\"></script>\n```\n\n### 3.2 HTML 格式规则\n\n#### 3.2.1 通用格式\n\n每一个块级元素、列表偶然表格元素都独占一行，子元素都添加缩进。\n\n独立元素的样式将块级元素、列表元素和表格元素都放在新行，如若这些元素是块级元素、列表或表格的子元素，则为之添加缩进。\n\n（如果你遇到列表项左右是空白节点的场景，可以试着将所有`li`元素放在一行。某些格式化工具会使用告警信息代替错误提示。）\n\n```html\n<blockquote>\n  <p><em>Space</em>, the final frontier.</p>\n</blockquote>\n<ul>\n  <li>Moe\n  <li>Larry\n  <li>Curly\n</ul>\n<table>\n  <thead>\n    <tr>\n      <th scope=\"col\">Income\n      <th scope=\"col\">Taxes\n  <tbody>\n    <tr>\n      <td>$ 5.00\n      <td>$ 4.50\n</table>\n```\n\n#### 3.2.2 HTML 换行\n\n长单行换行（可选）。\n\n如果没有限制行的长度，则可以考虑为了提高可读性而对过长的单行内容换行。如果换行，则至少为换行部分添加四个额外的空格作为缩进。\n\n```html\n<md-progress-circular md-mode=\"indeterminate\" class=\"md-accent\"\n    ng-show=\"ctrl.loading\" md-diameter=\"35\">\n</md-progress-circular>\n\n<md-progress-circular\n    md-mode=\"indeterminate\"\n    class=\"md-accent\"\n    ng-show=\"ctrl.loading\"\n    md-diameter=\"35\">\n</md-progress-circular>\n\n<md-progress-circular md-mode=\"indeterminate\"\n                      class=\"md-accent\"\n                      ng-show=\"ctrl.loading\"\n                      md-diameter=\"35\">\n</md-progress-circular>\n```\n\n\n\n#### 3.2.3 HTML 引号\n\n`HTML`属性值一律使用双引号。\n\n```html\n<!-- 不推荐 -->\n<a class='maia-button maia-button-secondary'>Sign in</a>\n\n<!-- 推荐 -->\n<a class=\"maia-button maia-button-secondary\">Sign in</a>\n```\n\n## 4. CSS\n\n### 4.1 CSS 样式规则\n\n#### 4.1.1 CSS 有效性\n\n尽可能地使用有效的`CSS`样式。\n\n除非是`CSS`校验程序`BUG`，或者是特殊语法，否则应编写有效的`CSS`代码。\n\n用类似[W3C CSS validator](http://jigsaw.w3.org/css-validator/) 这样的工具来进行有效性的测试。\n\n使用有效的CSS是一个可衡量的基线质量属性，如果发现有些`CSS`代码存在与否都没有影响效果，则可在确保`CSS`的用法正确性的同时删除这部分代码。\n\n#### 4.1.2 id 和 class 命名\n\n使用具有意义或具有通用性的 ID 或 class 名。\n\n保持`id`和`class`名具有目的性或通用性强，绝不使用一些直觉上可用或带有神秘感的名字。\n\n名字能反应元素的目的性或是特定的，二者是取名首选，因为这些名字易于理解且不易改动。\n\n通用名称只是简单的作为没有特殊意义的元素的起名备选方案，可以起`helpers`这类宽泛的名字。\n\n使用功能性或通用性的名字可以减少没有必要的文档改动。\n\n```css\n/* 不推荐: 无意义 不易理解 */\n#yee-1901 {}\n\n/* 不推荐: 表达不具体 */\n.button-green {}\n.clear {}\n/* 推荐: 明确详细 */\n#gallery {}\n#login {}\n.video {}\n\n/* 推荐: 通用 */\n.aux {}\n.alt {}\n```\n\n#### 4.1.3 id 和 class 命名风格\n\n`id`和`class`命名应该尽可能简短，但在必要时也可以使用长命名。\n\n`id`和`class`应简要传达其目的和相关性。\n\n使用上述方式命名`id`和`class`有利于编写高效代码，且易于理解。\n\n```css\n/* 不推荐 */\n#navigation {}\n.atr {}\n/* 推荐 */\n#nav {}\n.author {}\n```\n\n#### 4.1.4 类型选择器\n\n避免使用类型选择器限定`id`和`class`。\n\n除非必要，不使用元素标签名和`id`或`class`进行组合。\n\n出于[性能考虑](http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/)，避免使用父节点做选择器。\n\n```css\n/* 不推荐 */\nul#example {}\ndiv.error {}\n/* 推荐 */\n#example {}\n.error {}\n```\n\n#### 4.1.5 属性名简写\n\n尽可能简写属性和属性值。\n\n`CSS`提供一种简写属性值的特性（如`font`），开发者应该尽可能使用此特性编写样式，即使只是显式指定一个属性值。\n\n使用属性名简写对于代码效率和可读性有益处。\n\n```css\n/* Not recommended */\nborder-top-style: none;\nfont-family: palatino, georgia, serif;\nfont-size: 100%;\nline-height: 1.6;\npadding-bottom: 2em;\npadding-left: 1em;\npadding-right: 1em;\npadding-top: 0;\n/* Recommended */\nborder-top: 0;\nfont: 100%/1.6 palatino, georgia, serif;\npadding: 0 1em 2em;\n```\n\n#### 4.1.6 0 和 单位\n\n在属性值为`0`时，除非有必要，否则一律省略单位。\n\n```css\nflex: 0px; /* This flex-basis component requires a unit. */\nflex: 1 1 0px; /* Not ambiguous without the unit, but needed in IE11. */\nmargin: 0;\npadding: 0;\n```\n\n#### 4.1.7 0 开头小数\n\n省略`0` 开头小数点前的`0`。\n\n当值大于 -1 小于 1 的时候，省略小数点前面的 0 。\n\n```css\nfont-size: .8em;\n```\n\n\n\n#### 4.1.8 十六进制标记\n\n尽可能使用三个字符的十六进制标记。\n\n描述颜色值的时候常用，3个字符串十六进制标记更短更简明。\n\n```css\n/* 不推荐 */\ncolor: #eebbcc;\n/* 推荐 */\ncolor: #ebc;\n```\n\n\n\n#### 4.1.9 前缀\n\n选择器可以带应用特定功能性描述的前缀（可选）。\n\n在大型项目以及嵌入其他项目或外部站点的代码中，`id`和`class`可以使用前缀（作为命名空间）。前缀可以使用简短的唯一标识符加一个横线。\n\n\n\n#### 4.1.10 ID 和 Class 命名分隔符\n\n在`id`和`class`中单独的词汇应该使用`-`（短横线）连起来。\n\n> id 和 class 不区分大小写\n\n不在`id`和`class`的命名中直接合并单词，也不应使用缩写词。使用分隔符可以提高可读性，更利于查找。\n\n```css\n/* 不推荐：“demo”和“image”中间没加“-” */\n.demoimage {}\n\n/* 不推荐：用下划线“_”*/\n.error_status {}\n\n/* 推荐 */\n#video-id {}\n.ads-sample {}\n```\n\n#### 4.1.11 Hacks\n\n最好避免`CSS Hacks`，除非所有方法都尝试无果。\n\n`Hacks`可以在特殊的场景下发挥奇效，但会让这些行为过于频繁，长期下来会伤害项目的效率，不利于代码管理，所以尽可能寻找其他解决方案。\n\n### 4.2 CSS 格式化规则\n\n#### 4.2.1 声明顺序\n\n按字母顺序进行声明，易于记忆和维护。\n\n忽略浏览器的特定前缀排序顺序，但多厂商前缀应相对保持排序（例如`-moz`在`-webkit`前面）。\n\n> 浏览器前缀可以通过 `postcss`此类工具处理\n\n```css\nbackground: fuchsia;\nborder: 1px solid;\n-moz-border-radius: 4px;\n-webkit-border-radius: 4px;\nborder-radius: 4px;\ncolor: black;\ntext-align: center;\ntext-indent: 2em;\n```\n\n#### 4.2.2 代码块内容缩进\n\n所有代码块都应该保持缩进。\n\n缩进所有[代码块](http://www.w3.org/TR/CSS21/syndata.html#block)的内容，它能够提高层次结构的清晰度。\n\n```css\n@media screen, projection {\n\n  html {\n    background: #fff;\n    color: #444;\n  }\n\n}\n```\n\n#### 4.2.3 声明终止\n\n在每一个声明语句后面添加分号。\n\n每一个声明语句都添加分号可以增强一致性和可扩展性。\n\n```css\n/* 不推荐 */\n.test {\n  display: block;\n  height: 100px\n}\n/* 推荐 */\n.test {\n  display: block;\n  height: 100px;\n}\n```\n\n#### 4.2.4 属性名终止\n\n在属性名和冒号后面使用一个空格。\n\n在属性名和冒号后面加一个空格以保持一致性。\n\n```css\n/* 不推荐 */\nh3 {\n  font-weight:bold;\n}\n/* 推荐 */\nh3 {\n  font-weight: bold;\n}\n```\n\n#### 4.2.5 声明块分隔\n\n在最后一个选择器和声明块之间用一个空格分隔开。\n\n大括号的开括号部分应该和最后一个选择器在同一行。\n\n```css\n/* 不推荐：缺少空格 */\n#video{\n  margin-top: 1em;\n}\n\n/* 不推荐：选择器和开括号不在同一行 */\n#video\n{\n  margin-top: 1em;\n}\n\n/* 推荐 */\n#video {\n  margin-top: 1em;\n}\n```\n\n#### 4.2.6 选择器和声明块分隔\n\n多个选择器和声明块之间不在同一行。\n\n每一个选择器占一行。\n\n```css\n/* 不推荐 */\na:focus, a:active {\n  position: relative; top: 1px;\n}\n/* 推荐 */\nh1,\nh2,\nh3 {\n  font-weight: normal;\n  line-height: 1.2;\n}\n```\n\n#### 4.2.7 规则分行\n\n两个规则之间空一行（或者两行）。\n\n```css\nhtml {\n  background: #fff;\n}\n\nbody {\n  margin: auto;\n  width: 50%;\n}\n```\n\n#### 4.2.8 CSS 引号标记\n\n使用单引号标记属性值。\n\n`url()`内的地址不使用引号括起来。\n\n例外： 如果你需要使用`@charset`规则，则使用双引号代替单引号。\n\n```css\n/* 不推荐 */\n@import url(\"https://www.google.com/css/maia.css\");\n\nhtml {\n  font-family: \"open sans\", arial, sans-serif;\n}\n/* 推荐 */\n@import url(https://www.google.com/css/maia.css);\n\nhtml {\n  font-family: 'open sans', arial, sans-serif;\n}\n```\n\n### 4.3 CSS 元规则\n\n#### 4.3.1 节注释\n\n分组写注释（可选）\n\n如果可以，分组编写注释，注释后空一行。\n\n```css\n/* Header */\n\n#adw-header {}\n\n/* Footer */\n\n#adw-footer {}\n\n/* Gallery */\n\n.adw-gallery {}\n```\n\n## 最后想说\n\n保持一致性。\n\n如果你将要编写代码，先花几分钟看看原来的代码风格，并且尽量保持代码风格的一致性。\n\n拥有代码风格指南的重点是拥有一个通用的代码描述风格，这样人们就可以专注在你所描述的内容，而不是思考你是如何描述的。\n\n我们在这里展示了这些代码风格规则，以便于开发者们了解编码中一致性的代码风格的意义，但是自己的代码风格同样是很重要的。\n\n如果您添加到文件中的代码看起来与它周围的现有代码截然不同，那么读者在阅读它时就会失去节奏。避免这种情况。\n","title":"谷歌HTML-CSS代码风格指南<译>","date":"2021/6/2","tags":["翻译"],"mainImg":"https://images.unsplash.com/photo-1488155436641-58ef42fcc44e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjI2NDA1ODY&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1488155436641-58ef42fcc44e?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjI2NDA1ODY&ixlib=rb-1.2.1&q=80&w=400","intro":"翻译了谷歌 html/css 代码风格指南，热乎的。行了，确实看了有收获，有些是自己平时就保持的好习惯，有些是自己没注意过的细节，先这样。"}},"__N_SSG":true}