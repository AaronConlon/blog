{"pageProps":{"post":{"slug":"CSS之Grid布局","contentHtml":"<p>网格布局<code>(Grid)</code>被视为当前最强大的<code>CSS</code>布局方案。</p>\n<p>善用网格布局，可以轻松实现界面布局，并且具有现代浏览器良好的支持度。</p>\n<h2>1. 前言</h2>\n<p>我需要的布局大致如下：</p>\n<p><img src=\"https://i.loli.net/2021/06/10/GlXYwLiM4uyUIst.png\" alt=\"\"></p>\n<p>可以看到，此布局并不复杂，我们可以使用多种方式来实现它，但今天我的计划是使用<code>Grid</code>布局。</p>\n<p><code>Grid</code>布局将容器划分为“行”与“列”，产生单元格，然后指定“item”所在的单元格，因此也常被视为“二维布局”。</p>\n<h2>2. 基本概念</h2>\n<h3>2.1 容器和项目</h3>\n<p>如名所示，最外层的元素作为容器<code>(container)</code>，内部每一个最外层的元素作为一个单独的项目<code>(item)</code>。</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">main</span>></span>\n<span class=\"lineNumber\">2</span>\t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>a<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">3</span> \t<span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>b<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">section</span>></span>c<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">section</span>></span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">main</span>></span></code></pre> \n\n<p><code>Grid</code>布局针对<code>main</code>生效，<code>section</code>作为<code>item</code>，其内部元素与布局无关。</p>\n<h3>2.2 行和列</h3>\n<p><img src=\"https://i.loli.net/2021/06/10/IFci7q2pKmdLsG6.png\" alt=\"\"></p>\n<p>我想这一张图已经非常明显地使用深色体现出行<code>(row)</code>与列<code>(column)</code>的区别，行和列是有交叉的。</p>\n<h3>2.3 单元格和网格线</h3>\n<p>行列交叉的区域，我们称之为<code>Cell(单元格)</code>，如前言所示，我们将子元素放在单元格中。而深色区域，我们将之称为<code>Grid line(网格线)</code>，通常<code>n</code>行<code>m</code>列，即可产生可供布局的<code>n*m</code>个<code>Cell</code>。</p>\n<p>不要讲空白区域视为单元格，单元格始终是<code>行</code>和<code>列</code>相交产生的。</p>\n<h2>3. 容器属性和项目属性</h2>\n<p><code>Grid</code>布局属性分为定义在<code>container</code>上的<code>容器属性</code>,定义在<code>item</code>上的<code>项目属性</code>。</p>\n<h3>3.1 容器属性</h3>\n<h4>3.1.1 display</h4>\n<p>显示为<code>container</code>设置<code>display: grid</code>显示属性布局为<code>grid</code>。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">div</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>此时，<code>container</code>是一个单独的容器，默认是块级元素，也可以设置<code>display: inline-grid</code>为行内<code>Grid</code>布局，使其整体视为一个行内块级元素。</p>\n<blockquote>\n<p>网格布局将使得子项（item）的<code>float</code>、<code>display: inline-block</code>、<code>display: table-cell</code>、<code>display: vertical-align</code>、<code>display: column-*</code>等设置失效。</p>\n</blockquote>\n<h4>3.1.2 grid-template-rows 、grid-template-columns</h4>\n<p><code>grid</code>布局除了需要显示指定布局类型为<code>grid</code>外，还需要指定行和列的值。</p>\n<p><code>grid-template-rows</code>定义行高，有多少行就提供多少个值。</p>\n<p><code>grid-template-column</code>定义列宽，同样，有多少列就提供多少个值。</p>\n<p>例如，如果我们要设置一个九宫格，则分别需要三行三列：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-column</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>如此一来配上<code>item</code>(css 提供一些颜色值):</p>\n<pre><code class=\"hljs language-html\"><span class=\"lineNumber\">1</span><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">\"container\"</span>></span>\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-1\"</span>></span>1<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-2\"</span>></span>2<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-3\"</span>></span>3<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-4\"</span>></span>4<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-5\"</span>></span>5<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-6\"</span>></span>6<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-7\"</span>></span>7<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-8\"</span>></span>8<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"item item-9\"</span>></span>9<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></code></pre> \n\n<p>我们可以得到一个九宫格布局：</p>\n<p><img src=\"https://i.loli.net/2021/06/10/ACZfnmovTdDsiwk.png\" alt=\"\"></p>\n<p>除了使用<code>px</code>这样的绝对单位，也可以使用百分数，甚至可以使用<code>repeat</code>类函数简化赋值：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">33.33%</span>);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">33.33%</span>);\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>甚至是：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(<span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">40px</span> <span class=\"hljs-number\">50px</span>);\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">50px</span> <span class=\"hljs-number\">50px</span>;\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>定义了<code>100px 20px 80px 100px 20px 80px</code>，6 列宽度不一的列。</p>\n<p><img src=\"https://i.loli.net/2021/06/10/1UQYPNlAax5rodI.png\" alt=\"image-20210610012604962\"></p>\n<p>如上所示，第三行由于没有<code>item</code>，默认空白。</p>\n<p>某些场合下，我们希望容器尽可能填充每一行的<code>item</code>，可以使用<code>auto-fill</code>关键字：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fill, <span class=\"hljs-number\">100px</span>);\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p><img src=\"https://i.loli.net/2021/06/10/RkMNLhud9IpliCw.png\" alt=\"image-20210610012923160\"></p>\n<p>容器根据最大宽度进行自动列填充，此时行与列的数量是根据宽度变化的。</p>\n<p>某些场合下，我们希望动态根据片段比例对行数进行判断，次数可以使用<code>fr(fraction)</code>关键字，表示列的宽度片段，例如：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">2</span>fr <span class=\"hljs-number\">1</span>fr;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>上述示例表示，第一列宽度为整个容器宽度的<code>2/3</code>，第二列为<code>1/3</code>，一般配合绝对宽度使用可以实现很灵活的布局效果：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">150px</span> <span class=\"hljs-number\">1</span>fr <span class=\"hljs-number\">2</span>fr;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>上述示例，每一行先扣除第一列的<code>150px</code>宽度，剩下的再动态计算分配。也可以使用<code>auto</code>关键字，由浏览器决定长度。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">grid-template-columns</span>: 100<span class=\"hljs-selector-tag\">px</span> <span class=\"hljs-selector-tag\">auto</span> 100<span class=\"hljs-selector-tag\">px</span>;</code></pre> \n\n<p>网格线可以具有名字，并且可以有多个名字<code>（使用中括号括起来）</code>，方便后续复用。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: [c1] <span class=\"hljs-number\">100px</span> [c2] <span class=\"hljs-number\">100px</span> [c3] auto [c4];\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: [r1] <span class=\"hljs-number\">100px</span> [r2] <span class=\"hljs-number\">100px</span> [r3] auto [r4];\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<h4>3.1.3 gap</h4>\n<p>网格线间距属性<code>gap</code>，其属性为行和列的简写：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">gap</span>: &#x3C;row-gap> &#x3C;column-gap>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">gap</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">20px</span>;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>如果简写忽略了第二个值，则默认等于第一个值。</p>\n<h4>3.1.4 grip-template-areas</h4>\n<p>网格布局可以通过字符串，抽象画的划分不同<code>item</code>所属的区域。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attribute\">grid-template-areas</span>: <span class=\"hljs-string\">'a b c'</span>\n<span class=\"lineNumber\">6</span>                       <span class=\"hljs-string\">'d e f'</span>\n<span class=\"lineNumber\">7</span>                       <span class=\"hljs-string\">'g h i'</span>;\n<span class=\"lineNumber\">8</span>}\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-selector-class\">.area-a</span> {\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attribute\">grid-area</span>: a;\n<span class=\"lineNumber\">12</span>  ....\n<span class=\"lineNumber\">13</span>}</code></pre> \n\n<p><code>grid-template-areas</code>通过空格将不同区域分割开来，然后可以在<code>css</code>中直接使用<code>grid-area</code>属性和区域名作为值，再为标签添加类即可针对性的设置样式。</p>\n<p>不使用的区域可以使用<code>.</code>占位，可以不同<code>cell</code>具有相同的<code>area</code>名，以便于指定样式，例如：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">grid-template-areas</span>: '<span class=\"hljs-selector-tag\">a</span> . <span class=\"hljs-selector-tag\">a</span>'\n<span class=\"lineNumber\">2</span>                     '<span class=\"hljs-selector-tag\">b</span> . <span class=\"hljs-selector-tag\">b</span>'\n<span class=\"lineNumber\">3</span>                     '<span class=\"hljs-selector-tag\">c</span> . <span class=\"hljs-selector-tag\">d</span>';</code></pre> \n\n<blockquote>\n<p><code>grip-template-rows</code>可以定义子项高度，同时也可以为网格线命名，而网格线可以有多个名字。<code>grid-template-areas</code>指定区域名的时候，也默认生成了<code>areaName-start</code>和<code>areaName-end</code>这样的网格线别名。</p>\n</blockquote>\n<h4>3.1.5 grid-auto-flow</h4>\n<p>容器划分好网格后，容器内<code>item</code>按顺序放置，默认先行后列，这个顺序是可以更改的。<code>grid-auto-flow</code>就是设置这个顺序的属性，默认值为<code>row</code>,先行后列，如果需要先列后行，则设置值为<code>column</code>。</p>\n<p>当某行或者某列按次序放置子项的时候，存在剩余宽度不足的情形，如果需要可以在<code>row</code>或<code>column</code>后添加一个<code>dense</code>值，二者用空格分开，意为尽可能让子项连续密集显示，如此一来就会跳过宽度超过剩余宽度的子项，按序优先使用后续满足条件的子项。例如：</p>\n<p><img src=\"https://i.imgur.com/P3bSu2L.png\" alt=\"\"></p>\n<p>属性：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">grid-auto-flow</span>: <span class=\"hljs-selector-tag\">row</span> <span class=\"hljs-selector-tag\">dense</span>;</code></pre> \n\n<p>结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/bg2019032514-20210612221449095.png\" alt=\"\"></p>\n<p>对于某些严格需要避免中间空白的布局来说，这个属性非常有效。</p>\n<h4>3.1.6 单元格位置</h4>\n<p><code>justify-items</code>设置单元格水平布局，<code>align-items</code>设置单元格垂直布局，二者可选的值为：</p>\n<ul>\n<li>start</li>\n<li>end</li>\n<li>center</li>\n<li>Stretch （默认值，拉伸）</li>\n</ul>\n<p>如果要设置整个容器内的单元格位置，也就是将容器内所有单元格视为一个整体，其布局属性可用：</p>\n<ul>\n<li>justify-content:：整体水平对齐</li>\n<li>align-content： 整体垂直对齐</li>\n<li>place-content：此为上述两个属性的简写方式，如果忽略第二个值则采用第一个值</li>\n</ul>\n<p>这几个布局属性的值类似<code>flex</code>的布局值，分别是：</p>\n<ul>\n<li>start</li>\n<li>end</li>\n<li>center</li>\n<li>stretch（拉伸）</li>\n<li>Space-around 项目两侧间隔相等，子项之间距离两个间隔</li>\n<li>Space-between 子项之间距离相等，第一个子项和最后一个子项左边或右边没有空白，紧贴容器</li>\n<li>Space-evenly 子项左右空白距离相等</li>\n</ul>\n<h4>3.1.7 grid-auto-rows and grid-auto-columns</h4>\n<p>当<code>容器网格</code>只有三行的时候，如果需要指定某个<code>子项</code>在第五行，这时候浏览器自动<code>根据子项大小</code>创建新的网格以放置额外的子项，我们可以通过<code>grid-auto-rows</code>和<code>grid-auto-columns</code>指定自动创建的网格的高度和宽度。</p>\n<p>例如：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.container</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">display</span>: grid;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-template-rows</span>: <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">100px</span>;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attribute\">grid-auto-rows</span>: <span class=\"hljs-number\">50px</span>; \n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/bg2019032525.png\" alt=\"\"></p>\n<p>之所以<code>8</code>和<code>9</code>会占据图中的位置，是因为我们使用<code>css</code>指定其行和列的位置值：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item-8</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#d0e4a9</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-row-start</span>: <span class=\"hljs-number\">4</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-column-start</span>: <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span class=\"hljs-selector-class\">.item-9</span> {\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-number\">#4dc7ec</span>;\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attribute\">grid-row-start</span>: <span class=\"hljs-number\">5</span>;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attribute\">grid-column-start</span>: <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p>由此引出<code>grid-row-start</code>和<code>grid-column-start</code>属性，可以指定其元素的位置。</p>\n<p>除了<code>start</code>还有<code>end</code>可以指定，看示例：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">grid-column-start</span>: <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-column-end</span>: <span class=\"hljs-number\">4</span>;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>此时如果没有指定<code>grid-auto-flow: row dense;</code>,则会让布局看起来如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/bg2019032526.png\" alt=\"\"></p>\n<p>为了方便记忆，可以将网格线数字改为网格线名。</p>\n<p>这四个属性的值还可以使用<code>span</code>关键字，表示\"跨越\"，即左右边框（上下边框）之间跨越多少个网格。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">grid-column-start</span>: span <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/bg2019032528.png\" alt=\"\"></p>\n<h4>3.1.8 属性简写</h4>\n<p>此前我有翻译过<code>google html &#x26; css guide</code>文档风格指南，其中有一条建议是尽量在<code>css</code>中使用简写，我认为这是一个很好的准则。</p>\n<p><code>grid-template</code>属性是<code>grid-template-columns</code>、<code>grid-template-rows</code>和<code>grid-template-areas</code>这三个属性的合并简写形式。</p>\n<p><code>grid</code>属性是<code>grid-template-rows</code>、<code>grid-template-columns</code>、<code>grid-template-areas</code>、 <code>grid-auto-rows</code>、<code>grid-auto-columns</code>、<code>grid-auto-flow</code>这六个属性的合并简写形式。</p>\n<blockquote>\n<p>如果你喜欢简写，务必不要弄错简写的属性顺序。</p>\n</blockquote>\n<p><code>grid-column</code>属性是<code>grid-column-start</code>和<code>grid-column-end</code>的合并简写形式，<code>grid-row</code>属性是<code>grid-row-start</code>属性和<code>grid-row-end</code>的合并简写形式。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">grid-column</span>: &#x3C;start-line> / &#x3C;end-line>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-row</span>: &#x3C;start-line> / &#x3C;end-line>;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>下面是一个例子。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">grid-column</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-row</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">4</span>}\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">/* 等同于 */</span>\n<span class=\"lineNumber\">6</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-attribute\">grid-column-start</span>: <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-attribute\">grid-column-end</span>: <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attribute\">grid-row-start</span>: <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attribute\">grid-row-end</span>: <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p>上面代码中，项目<code>item-1</code>占据第一行，从第一根列线到第三根列线。</p>\n<p>这两个属性之中，也可以使用<code>span</code>关键字，表示跨越多少个网格。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#b03532</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">grid-column</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">grid-row</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">/* 等同于 */</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#b03532</span>;\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-attribute\">grid-column</span>: <span class=\"hljs-number\">1</span> / span <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attribute\">grid-row</span>: <span class=\"hljs-number\">1</span> / span <span class=\"hljs-number\">2</span>;\n<span class=\"lineNumber\">11</span>}</code></pre> \n\n<p><a href=\"https://jsbin.com/volugow/edit?html,css,output\">上面代码</a>中，项目<code>item-1</code>占据的区域，包括第一行 + 第二行、第一列 + 第二列。</p>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/bg2019032529.png\" alt=\"\"></p>\n<p><code>grid-area</code>属性还可用作<code>grid-row-start</code>、<code>grid-column-start</code>、<code>grid-row-end</code>、<code>grid-column-end</code>的合并简写形式，直接指定项目的位置。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">grid-area</span>: &#x3C;row-start> / &#x3C;column-start> / &#x3C;row-end> / &#x3C;column-end>;\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-selector-class\">.item-1</span> {\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attribute\">grid-area</span>: <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">1</span> / <span class=\"hljs-number\">3</span> / <span class=\"hljs-number\">3</span>;\n<span class=\"lineNumber\">7</span>}</code></pre> \n\n<p>效果如上图所示。</p>\n<h3>3.2 子项属性</h3>\n<p>子项和容器的属性可以拆分开来，通过诸如<code>justify-self</code>等带<code>self</code>关键字的属性控制单独的子项的样式，并且优先级高于容器上相关的样式属性。</p>\n<h4>3.2.1 justify-self 、align-self、place-self</h4>\n<p><code>justify-self</code>属性设置单元格内容的水平位置（左中右），跟<code>justify-items</code>属性的用法完全一致，但只作用于单个项目。</p>\n<p><code>align-self</code>属性设置单元格内容的垂直位置（上中下），跟<code>align-items</code>属性的用法完全一致，也是只作用于单个项目。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.item</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">justify-self</span>: start | end | center | stretch;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">align-self</span>: start | end | center | stretch;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p><code>place-self</code>属性是<code>align-self</code>属性和<code>justify-self</code>属性的合并简写形式。</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-tag\">place-self</span>: <span class=\"hljs-selector-tag\">center</span> <span class=\"hljs-selector-tag\">center</span>;</code></pre> \n\n<p>如果省略第二个值，<code>place-self</code>属性会认为这两个值相等。</p>\n<h2>参考</h2>\n<ul>\n<li><a href=\"http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html\">CSS Grid 网格布局教程 - 阮一峰的网络日志</a></li>\n</ul>\n","title":"CSS之Grid布局","date":"2021/6/10","tags":["CSS"],"mainImg":"https://images.unsplash.com/photo-1494322296366-b46227baa318?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjMyNTUyMjM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1494322296366-b46227baa318?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MjMyNTUyMjM&ixlib=rb-1.2.1&q=80&w=400","intro":"我打算使用 Grid 布局来设计我的音乐网站《岚》，所以这是一篇学习总结类的文章。"}},"__N_SSG":true}