{"pageProps":{"post":{"slug":"javascript世界:undefined和null分析","contentHtml":"<p>许多编程语言都有<code>空值</code>的概念,并使用<code>null</code>关键字表示它,表示这个变量当前并未存在指向,换句话也可以说是这个变量未初始化.</p>\n<p>但是在<code>JavaScript</code>的世界里,存在着两种<code>空值</code>的表示方法:<code>undefined</code>和<code>null</code>.本文简单描述了它们的区别以及各自适宜的使用场景.</p>\n<h1>1. Undefined vs. null</h1>\n<p>两个关键字都很常用,并且在许多场景下可以相互替换.因此,它们之间的差异是非常微妙的.</p>\n<h2>1.1 ECMAScript 关于二者的定义</h2>\n<ul>\n<li>undefined 用于未分配变量的值</li>\n<li>null 在变量未分配值的时候使用,表示故意缺少任何对象值,其值不存在.</li>\n</ul>\n<p>熟悉两个定义是合理使用<code>undefined</code>和<code>null</code>的关键.</p>\n<p>接下来将配合一些代码进行说明.</p>\n<h2>1.2 两个\"空值\"和一个错误</h2>\n<blockquote>\n<p>JavaScript 的创建者 Brendan Eich: 在 JavaScript 中具有两个\"空值\"的表示是一种设计错误.</p>\n</blockquote>\n<p>之所以不将其中之一从<code>JavaScript</code>世界中抹去,其原因是 JavaScript 遵守一个设计准则: <code>始终不破坏向前兼容性</code>.</p>\n<p>这个准则有许多好处,但是最大的坏处就是无法修复设计错误.</p>\n<h2>1.3 undefined 和 null 的历史</h2>\n<p>在<code>Java</code>的世界里,成员变量中,引用类型的变量初始化的时候默认值<code>null</code>.</p>\n<p>在<code>JavaScript</code>的世界里,每个变量可以同时包含<code>对象值</code>和<code>原始值</code>.因此,如果<code>null</code>表示对象值,其值为<code>空</code>,则JavaScript 需要一个原始值来表示一种未定义的状态值.这个<code>未定义的值(原始值)</code>就是<code>undefined</code>.</p>\n<h1>2. undefined 出现场景</h1>\n<p>如果一个变量没有被初始化,则其具有原始值<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> foo;\n<span class=\"lineNumber\">2</span>assert.equal(foo, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果一个对象的属性某个属性没有申明,则其原始值为<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {};\n<span class=\"lineNumber\">2</span>assert.equal(obj.name, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果一个函数未指定返回值,或者不存在<code>return</code>关键字,则默认返回<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{}\n<span class=\"lineNumber\">2</span>assert.equal(foo(), <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">far</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">return</span>;\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span>assert.equal(far(), <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span></code></pre> \n\n<p>如果调用函数的时候,未提供函数定义时声明的参数,并且未指定默认值的时候,参数具有原始值<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">2</span>  assert.equal(value, <span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// true</span>\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>以及<code>ES2020</code>新增的<code>Optional chaining</code>语法,默认返回值是<code>undefined</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {};\n<span class=\"lineNumber\">2</span>obj?.prop <span class=\"hljs-comment\">// undefined</span></code></pre> \n\n<blockquote>\n<p>optional chaining 中只要出现异常,一律返回 undefined.</p>\n</blockquote>\n<p>比如: <code>val?.name</code>, 无论 val 是 <code>null</code> 还是 <code>undefined</code>,都返回 undefined.</p>\n<h1>3. null 出现场景</h1>\n<p><code>Object</code>的原型也是一个对象,只是此对象的原型值为<code>null</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Object</span>.getPrototypeOf(<span class=\"hljs-built_in\">Object</span>.prototype) <span class=\"hljs-comment\">// null</span></code></pre> \n\n<p>正则表达式匹配不到结果,其值为<code>null</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>/a/.exec(<span class=\"hljs-string\">'x'</span>) <span class=\"hljs-comment\">// null</span></code></pre> \n\n<p>另外,<code>JSON</code>规范不支持值为<code>undefined</code>,如下转换将会忽略部分属性.</p>\n<blockquote>\n<p>JSON 语义中存在表示空值的<code>null</code>,不存在<code>undefined</code>这个类型.</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">JSON</span>.stringify({\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">a</span>: <span class=\"hljs-literal\">undefined</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-literal\">null</span>\n<span class=\"lineNumber\">4</span>})\n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">// {\"b\": null}</span></code></pre> \n\n<h1>4. undefined 和 null 的特殊对待方式</h1>\n<p>比如我们有一个简单函数如下:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">name=<span class=\"hljs-string\">'balabala'</span></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> name;\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span>foo(); <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">5</span>foo(<span class=\"hljs-literal\">null</span>); <span class=\"hljs-comment\">// null 传入 null,优先级高于默认值</span>\n<span class=\"lineNumber\">6</span>foo(<span class=\"hljs-literal\">undefined</span>); <span class=\"hljs-comment\">// balabala,传入 undefined 相当于传入原始值,优先级低于默认值</span></code></pre> \n\n<p>在对象解构赋值中的表现也一样:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> [a = <span class=\"hljs-string\">'a'</span>] = [];\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// a => 'a'</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> [b = <span class=\"hljs-string\">'b'</span>] = [<span class=\"hljs-literal\">undefined</span>];\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// b => 'b'</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">const</span> {<span class=\"hljs-attr\">prop</span>: c = <span class=\"hljs-string\">'c'</span>} = {}\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// c => 'c'</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">const</span> {<span class=\"hljs-attr\">prop</span>: d = <span class=\"hljs-string\">'d'</span>} = {<span class=\"hljs-attr\">prop</span>: <span class=\"hljs-literal\">undefined</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// d => 'd'</span></code></pre> \n\n<p>如果赋值为<code>null</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> [b = <span class=\"hljs-string\">'b'</span>] = [<span class=\"hljs-literal\">null</span>];\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// b => null</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> {<span class=\"hljs-attr\">prop</span>: d = <span class=\"hljs-string\">'d'</span>} = {<span class=\"hljs-attr\">prop</span>: <span class=\"hljs-literal\">null</span>}\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// d => null</span></code></pre> \n\n<p>在空值合并的操作中,<code>??</code>让我们在值为<code>null</code>或者<code>undefined</code>的时候使用默认值.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-literal\">null</span> ?? <span class=\"hljs-number\">1</span> \n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// 1</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-literal\">undefined</span> ?? <span class=\"hljs-number\">1</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">//1</span></code></pre> \n\n<p>那么在空值合并赋值时,有什么表现呢?</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">setName</span>(<span class=\"hljs-params\">obj</span>) </span>{\n<span class=\"lineNumber\">2</span>  obj.name ??= <span class=\"hljs-string\">'(Unnamed)'</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> obj.name;\n<span class=\"lineNumber\">4</span>}\n<span class=\"lineNumber\">5</span>setName({\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-literal\">null</span>\n<span class=\"lineNumber\">7</span>})\n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">// '(Unnamed)'</span>\n<span class=\"lineNumber\">9</span>  setName({\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">11</span>})\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// '(Unnamed)'</span></code></pre> \n\n<h1>5. 处理 undefined 和 null</h1>\n<p><code>undefined</code>和<code>null</code>都不用做实际值.举个🌰,如果我们希望一个属性: <code>file.title</code>始终存在,并且始终为<code>字符串</code>.</p>\n<p>我们可以用以下两种方案实现:</p>\n<h2>5.1 禁用 undefined 和 null</h2>\n<p>示例代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createFile</span>(<span class=\"hljs-params\">title</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span> (title === <span class=\"hljs-literal\">undefined</span> || title === <span class=\"hljs-literal\">null</span>) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'`title` must not be nullish'</span>);\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-comment\">// ···</span>\n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<h2>5.2 undefined 和 null 一致性处理</h2>\n<p>示例代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">createFile</span>(<span class=\"hljs-params\">title</span>) </span>{\n<span class=\"lineNumber\">2</span>  title ??= <span class=\"hljs-string\">'(Untitled)'</span>;\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// ···</span>\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<p>上述代码并未使用默认参数赋值,如果使用默认参数,则只能对<code>undefined</code>做处理.相比于禁用<code>undefined</code>和<code>null</code>,使用空值合并运算符既可以实现更好的一致性处理方案,而且代码更健壮优雅.</p>\n<h1>6. 额外总结</h1>\n<p>以下总结具有很强的主观性,望合理探讨.</p>\n<ul>\n<li>null 表示一个值被定义了,不过值是空的.设置一个值为<code>null</code> 是合理的.</li>\n<li>undefined 表示不存在的定义,设置一个值为<code>undefined</code>应该是不合理的.</li>\n<li>判断值的存在与否,使用<code>undefined</code>进行判断.</li>\n</ul>\n<h1>7. 参考</h1>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html\">undefined与null的区别 - 阮一峰的网络日志(评论更精彩)</a></li>\n<li><a href=\"https://2ality.com/2021/01/undefined-null-revisited.html#occurrences-of-null-in-the-language\"><code>undefined</code> vs. <code>null</code> revisited</a></li>\n<li><a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:typeof_null\">typeof null === \"object\" 是一个设计失误</a></li>\n</ul>\n","title":"javascript世界:undefined和null分析","date":"2021/3/3","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1614103192137-835c33cd0685?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1614103192137-835c33cd0685?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MXwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8&ixlib=rb-1.2.1&q=80&w=400","intro":"在 JavaScript 的世界里,存在着许多值得深入探讨和学习的知识,今天先来看看 undefined 和 null 的特性和对比."}},"__N_SSG":true}