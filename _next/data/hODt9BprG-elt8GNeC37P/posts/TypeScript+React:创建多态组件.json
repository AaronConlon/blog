{"pageProps":{"post":{"slug":"TypeScript+React:创建多态组件","content":"\n### 前言\n\n笔者在油管上追踪了一些技术频道，今天看到一个很值得分享的短视频，此前笔者从未写过这样的代码，甚至从未想过如何实现多态的组件。\n\n我觉得这或许会对新手朋友们👬🏻有帮助，也许吧~\n\n> [Use Typescript to Build React Polymorphic Components - YouTube](https://www.youtube.com/watch?v=2QmsueWGL1c&list=PLMLZt4pr7Aq5BiAXhNXexzH6UYLtGKhnr&index=6)\n\n这个视频考虑的还是比较少的，于是我又找了一篇文章去学习，链接我放在末尾参考处。\n\n👌🏻！今天，在这里把学到的东西分享给大家。\n\n### 抛砖引玉\n\n我们或许经常使用社区的一些 UI 框架，举个通用的示例：`<Text>`组件。\n\n```jsx\n<Text>好好吃饭</Text>\n```\n\n通常这些组件都支持我们配置一些选项属性，例如：\n\n```jsx\n<Text size=\"md\" color=\"gray-70\">好好吃饭</Text>\n```\n\n如果我们关心标签的语义化，那么势必应该不仅仅满足于将`Text`理解为这个组件是为了展示一段文本。\n\n有时候，我们希望它渲染成`h1`，有时候则希望将之渲染成 `h5`，亦或是`p`。\n\n我们可以通过添加`as`属性来让调用者灵活地选择希望渲染的标签，举个例子：\n\n```jsx\n<Text as=\"h2\" size=\"lg\" color=\"tomato-40\">多喝热水</Text>\n<Text as=\"label\" size=\"lg\" color=\"tomato-40\">多锻炼</Text>\n<Text as=\"p\" size=\"lg\" color=\"tomato-40\">下雨天</Text>\n```\n\n这个组件的实现可以这么写：\n\n```jsx\nexport const Text = ({\n  as,\n  children,\n  size = 'md',\n  color = 'gray-50',\n  ...other\n}) => {\n  // 假设我们有一个辅助函数 getClasses 能根据属性对象生成一个字符串作为类名\n  const classes = getClasses({size, color});\n  const Component = as || 'p';\n  return (\n    <>\n    \t<Component {...other} className={class}>\n      \t{children}\n    \t</Component>\n    </>\n  )\n}\n```\n\n其中的关键在于我们定义了一个`大写字母开头`的`Component`组件变量来保存我们想要渲染的标签，并且设置了一个默认值`p`作为备用。\n\n> 在 JSX 中 React 将小写字母开头的变量视为标签的名字，因此要注意使用大写字母开头。\n\n`other`则让我们的组件能保存用户传入的未知属性和值，最终传给返回的组件。比如，用户想要渲染`label`，那么我们就应该支持其传入`htmlFor`属性，这样`other`就派上用场了。\n\n那么，这时候可能就会有人问，如何防止传入不适宜的属性呢？比如，预渲染一个`p`，那么我们就应该防止用户传入`href`属性值。\n\n为了处理这个问题，我们可以使用`typescript`来写这个组件。我们可以通过`typescript`去限制传入的属性类型必须符合预期，并且通过静态检查提前发现问题，而不是让问题发生在浏览器端执行代码的时候。\n\n### 实现`Text`\n\n> Show me the code!\n\n```tsx\ninterface Props<C extends React.ElementType> {\n  /** \n  * 使用泛型提供一个 React 组件的继承类型\n  */\n  as?: C\n  children: React.ReactNode\n  size?: 'sm' | 'md' | 'lg'\n  color?: Color\n}\n\ntype TextProps<C extends React.ElementType> = Props<C> &\n\tOmit<React.ComponentPropsWithoutRef<C>, keyof Props<C>>\n\nexport const Text = <C extends React.ElementType = 'p'>({\n  as,\n  children,\n  size = 'md',\n  color = 'gray-40',\n  ...other\n}: TextProps<C>) => {\n  const classes = getClasses({ font, size, color })\n  const Component = as || 'p'\n\n  return (\n    <Component {...other} className={classes}>\n      {children}\n    </Component>\n  )\n}\n```\n\n> 上述示例中使用了 TypeScript 的泛型知识，推荐阅读：[TypeScript Generics for People Who Gave Up on Understanding Generics](https://ts.chibicode.com/generics)\n\n现在，我们实现了有效的类型检查。当我们将`as`属性值设置为`h1`的时候，泛型`C`保证在传入诸如`href`这样不存在于`h1`标签上的合法属性时会报错。\n\n> 由于继承了 React.ElementType，泛型`C`具备了基础的`Element`类型支持，当传入诸如`something`这样无效的属性时也能发现问题。\n\n这个`as`就像是一个参数，我们灵活地利用了`TypeScript`的泛型来保证类型正确。\n\n但是，下面这部分可能会让`TypeScript`掌握得不太好的朋友有点头大(没错，正是在下~）\n\n> 遇到不会的，去学习就行了！\n\n```tsx\ntype TextProps<C extends React.ElementType> = Props<C> &\n\tOmit<React.ComponentPropsWithoutRef<C>, keyof Props<C>>\n```\n\n让我们逐一拆解这段代码！\n\n首先，泛型`C`继承了`React.ElementType`让泛型具备了它的属性类型，但是这是有条件的。\n\n注意`Omit`在`TypeScript`中的语法形式为：`Omit<Type, Keys>`，其从 Type 中选择所有的属性类型，再排除`Keys`指定的类型。\n\n此外，`React.ComponentPropsWithoutRef<C>`将得到泛型`C`上的所有属性，再排除掉\n\n### 参考\n\n- [Polymorphic React Components in TypeScript | Ben Ilegbodu](https://www.benmvp.com/blog/polymorphic-react-components-typescript/)\n","title":"TypeScript+React:创建多态组件","date":"2022/2/8","tags":["React"],"mainImg":"https://images.unsplash.com/photo-1576836165612-8bc9b07e7778?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDQzMTUzNjM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1576836165612-8bc9b07e7778?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDQzMTUzNjM&ixlib=rb-1.2.1&q=80&w=400","intro":"值得你花一分钟阅读的短文，简介如何创建多态组件。"}},"__N_SSG":true}