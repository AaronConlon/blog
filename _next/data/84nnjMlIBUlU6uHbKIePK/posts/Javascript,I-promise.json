{"pageProps":{"post":{"slug":"Javascript,I-promise","contentHtml":"<p>虽然此前我已经接触过一些异步编程的概念,并且有过一定的实际运用.但是自我感觉,我对<code>JavaScript</code>异步编程的了解依然十分浅显,因此我打算再次对<code>JavaScript</code>中的异步编程进行学习和总结,然后分享出来.</p>\n<h1>2. Promise 异步</h1>\n<p><code>TC39</code>依据<code>Promise/A+</code>制定了<code>ES6 Promise</code>规范,自此<code>JavaScript</code>异步编程向前迈进了一大步,开发者们可以更好的编写异步代码以应对复杂的场景和需求.</p>\n<blockquote>\n<p>IE 浏览器不支持<code>Promise</code>,我们可以使用<code>es-promise</code>等第三方库.</p>\n</blockquote>\n<h2>2.1 promise 实例和状态转换</h2>\n<p><code>Promise</code>实例具有三种状态:</p>\n<ul>\n<li><code>pending</code>: 初始化</li>\n<li><code>fulfilled</code>: 成功</li>\n<li><code>rejected</code>: 失败</li>\n</ul>\n<blockquote>\n<p>fulfilled 和 rejected 统称<code>settled</code>.</p>\n</blockquote>\n<p>通过<code>Promise</code>构造器实例化一个<code>promise</code>的时候,其状态为<code>pending</code>.在实例化的时候传入一个函数<code>(execotor)</code>去处理状态转换逻辑.</p>\n<blockquote>\n<p>本文不会对<code>promise</code>做面面俱到的介绍,推荐阅读官方文档.</p>\n</blockquote>\n<p>首先,我们来创建一个<code>promise</code>实例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span> {\n<span class=\"lineNumber\">4</span>    resolve(value) <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">5</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">6</span>  \treject(reason) <span class=\"hljs-comment\">// failure</span>\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>})\n<span class=\"lineNumber\">9</span>promise\n<span class=\"lineNumber\">10</span>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">11</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">12</span>  })\n<span class=\"lineNumber\">13</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">14</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">15</span>  })\n<span class=\"lineNumber\">16</span>\t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =></span> {\n<span class=\"lineNumber\">17</span>  \t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">18</span>  })</code></pre> \n\n<p>传入的函数内部,可以显示按逻辑指定下一个状态.下图是<code>MDN</code>提供的<code>Promise</code>状态转移图.</p>\n<p><img src=\"https://mdn.mozillademos.org/files/8633/promises.png\" alt=\"\"></p>\n<blockquote>\n<p><code>then</code>函数可以接收不同形参的函数以实现不同的状态处理逻辑,但是我们推荐使用单参数和使用 catch 处理错误的代码风格.</p>\n</blockquote>\n<p>需要注意的是,<code>promise</code>实例的状态转换是单向的,一旦<code>settled</code>则不可逆转.</p>\n<p><code>promise</code>支持链式调用,每个<code>then</code>函数内部最后将返回一个新的<code>promise</code>实例,默认返回一个值为<code>undefined</code>,状态为<code>fulfilled</code>的<code>promise</code>实例.</p>\n<p><strong><code>Promise</code>出现之前,编写可以一次性监听所有回调函数的错误处理逻辑是困难的,<code>Promise实例</code>的实例方法<code>catch</code>能应对链式调用之前所有的<code>then</code>函数错误和显示的<code>reject</code>行为</strong>.</p>\n<p>我们可以显示地使用<code>return value</code>指定返回的<code>promise</code>对象的值.举个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>asyncFunc()\n<span class=\"lineNumber\">2</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v1</span>) </span>{\n<span class=\"lineNumber\">3</span>  \t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">4</span>  \t<span class=\"hljs-comment\">// return Promise.resolve(1)  \t</span>\n<span class=\"lineNumber\">5</span>})\n<span class=\"lineNumber\">6</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">v2</span>) </span>{\n<span class=\"lineNumber\">7</span>  \t<span class=\"hljs-built_in\">console</span>.log(v2); <span class=\"hljs-comment\">// 1</span>\n<span class=\"lineNumber\">8</span>})</code></pre> \n\n<p>除了<code>return</code>一个显示的值,在一些<code>Promise</code>相关的库源码中我们可能还会看到某些场景下返回一个<code>thenable</code>对象.</p>\n<blockquote>\n<p><code>thenable对象</code>: 任意具有<code>then</code>方法的对象.</p>\n</blockquote>\n<p>返回<code>thenable对象</code>的时候将执行其<code>then</code>方法,<code>Promise</code>实例对象也是<code>thenable对象</code>,因此在某些嵌套<code>Promise</code>的场景下,可以返回一个<code>异步函数调用</code>,就像这样:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>asyncFunc1()\n<span class=\"lineNumber\">2</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">v1</span> =></span> {\n<span class=\"lineNumber\">3</span>  \tasyncFunc2()\n<span class=\"lineNumber\">4</span>  \t\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">v2</span> =></span> {\n<span class=\"lineNumber\">5</span>      \t<span class=\"hljs-comment\">//balabala</span>\n<span class=\"lineNumber\">6</span>    })\n<span class=\"lineNumber\">7</span>})\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// 扁平化</span>\n<span class=\"lineNumber\">10</span>asyncFunc1()\n<span class=\"lineNumber\">11</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">v1</span> =></span> asyncFunc2())\n<span class=\"lineNumber\">12</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">v2</span> =></span> {\n<span class=\"lineNumber\">13</span>  \t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">14</span>})</code></pre> \n\n<h2>2.2 Promise 静态方法</h2>\n<p><code>Promise</code>类具有两个能创建一个新的实例的静态方法:</p>\n<ul>\n<li>Promise.resolve(param)</li>\n<li>Promise.reject(param)</li>\n</ul>\n<p>二者区别在于返回的<code>promise</code>实例的状态,前者为<code>fulfilled</code>,后者为<code>rejected</code>.</p>\n<p>此外,<code>Promise</code>类还有如下几个静态方法:</p>\n<ul>\n<li><code>Promise.all(iterable)</code></li>\n<li><code>Promise.race(iterable)</code></li>\n<li><code>Promise.any(iterable)</code></li>\n<li><code>Promise.allSettled(iterable)</code></li>\n</ul>\n<p>这几个静态方法各有其应用场景.</p>\n<h3>2.2.1 all</h3>\n<p>首先,<code>Promise.all(iterable)</code>方法接收一个<code>iterable</code>对象作为参数,最终返回一个<code>promise 实例</code>.</p>\n<p>首先,如果<code>iterable</code>对象是空的,则返回的结果是空数组(尽管我们基本上不会这么做).</p>\n<p>其次,如果传入的是原始数据类型则转换为<code>fulfilled</code>状态的<code>promise</code>实例,其值是原始对象.如果传入的本来就是<code>promise</code>对象,则直接按<code>promise</code>对象处理.</p>\n<p>我们通过示例代码来理解规范:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>> <span class=\"hljs-built_in\">Promise</span>.all([<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>)]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">2</span><span class=\"hljs-built_in\">Promise</span> { &#x3C;pending> }\n<span class=\"lineNumber\">3</span>> [ <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span> ]\n<span class=\"lineNumber\">4</span>> <span class=\"hljs-built_in\">Promise</span>.all([<span class=\"hljs-number\">1</span>, <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>), <span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-number\">3</span>)])\n<span class=\"lineNumber\">5</span>  \t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">6</span>  \t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(r))\n<span class=\"lineNumber\">7</span><span class=\"hljs-built_in\">Promise</span> { &#x3C;pending> }\n<span class=\"lineNumber\">8</span>> <span class=\"hljs-number\">3</span></code></pre> \n\n<p>由上可知,当可迭代对象的所有元素都是<code>fulfilled</code>状态的<code>promise 实例</code>的话,返回一个数组,数组的值是这些<code>promise 实例的值</code>.</p>\n<p>如果一旦其中之一出现<code>rejected</code>状态的<code>promise 实例</code>,则整体状态转化为<code>rejected</code>,且值为最先出现的<code>rejected</code>状态实例的值.</p>\n<p>我们可以使用<code>Promise.all</code>来执行一组异步操作,这些操作的时间花费取决于最长的那个元素,并且最终如果一切顺利,则结果的顺序是不变的.</p>\n<p><code>Promise.all()</code>方法适用于<code>合并请求</code>的场景,例如某些项目中,提交的多个数据需要调用云端接口进行数据校验,当所有数据都通过校验的时候才能执行下一步操作,来看看代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 有一个返回 promise 对象的 asyncApi 函数</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> asyncApi(value)\n<span class=\"lineNumber\">3</span><span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">4</span>  test(<span class=\"hljs-string\">'xxx'</span>),\n<span class=\"lineNumber\">5</span>  test(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">6</span>  test(<span class=\"hljs-string\">'x'</span>)\n<span class=\"lineNumber\">7</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> {\n<span class=\"lineNumber\">8</span>  results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-comment\">// balabala 你的代码逻辑</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-comment\">// 都通过了</span>\n<span class=\"lineNumber\">11</span>  })\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-comment\">// do more...</span>\n<span class=\"lineNumber\">13</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// 失败的值, balabala</span>\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(error)\n<span class=\"lineNumber\">16</span>})</code></pre> \n\n<p>如果我们想要合并检查结果,则可以稍微修改一下代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">2</span>  test(<span class=\"hljs-string\">'xxx'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err),\n<span class=\"lineNumber\">3</span>  test(<span class=\"hljs-string\">'xx'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err),\n<span class=\"lineNumber\">4</span>  test(<span class=\"hljs-string\">'x'</span>).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> err)\n<span class=\"lineNumber\">5</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> {\n<span class=\"lineNumber\">6</span>  results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// balabala 你的代码逻辑</span>\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-comment\">// 都通过了</span>\n<span class=\"lineNumber\">9</span>  })\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// do more...</span>\n<span class=\"lineNumber\">11</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-comment\">// 失败的值, balabala</span>\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(error)\n<span class=\"lineNumber\">14</span>})</code></pre> \n\n<p>如果某个<code>test函数</code>返回的<code>promise</code>状态为<code>rejected</code>,如上代码也会将错误数据作为值,<code>catch</code>函数之后返回一个<code>fulfilled</code>状态的<code>promise 新实例</code>.最终<code>results</code>数组也包含了可能出现的错误信息,我们可以操作合并的结果进行处理.</p>\n<h3>2.2.2 race</h3>\n<p><code>Promise.race(iterable)</code>如其名,类似于<code>Promise.all()</code>,接收同类型参数,一旦迭代器中某个<code>promise</code>状态转化为<code>settled</code>,立即返回此结果.</p>\n<blockquote>\n<p>传入的迭代为空的话,返回的<code>promise</code>始终<code>pending</code>.</p>\n</blockquote>\n<p><code>Promise.race()</code>非常适合做异步请求的<code>超时</code>处理.来看一个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// asyncApi() 返回 promise</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timeout</span>(<span class=\"hljs-params\">ms</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">5</span>      reject(<span class=\"hljs-string\">`timeout: <span class=\"hljs-subst\">${ms}</span> ms`</span>)\n<span class=\"lineNumber\">6</span>    }, ms)\n<span class=\"lineNumber\">7</span>  })\n<span class=\"lineNumber\">8</span>}\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-built_in\">Promise</span>.race([\n<span class=\"lineNumber\">11</span>  asyncApi(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">12</span>  timeout(<span class=\"hljs-number\">5000</span>)\n<span class=\"lineNumber\">13</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> {\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">15</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-comment\">// timeout or error</span>\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<h3>2.2.3 any</h3>\n<p><code>Promise.any(iterable)</code>是<code>Promise.all()</code>的反面,其语法无异.</p>\n<p>需要注意的是如果传入的迭代器是空的,则返回<code>rejected</code>的<code>promise </code>实例.只要有一个成功,则返回此结果.如果迭代器内的<code>promise</code>全部返回<code>rejected</code>状态,则最终返回<code>rejected</code>的<code>promise</code>实例.</p>\n<p>因此,此方法适用于验证多个异步结果中是否有<code>fulfilled</code>的<code>promise</code>实例.</p>\n<p>如果我们需要向多个数据源获取某一个数据,则可以使用此方法最快速的获取到数据,亦或者所有异步请求都失败.</p>\n<h3>2.2.4 allSettled</h3>\n<p><code>Promise.allSettled(iterable)</code>方法返回一个在所有给定的<code>promise</code>转为<code>settled</code>状态后的数组,数组元素是每一个<code>promise</code>结果.</p>\n<p>如果我们有多个互不依赖的<code>异步任务</code>,或者我们总想知道每个<code>promise</code>的结果,而不需要其中的<code>rejected</code>状态<code>promise</code>去引发<code>catch</code>,来看看<code>MDN</code>的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>);\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">'foo'</span>));\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> promises = [promise1, promise2];\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-built_in\">Promise</span>.allSettled(promises).\n<span class=\"lineNumber\">6</span>  then(<span class=\"hljs-function\">(<span class=\"hljs-params\">results</span>) =></span> results.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(result)));</code></pre> \n\n<p>输出是:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"fulfilled\"</span>, value: 3 }</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"rejected\"</span>, reason: <span class=\"hljs-string\">\"foo\"</span> }</span></code></pre> \n\n<p>如上所示,状态为<code>fulfilled</code>时,具有<code>value</code>,状态为<code>rejected</code>时,具有<code>reason</code>.</p>\n<p>还记得我们在<code>Promise.all()</code>中的迭代器返回的是<code>promise.catch(err => err)</code>吗?其实,使用<code>Promise.allSettled()</code>相对更好.</p>\n<h2>2.3 Promise 的优劣</h2>\n<p><code>Promise</code>的出现促进了<code>异步</code>编程的发展,我们可以在浏览器端和<code>node</code>端看到统一的<code>Promise</code>代码.还记得<code>callback</code>回调函数的参数约定吗?</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">param, (err, data) => {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(err) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">6</span>}</span>)</span></code></pre> \n\n<p>这种参数约定是脆弱的,开发者可以不按此约定编写回调函数,这类隐藏<code>bug</code>可能就此而生.</p>\n<p><code>Promise</code>的出现,我们必须使用其实例方法<code>then</code>和<code>catch</code>去按规范编码,否则将会出错,开发者也可以看到明显的错误提示信息.</p>\n<p>我们再来看看如下两个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// callback</span>\n<span class=\"lineNumber\">2</span>fs.readFile(name, opts?, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, string|Buffer</span>) =></span> <span class=\"hljs-keyword\">void</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// Promise</span>\n<span class=\"lineNumber\">4</span>readFilePromisified(name, opts?): <span class=\"hljs-built_in\">Promise</span>&#x3C;string | Buffer>         </code></pre> \n\n<p><code>Promise</code>方案让函数参数和回调解耦开来,所有的参数都用于此函数的输入.</p>\n<p><code>Promise</code>在处理单次异步任务的时候表现良好,但是对于多次触发的任务便显得乏力,也许我们需要学习一些<code>响应式编程</code>技术,以解决此类问题.</p>\n<p>对于<code>ES6 Promise</code>来说,缺乏两项很实用的功能:</p>\n<ul>\n<li>取消任务(在组件被删除后取消异步任务等)</li>\n<li>查阅进度(显示进度条等)</li>\n</ul>\n<p>原生<code>Promise</code>暂未支持上述两项特性,也许我们可以看看类似<code>Bluebird</code>这样的第三方库,它们实现了更多功能.</p>\n<h1>3. MyPromise</h1>\n<p>如何不借助外部库和<code>ES6 Promise</code>实现一个简单的<code>MyPromise</code>?</p>\n<p>首先,我们可以定义一个对象保存<code>Promise</code>的三种状态.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> states = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">pending</span>: <span class=\"hljs-string\">'Pending'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attr\">fulfilled</span>: <span class=\"hljs-string\">'Fulfilled'</span>,\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attr\">rejected</span>: <span class=\"hljs-string\">'Rejected'</span>\n<span class=\"lineNumber\">5</span>}</code></pre> \n\n<p>接着,我们使用<code>class</code>来定义我们的<code>MyPromise</code>:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> resolve = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-built_in\">this</span>.state = states.fulfilled\n<span class=\"lineNumber\">5</span>    }\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">const</span> reject = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">7</span>      <span class=\"hljs-built_in\">this</span>.state = states.rejected\n<span class=\"lineNumber\">8</span>    }\n<span class=\"lineNumber\">9</span>    <span class=\"hljs-built_in\">this</span>.state = states.pending <span class=\"hljs-comment\">// 默认</span>\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">11</span>      executor(resolve, reject)\n<span class=\"lineNumber\">12</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">13</span>      reject(error)\n<span class=\"lineNumber\">14</span>    }\n<span class=\"lineNumber\">15</span>  }\n<span class=\"lineNumber\">16</span>}</code></pre> \n\n<p>如此一来,我们实例化的时候传入的<code>executor</code>函数内部的错误就能被<code>catch</code>处理,并且执行<code>reject</code>函数,改变<code>MyPromise</code>的<code>state</code>.</p>\n<p>为了在调用<code>resolve</code>或者<code>reject</code>的时候能改变<code>MyPromise</code>的值,我们需要对这两个函数进行优化.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    \n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">const</span> getCallback = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n<span class=\"lineNumber\">5</span>      <span class=\"hljs-built_in\">this</span>.state = state;\n<span class=\"lineNumber\">6</span>      <span class=\"hljs-built_in\">this</span>.value = value;\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>    <span class=\"hljs-keyword\">const</span> resolve = getCallback(states.fulfilled)\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-keyword\">const</span> reject = getCallback(states.rejected)\n<span class=\"lineNumber\">11</span>    \n<span class=\"lineNumber\">12</span>    <span class=\"hljs-built_in\">this</span>.state = states.pending <span class=\"hljs-comment\">// 默认</span>\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">14</span>      executor(resolve, reject)\n<span class=\"lineNumber\">15</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">16</span>      reject(error)\n<span class=\"lineNumber\">17</span>    }\n<span class=\"lineNumber\">18</span>  }\n<span class=\"lineNumber\">19</span>}</code></pre> \n\n<p>我们使用高阶函数<code>getCallback</code>来消除重复代码,减少代码量.此时,再使用<code>resolve(value)</code>或者<code>reject(value)</code>即可修改<code>MyPromise</code>的值.</p>\n<p>此外,我们还要添加<code>resolve</code>和<code>reject</code>作为<code>MyPromise</code>的静态方法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  ...\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(value))\n<span class=\"lineNumber\">5</span>  }\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span>\t<span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">8</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, reject</span>) =></span> reject(value))\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>Ok,现在<code>new MyPromise(resolve => resolve(1))</code>等效于<code>MyPromise.resolve(1)</code>了.</p>\n<p>接着,我们来实现实例方法:<code>\"then\"</code>.我们知道,如果按常规的思路来,<code>then</code>方法取决于<code>MyPromise</code>的状态,不同的状态具有不同的值,也许需要写一堆<code>if</code>语句,如果不想要写这些<code>if</code>语句,我们可以换一种思路来为实例设置<code>then</code>方法.</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> members = {\n<span class=\"lineNumber\">4</span>      [states.fulfilled]: {\n<span class=\"lineNumber\">5</span>        <span class=\"hljs-attr\">state</span>: states.fulfilled,\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-comment\">// 链的机制</span>\n<span class=\"lineNumber\">7</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">onResolved</span> =></span> MyPromise.resolve(onResolved(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">8</span>      },\n<span class=\"lineNumber\">9</span>      [states.rejected]: {\n<span class=\"lineNumber\">10</span>        <span class=\"hljs-attr\">state</span>: states.rejected,\n<span class=\"lineNumber\">11</span>        <span class=\"hljs-comment\">// rejected 状态直接忽略返回即可</span>\n<span class=\"lineNumber\">12</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">_</span> =></span> <span class=\"hljs-built_in\">this</span>\n<span class=\"lineNumber\">13</span>      },\n<span class=\"lineNumber\">14</span>      [states.pending]: {\n<span class=\"lineNumber\">15</span>        <span class=\"hljs-attr\">state</span>: states.pending        \n<span class=\"lineNumber\">16</span>      },\n<span class=\"lineNumber\">17</span>    };\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-comment\">// 修改状态,添加 then 实例方法</span>\n<span class=\"lineNumber\">19</span>    <span class=\"hljs-keyword\">const</span> changeState = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-built_in\">Object</span>.assign(<span class=\"hljs-built_in\">this</span>, members[state]);\n<span class=\"lineNumber\">20</span>    <span class=\"hljs-comment\">// getCallback</span>\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-keyword\">const</span> getCallback = <span class=\"hljs-function\"><span class=\"hljs-params\">state</span> =></span> <span class=\"hljs-function\"><span class=\"hljs-params\">value</span> =></span> {\n<span class=\"lineNumber\">22</span>      <span class=\"hljs-built_in\">this</span>.state = state;\n<span class=\"lineNumber\">23</span>      <span class=\"hljs-built_in\">this</span>.value = value;\n<span class=\"lineNumber\">24</span>    }\n<span class=\"lineNumber\">25</span> \n<span class=\"lineNumber\">26</span>    <span class=\"hljs-keyword\">const</span> resolve = getCallback(states.fulfilled)\n<span class=\"lineNumber\">27</span>    <span class=\"hljs-keyword\">const</span> reject = getCallback(states.rejected)\n<span class=\"lineNumber\">28</span>    <span class=\"hljs-comment\">// 初始化状态, 我们通过对象复制的方法修改了状态</span>\n<span class=\"lineNumber\">29</span>    changeState(states.pending);\n<span class=\"lineNumber\">30</span>    <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">31</span>      executor(resolve, reject)\n<span class=\"lineNumber\">32</span>    } <span class=\"hljs-keyword\">catch</span> (error) {\n<span class=\"lineNumber\">33</span>      reject(error)\n<span class=\"lineNumber\">34</span>    }\n<span class=\"lineNumber\">35</span>  }\n<span class=\"lineNumber\">36</span>  \n<span class=\"lineNumber\">37</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">resolve</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">38</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(value))\n<span class=\"lineNumber\">39</span>  }\n<span class=\"lineNumber\">40</span> \n<span class=\"lineNumber\">41</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">reject</span>(<span class=\"hljs-params\">value</span>)</span> {\n<span class=\"lineNumber\">42</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, reject</span>) =></span> reject(value))\n<span class=\"lineNumber\">43</span>  }\n<span class=\"lineNumber\">44</span>}</code></pre> \n\n<p>如上,我们初步实现了<code>then</code>实例方法.但是,如果传入<code>then</code>的方法出现异常,依然需要做特殊处理才能得到一个<code>rejected</code>的<code>promise</code>.</p>\n<p>举个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>MyPromise.resolve(<span class=\"hljs-number\">1</span>).then(<span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>());</code></pre> \n\n<p>按规范来看,我们需要返回的是一个<code>rejected</code>的<code>promise</code>.而不是引发异常.</p>\n<p>既然我们已经支持实例化传入的<code>executor</code>中的异常能够被<code>catch</code>,并且能处理好状态和值,或许我们可以按这个思路寻找解决方案.</p>\n<p>不妨修改一下<code>fulfilled</code>的<code>then</code>逻辑:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">MyPromise</span> </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">executor</span>)</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> members = {\n<span class=\"lineNumber\">4</span>      [states.fulfilled]: {\n<span class=\"lineNumber\">5</span>        ...\n<span class=\"lineNumber\">6</span>        <span class=\"hljs-attr\">then</span>: <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =></span> MyPromise.try(<span class=\"hljs-function\">() =></span> callback(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">7</span>    }\n<span class=\"lineNumber\">8</span>    ...\n<span class=\"lineNumber\">9</span>  }\n<span class=\"lineNumber\">10</span>  ...\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-function\"><span class=\"hljs-title\">try</span>(<span class=\"hljs-params\">callback</span>)</span> {\n<span class=\"lineNumber\">12</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> MyPromise(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> resolve(callback()))\n<span class=\"lineNumber\">13</span>  }\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>我们通过一个<code>try</code>函数,得到一个全新的<code>Promise</code>实例.其值和状态应该取决于<code>callback</code>函数的返回值.</p>\n<p>由于我们已经支持实例化参数即使异常依然可以得到具有预期的状态和值的<code>MyPromise</code>实例,因此我们可以将麻烦的<code>then</code>函数参数作为<code>callback</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// callback 函数将使用 this.value 作为参数传递下去</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> tryCall = <span class=\"hljs-function\"><span class=\"hljs-params\">callback</span> =></span> MyPromise.try(<span class=\"hljs-function\">() =></span> callback(<span class=\"hljs-built_in\">this</span>.value))\n<span class=\"lineNumber\">3</span><span class=\"hljs-attr\">then</span>: tryCall</code></pre> \n\n<p>如果我们传入<code>then</code>的<code>reactions()</code>通过<code>try</code>函数去创建一个新的<code>promise</code>实例,就能保证异常可以被内部<code>catch</code>处理了.</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"chrome-extension://bocbaocobfecmglnmeaeppambideimao/pdf/viewer.html?file=file%3A%2F%2F%2FUsers%2Fyi%2FDesktop%2Fexploring-es6.pdf\">Exploring ES6 - exploring-es6.pdf</a></li>\n<li><a href=\"https://www.ruanyifeng.com/blog/2014/10/event-loop.html\">JavaScript 运行机制详解：再谈Event Loop - 阮一峰的网络日志</a></li>\n<li><a href=\"https://notes.forkai.com/2017/11/06/javascript%E8%BF%9B%E9%98%B601%EF%BC%9A%E5%BC%82%E6%AD%A51-%E4%BA%8B%E4%BB%B6%E7%9B%91%E5%90%AC%E5%92%8C%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/\">JavaScript进阶01：异步1-事件监听和回调函数 | forkai's Notes</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2069763/difference-between-event-handlers-and-callbacks\">architecture - Difference between event handlers and callbacks - Stack Overflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick\">javascript - addEventListener vs onclick - Stack Overflow</a></li>\n<li><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Getting Started | bluebird</a></li>\n<li><a href=\"https://hackernoon.com/implementing-javascript-promise-in-70-lines-of-code-b3592565af0f\">Implementing JavaScript Promise in 70 lines of code! | Hacker Noon</a></li>\n</ul>\n","title":"Javascript,I promise - 异步编程","date":"2021/4/9","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=400","intro":"Promise, JavaScript 世界中的异步处理对象.我阅读了 Dr.Axel 前辈的电子书,充满感激."}},"__N_SSG":true}