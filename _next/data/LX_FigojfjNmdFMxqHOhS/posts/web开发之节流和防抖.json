{"pageProps":{"post":{"slug":"web开发之节流和防抖","content":"\n### 前言\n\n如果我们在一些被频繁触发的事件里使用防抖和节流的机制，就可以降低 DOM 的操作次数，防止卡顿，甚至是节省流量，降低服务器压力。\n\n比如：window 对象的 `resize`、`scroll`事件，这些事件的执行次数非常多，我们没有必要高频地调用执行函数。在这些问题上，防抖`debounce`和节流`throttle`的思路非常有用。\n\n### 防抖 Debounce\n\n触发动作若干毫秒之后，执行此回调函数。如果在执行前再次触发动作，则取消上一个延时任务，重置延时时间等待若干毫秒之后再次执行回调函数。\n\n如此一来，频率超高的操作触发的动作将会减少回调函数的执行次数。\n\n以下是一个简单的实现：\n\n```js\nconst debounce = (fn, wait = 0) => {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function')\n  }\n  let id;\n  return function () {\n    let ctx = this,args = arguments;\n    clearTimeout(id);\n    id = setTimeout(function() {\n      fn.apply(this, args);\n    },wait)\n  }\n}\n```\n\n### 节流 throttle\n\n所谓节流，可以理解为在指定的时间内只允许执行一次回调函数。\n\n例如，我们不希望用户反复点击某个按钮导致回调函数反复执行。\n\n```js\nconst throttle = (fn, wait = 0) => {\n  if (typeof fn !== 'function') {\n    throw new TypeError('Expected a function')\n  }\n  let last = 0;\n  return function() {\n\t\t// +new Date() equal to new Date().getTime()\n    const cur = +new Date();\n    if(cur - last > wait) {\n      fn.apply(this, arguments);\n      last = cur;\n    } \n  }\n}\n```\n\n### Lodash\n\n上述两个简单实现可以让我们对`debounce`和`throttle`有一个初步的理解，但是不可否认的是这两个实现非常简陋，让我们来看看`Lodash`是如何实现这两个方法的。\n\n#### throttle\n\n源代码如下：\n\n```js\nfunction throttle(func, wait, options) {\n  let leading = true\n  let trailing = true\n\n  if (typeof func !== 'function') {\n    throw new TypeError('Expected a function')\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading\n    trailing = 'trailing' in options ? !!options.trailing : trailing\n  }\n  return debounce(func, wait, {\n    leading,\n    trailing,\n    'maxWait': wait\n  })\n}\n\nexport default throttle\n```\n\n节流函数引用了防抖函数的功能，此外开头便增加了两个变量来控制在节流之前和之后是否执行回调函数的功能，我们重点来看防抖的实现。\n\n\n\n#### debounce\n\n这里不摘录其源码，因为源码有 200 多行，有兴趣的朋友可以去 github 看看，地址是：[lodash/debounce.js at master · lodash/lodash](https://github.com/lodash/lodash/blob/master/debounce.js)！\n\n其函数`\"签名\"`是：`function debounce(func, wait, options)`，分别是回调函数，等待时间和其他选项。\n\n官方文档说明如下：\n\n>创建一个 debounced（防抖动）函数，该函数会从上一次被调用后，延迟 `wait` 毫秒后调用 `func` 方法。 debounced（防抖动）函数提供一个 `cancel` 方法取消延迟的函数调用以及 `flush` 方法立即调用。 可以提供一个 options（选项） 对象决定如何调用 `func` 方法，`options.leading` 与|或 `options.trailing` 决定延迟前后如何触发（注：是 先调用后等待 还是 先等待后调用）。 `func` 调用时会传入最后一次提供给 debounced（防抖动）函数 的参数。 后续调用的 debounced（防抖动）函数返回是最后一次 `func` 调用的结果。\n\n由此可以看出，相比于我们的简陋实现，`lodash`还返回了`cancel`和`flush`函数，让我们可以更灵活地处理逻辑问题。\n\n更多细节，我找到了一篇非常好的文章，最后分享给大家。哎，作者的时序图实在是太 6 了，一图胜千言！\n\n### 参考\n\n- [lodash源代码解析—— debounce & throttle - 掘金](https://juejin.cn/post/6934149265153343496)\n\n","title":"web开发之节流和防抖","date":"2022/1/9","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1602345397613-0934a8812d23?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDE3MjM0NDQ&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1602345397613-0934a8812d23?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2NDE3MjM0NDQ&ixlib=rb-1.2.1&q=80&w=400","intro":"节流和防抖的概念在日常的 web 开发中非常有用，可以有效提高效率和减少不必要的额外操作。"}},"__N_SSG":true}