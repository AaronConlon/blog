{"pageProps":{"post":{"slug":"Sass浅解","contentHtml":"<h1>前言</h1>\n<p>时至今日，<code>Sass</code>已经可以视为一门编程语言了。笔者目前对 sass 编写样式表一知半解，在写手头的项目时十分不顺，效率低下，因此打算花两个小时重学 sass。</p>\n<p>某种意义上而言本文仅仅是笔者对于文档的学习和思索，更好的学习方法依然是阅读文档，但是于我于有兴趣阅读此文的朋友而言都一样，我都希望我们能够有所得。</p>\n<h1>大纲</h1>\n<ul>\n<li>语法</li>\n<li>样式规则</li>\n<li>变量</li>\n<li>操作</li>\n<li>模块</li>\n<li>断点和混入</li>\n</ul>\n<h2>语法</h2>\n<h3>基础</h3>\n<p>sass 支持两种语法，二者可以互相载入，分别是：</p>\n<ul>\n<li>scss</li>\n<li>sass</li>\n</ul>\n<p>二者的区别从扩展名开始，<code>scss</code>对<code>css</code>的兼容性是最好的，几乎所有的<code>css</code>都是有效的<code>scss</code>写法（除了错误的语法被忽略的那部分），正因如此，此语法广受推崇。</p>\n<blockquote>\n<p>当你 copy 一段让人拍案叫绝的代码到自己的样式表中时，你什么都不需要做</p>\n</blockquote>\n<p>笔者喜欢<code>.sass</code>第二种语法，本文内容建议使用<code>.sass</code>来理解。笔者很懒，<code>.sass</code>可以少写些许花括号和分号，唯一需要注意的是<code>.sass</code>对缩进的写法非常严格，不过这不是什么大问题。</p>\n<h3>解析样式表</h3>\n<blockquote>\n<p>A Sass stylesheet is parsed from a sequence of Unicode code points. It's parsed directly, without first being converted to a token stream.</p>\n</blockquote>\n<p><code>sass</code>需要通过编译器去编译成<code>css</code>，流行的编译器如下：</p>\n<ul>\n<li>Dart Sass</li>\n<li>LibSass</li>\n<li>Ruby Sass</li>\n</ul>\n<p>通常我们写样式都用不上除了英文和数字外的字符，上述编译器<code>Dart Sass</code>只支持<code>UTF-8</code>字符，只有当我们需要用超过<code>UTF-8</code>字符集的字符来写样式时，才需要考虑不使用<code>Dart Sass</code>。</p>\n<p>当编译器遇到无效的语法时，解析会失败并且提供错误信息以便开发者修正错误语法。</p>\n<h3>样式表结构</h3>\n<p>除了和<code>css</code>类似的样式属性声明外，<code>sass</code>还支持许多增强型特性。</p>\n<p><code>sass</code>由一系列的语句块组成，语句块之间可以嵌套其他语句块。</p>\n<h4>语句</h4>\n<p>我们可以将语句分为四种：</p>\n<ul>\n<li>css 语句\n<ul>\n<li>样式规则</li>\n<li>css @规则，例如 <code>@media</code></li>\n<li>Mixin</li>\n<li>@at-root</li>\n</ul>\n</li>\n<li>普通语句\n<ul>\n<li>变量声明 <code>$var: value</code></li>\n<li>流程控制 <code>@if</code></li>\n<li>规则控制 <code>@error</code>、<code>@debug</code>等</li>\n</ul>\n</li>\n<li>顶层语句(样式表顶层或嵌套的 css 顶层)\n<ul>\n<li>文件引入 <code>@import</code></li>\n<li>混入 <code>@minxin</code></li>\n<li>函数定义 <code>@function</code></li>\n</ul>\n</li>\n<li>其他语句\n<ul>\n<li><code>@extend</code>语句写在样式属性中</li>\n</ul>\n</li>\n</ul>\n<p>前者易于理解，跟<code>css</code>更为接近。后者形如则是<code>sass</code>的核心，有了这些才撑起了整体结构。</p>\n<p>即使对上述词汇了解不多也不需要担心，接下来逐一拆解学习。</p>\n<h4>表达式</h4>\n<p>表达式语法即<code>SassScript</code>。</p>\n<p>表达式位于属性或变量声明的右侧，表达式产生一个<code>值</code>。显然，任意有效的<code>css</code>值都可以理解为<code>sass</code>的表达式。</p>\n<p>在<code>sass</code>中，表达式用于传给<code>mixin</code>或<code>function</code>,亦或配合<code>@if</code>控制流，甚至进行<code>算术运算</code>。</p>\n<p>最简单的表达式只表示静态的值，例如：</p>\n<ul>\n<li>Numbers: 100px</li>\n<li>String: \"bolder\"</li>\n<li>Colors: #eee</li>\n<li>Booleans: true or false</li>\n<li>Lists: 1px 2px 0 1px</li>\n<li>Maps: 键值对映射，例如<code>(\"color\": red, \"font-size\": 12px)</code></li>\n</ul>\n<p>其他表达式：</p>\n<ul>\n<li>变量<code>$var</code></li>\n<li>函数调用<code>var(--color-bg-1)</code></li>\n<li>特殊函数<code>calc(1px + 100%)</code>或<code>url(...)</code></li>\n<li>父选择器 <code>&#x26;</code></li>\n<li><code>!important</code></li>\n</ul>\n<h3>操作符</h3>\n<p><code>sass</code>支持许多操作符语法：</p>\n<ul>\n<li><code>== or !=</code>比较值</li>\n<li><code>+ - * / % </code>数学计算</li>\n<li><code>&#x3C; &#x3C;= > >=</code>逻辑判断</li>\n<li><code>and or not</code>布尔值判断</li>\n<li><code>+ - /</code>字符串拼接</li>\n<li><code>()</code>优先级控制</li>\n</ul>\n<h3>注释</h3>\n<p><code>sass</code>是编程语言，有注释很正常。</p>\n<p>在 <code>scss</code> 中写注释，可以这样写：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 这个注释不会出现在CSS中</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">/* 这个将会出现在CSS中，压缩模式下不会有 */</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-comment\">/* CSS中显示插值的计算结果\n<span class=\"lineNumber\">6</span> * 1 + 1 = #{1 + 1} */</span>\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span class=\"hljs-comment\">/*! 在压缩模式下也会显示 */</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-selector-tag\">p</span> <span class=\"hljs-comment\">/* 多行注释可以写在任何允许 */</span>\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-comment\">/* 使用空格的地方。 */</span> <span class=\"hljs-selector-class\">.sans</span> {\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-attribute\">font</span>: Helvetica, // 单行注释也是\n<span class=\"lineNumber\">13</span>        sans-serif;\n<span class=\"lineNumber\">14</span>}\n<span class=\"lineNumber\">15</span> \n<span class=\"lineNumber\">16</span></code></pre> \n\n<p>回到正题，在<code>sass</code>中更简洁：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">//  这个注释不会出现在CSS中</span>\n<span class=\"lineNumber\">2</span>    这个也被注释掉了\n<span class=\"lineNumber\">3</span> \n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">/*  这个将会出现在CSS中，压缩模式下不会有\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>/*  CSS中显示插值的计算结果\n<span class=\"lineNumber\">7</span> *  1 + 1 = #{1 + 1}\n<span class=\"lineNumber\">8</span> \n<span class=\"lineNumber\">9</span>/*! 在压缩模式下也会显示\n<span class=\"lineNumber\">10</span> \n<span class=\"lineNumber\">11</span>p .sans\n<span class=\"lineNumber\">12</span>  font: Helvetica, /* 内联注释必须是闭合的 */</span> sans-serif</code></pre> \n\n<blockquote>\n<p>当你打算编写样式库时，可以在文档的最上方使用三斜杠<code>///</code>来开头编写文档，最终<code>SassDoc</code>等工具可以读取并且生成美观的文档。</p>\n</blockquote>\n<h3>特殊函数</h3>\n<p>此前在表达式处提及特殊函数，在此重申之。</p>\n<p><code>url()</code>是<code>css</code>中常用的函数，在<code>sass</code>中需要用特殊的逻辑来解析它。简单来看，可以按<code>css</code>规则来调用，也可以使用<code>sass</code>变量或函数调用最后的值来解析。举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-variable\">$roboto-font-path</span>: <span class=\"hljs-string\">\"../fonts/roboto\"</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>@font-face\n<span class=\"lineNumber\">4</span>    // This is parsed as a normal function call that takes a quoted string.\n<span class=\"lineNumber\">5</span>    src: url(<span class=\"hljs-string\">\"#{$roboto-font-path}/Roboto-Thin.woff2\"</span>) format(<span class=\"hljs-string\">\"woff2\"</span>)\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span>    font-family: <span class=\"hljs-string\">\"Roboto\"</span>\n<span class=\"lineNumber\">8</span>    font-weight: <span class=\"hljs-number\">100</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>\n<span class=\"lineNumber\">11</span>@font-face\n<span class=\"lineNumber\">12</span>    // This is parsed as a normal function call that takes an arithmetic\n<span class=\"lineNumber\">13</span>    // expression.\n<span class=\"lineNumber\">14</span>    src: url(<span class=\"hljs-variable\">$roboto-font-path</span> + <span class=\"hljs-string\">\"/Roboto-Light.woff2\"</span>) format(<span class=\"hljs-string\">\"woff2\"</span>)\n<span class=\"lineNumber\">15</span> \n<span class=\"lineNumber\">16</span>    font-family: <span class=\"hljs-string\">\"Roboto\"</span>\n<span class=\"lineNumber\">17</span>    font-weight: <span class=\"hljs-number\">300</span></code></pre> \n\n<p>此外，还有其他的特殊函数：</p>\n<p>css 中的**calc()**跟<code>sass</code>算法冲突，总之一句话，除了<code>sass</code>插值用于动态注入值之外，其他内容都作为原生<code>css</code>内容解析。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.logo</span>\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-variable\">$width</span>: <span class=\"hljs-number\">800px</span>\n<span class=\"lineNumber\">3</span>  width: <span class=\"hljs-variable\">$width</span>\n<span class=\"lineNumber\">4</span>  position: absolute\n<span class=\"lineNumber\">5</span>  left: calc(<span class=\"hljs-number\">50%</span> - #{<span class=\"hljs-variable\">$width</span> / <span class=\"hljs-number\">2</span>})\n<span class=\"lineNumber\">6</span>  top: <span class=\"hljs-number\">0</span></code></pre> \n\n<p>Sass 中的<code>min()和 max()</code>二者在<code>css</code>支持之前就实现了，当这类特殊函数中不包含除了插值之外的任何<code>SassScript</code>的特性时，解析为<code>css</code>原生函数。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-variable\">$padding</span>: <span class=\"hljs-number\">12px</span>\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>.post\n<span class=\"lineNumber\">4</span>  // Since these max() calls don<span class=\"hljs-string\">'t use any Sass features other than\n<span class=\"lineNumber\">5</span>  // interpolation, they'</span>re compiled to CSS max() calls.\n<span class=\"lineNumber\">6</span>  // 插值和原生的 env 函数\n<span class=\"lineNumber\">7</span>  padding-left: max(#{<span class=\"hljs-variable\">$padding</span>}, env(safe-area-inset-left))\n<span class=\"lineNumber\">8</span>  padding-right: max(#{<span class=\"hljs-variable\">$padding</span>}, env(safe-area-inset-right))\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>\n<span class=\"lineNumber\">11</span>.sidebar\n<span class=\"lineNumber\">12</span>  // Since these refer to a Sass variable without interpolation, they call\n<span class=\"lineNumber\">13</span>  // Sass<span class=\"hljs-string\">'s built-in max() function.\n<span class=\"lineNumber\">14</span>  // 变量属于 SassScript\n<span class=\"lineNumber\">15</span>  padding-left: max($padding, 20px)\n<span class=\"lineNumber\">16</span>  padding-right: max($padding, 20px)</span></code></pre> \n\n<p>除此之外，还有众多内建函数，我们在配合相关知识点时候再总结。</p>\n<h2>变量</h2>\n<p><code>$&#x3C;variable>:&#x3C;expression> </code>即变量定义，使用<code>$</code>开头进行定义，表达式求值。</p>\n<blockquote>\n<p>Sass 标识符和变量名都将连字符<code>-</code>和下划线<code>_</code>视为相同的字符。</p>\n</blockquote>\n<p>任何地方都可以申明变量，<code>sass</code>的变量会被编译，因此一次只能有一个值，可以重新定义同名的变量，使用新值覆盖旧值，再使用新的变量和值，整个过程是命令式的。</p>\n<p>在开发<code>sass</code>库时可以使用<code>!default</code>来编写变量默认值，普通开发者则无需关心。</p>\n<p>举例：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// _library.sass</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-variable\">$black</span>: <span class=\"hljs-number\">#000</span> !default\n<span class=\"lineNumber\">3</span><span class=\"hljs-variable\">$border-radius</span>: <span class=\"hljs-number\">0.25rem</span> !default\n<span class=\"lineNumber\">4</span><span class=\"hljs-variable\">$box-shadow</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">0.5rem</span> <span class=\"hljs-number\">1rem</span> rgba(<span class=\"hljs-variable\">$black</span>, <span class=\"hljs-number\">0.15</span>) !default\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span>code\n<span class=\"lineNumber\">7</span>  border-radius: <span class=\"hljs-variable\">$border-radius</span>\n<span class=\"lineNumber\">8</span>  box-shadow: <span class=\"hljs-variable\">$box-shadow</span></code></pre> \n\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// style.sass</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-variable\">$black</span>: <span class=\"hljs-number\">#222</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-variable\">$border-radius</span>: <span class=\"hljs-number\">0.1rem</span>\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span>@import <span class=\"hljs-string\">'library'</span></code></pre> \n\n<p>显然，我们在使用他人开发的库时，可以预先定义一些变量来个性化样式表。库的开发者也可以用默认样式兜底。</p>\n<p>既然有变量，当然也有<code>变量作用域</code>。</p>\n<p>一个<code>sass</code>文件顶层声明的变量是整个文件全局可访问的，并且当这个文件被其他文件引入时，顶层的变量将被共享。</p>\n<p>在块中声明的变量却是本地可用的，在当前块内可用，当块内变量和全局变量同名时，在块内的优先级更高。</p>\n<p>但是依然有办法灵活应用规则，举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-variable\">$variable</span>: first global value;\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-selector-class\">.content</span> {\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-variable\">$variable</span>: second global value !global;\n<span class=\"lineNumber\">5</span>  value: <span class=\"hljs-variable\">$variable</span>;\n<span class=\"lineNumber\">6</span>}\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span><span class=\"hljs-selector-class\">.sidebar</span> {\n<span class=\"lineNumber\">9</span>  value: <span class=\"hljs-variable\">$variable</span>;\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>使用<code>!global</code>标志可以显式指定此变量为全局变量。</p>\n<p>另外，在<code>流程控制</code>中声明的变量具有特殊的作用域，并且流程控制内只能<code>给外部存在的变量赋值</code>，而不能声明新的变量。</p>\n<p>举个<code>scss</code>的例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-variable\">$dark-theme</span>: true !default;\n<span class=\"lineNumber\">2</span><span class=\"hljs-variable\">$primary-color</span>: <span class=\"hljs-number\">#f8bbd0</span> !default;\n<span class=\"lineNumber\">3</span><span class=\"hljs-variable\">$accent-color</span>: <span class=\"hljs-number\">#6a1b9a</span> !default;\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">@if</span> <span class=\"hljs-variable\">$dark-theme</span> {\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-variable\">$primary-color</span>: darken(<span class=\"hljs-variable\">$primary-color</span>, <span class=\"hljs-number\">60%</span>);\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-variable\">$accent-color</span>: lighten(<span class=\"hljs-variable\">$accent-color</span>, <span class=\"hljs-number\">60%</span>);\n<span class=\"lineNumber\">8</span>}\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-selector-class\">.button</span> {\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-attribute\">background-color</span>: <span class=\"hljs-variable\">$primary-color</span>;\n<span class=\"lineNumber\">12</span>  <span class=\"hljs-attribute\">border</span>: <span class=\"hljs-number\">1px</span> solid <span class=\"hljs-variable\">$accent-color</span>;\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-attribute\">border-radius</span>: <span class=\"hljs-number\">3px</span>;\n<span class=\"lineNumber\">14</span>}</code></pre> \n\n<p>引入此库的其他文件可以自定义暗色主题来控制当前样式的结果。</p>\n<p>还有一个问题，如何判断变量是否存在？<code>sass</code>提供了以下函数：</p>\n<ul>\n<li>Variable-exists()</li>\n<li>Global-variable-exists()</li>\n</ul>\n<p>二者分别判断当前作用域内变量和全局变量。</p>\n<h2>插值</h2>\n<p>只要我们需要将表达式的结果嵌入到<code>css</code>块中去，就可以使用<code>#{}</code>包装的表达式，这种语法被称为插值。</p>\n<p>我们可以在任何地方使用插值，插值就像表达式替换。<code>sass</code>以一种直白的方式来让插值生效，举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">@mixin</span> corner-icon(<span class=\"hljs-variable\">$name</span>, <span class=\"hljs-variable\">$top-or-bottom</span>, <span class=\"hljs-variable\">$left-or-right</span>)\n<span class=\"lineNumber\">2</span>  .icon-#{<span class=\"hljs-variable\">$name</span>}\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-attribute\">background-image</span>: url(<span class=\"hljs-string\">\"/icons/#{$name}.svg\"</span>)\n<span class=\"lineNumber\">4</span>    position: absolute\n<span class=\"lineNumber\">5</span>    #{<span class=\"hljs-variable\">$top-or-bottom</span>}: <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">6</span>    #{<span class=\"hljs-variable\">$left-or-right</span>}: <span class=\"hljs-number\">0</span>\n<span class=\"lineNumber\">7</span> \n<span class=\"lineNumber\">8</span>@include corner-icon(<span class=\"hljs-string\">\"mail\"</span>, top, right)</code></pre> \n\n<p>先不论<code>mixin</code>和<code>include</code>是什么，无论你传入什么值过去，编译后将直接在原位置进行替换：</p>\n<pre><code class=\"hljs language-css\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.icon-mail</span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">background-image</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">\"/icons/mail.svg\"</span>);\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-attribute\">position</span>: absolute;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-attribute\">top</span>: <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-attribute\">left</span>: <span class=\"hljs-number\">0</span>;\n<span class=\"lineNumber\">6</span>}</code></pre> \n\n<blockquote>\n<p>需要注意的是，当插值花括号中包含引号时，带引号的字符串周围的引号会被删除。</p>\n</blockquote>\n<h2>样式规则</h2>\n<p>进入正题。</p>\n<blockquote>\n<p><code>css</code>也已经存在嵌套的草案，很棒。</p>\n</blockquote>\n<p><code>sass</code>支持嵌套，这是<code>sass</code>随处可见的知识点，但凡看过 sass 的开发者都知道，无需赘述。关键在于：<code>控制嵌套深度 </code>，嵌套很棒但过深的嵌套生成的<code>css</code>代码就越多，三层足以避免过犹不及。</p>\n<p>选择器列表支持和组合选择器可以直接使用<code>css</code>语法。</p>\n<p>举个例子🌰：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-selector-class\">.enlarge</span>\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">14px</span>\n<span class=\"lineNumber\">3</span>\tmargin: <span class=\"hljs-number\">1rem</span>\n<span class=\"lineNumber\">4</span>\t\ttop: <span class=\"hljs-number\">2rem</span>\n<span class=\"lineNumber\">5</span>  transition:\n<span class=\"lineNumber\">6</span>    property: font-size\n<span class=\"lineNumber\">7</span>    duration: <span class=\"hljs-number\">4s</span>\n<span class=\"lineNumber\">8</span>    delay: <span class=\"hljs-number\">2s</span>\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span>  &#x26;:hover\n<span class=\"lineNumber\">11</span>    font-size: <span class=\"hljs-number\">36px</span>\n<span class=\"lineNumber\">12</span>\t&#x26; > h1\n<span class=\"lineNumber\">13</span>\t\tcolor: <span class=\"hljs-number\">#333</span>\n<span class=\"lineNumber\">14</span>\t&#x26;r\n<span class=\"lineNumber\">15</span>\t\tcolor: purple\n<span class=\"lineNumber\">16</span> \n<span class=\"lineNumber\">17</span>\t.other\n<span class=\"lineNumber\">18</span>\t\tcolor: red</code></pre> \n\n<p>上述<code>enlarge</code>类内嵌套了<code>other</code>类，并且使用了<code>&#x26;</code>父节点选择器实现了<code>.enlarge:hover</code>、<code>.enlarge > h1</code>甚至是<code>.enlarger</code>这样的选择器效果。</p>\n<p>其中<code>margin</code>属性名还可以视为命名空间嵌套着使用，编译出<code>margin-top: 2rem</code>的样式。</p>\n<p>此外，还可以根据特定的条件去设置属性和值，此时声明一个<code>null</code>作为表达式，最终将不会编译此属性。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-scss\"><span class=\"lineNumber\">1</span><span class=\"hljs-variable\">$rounded-corners</span>: false\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span>.button\n<span class=\"lineNumber\">4</span>  border: <span class=\"hljs-number\">1px</span> solid black\n<span class=\"lineNumber\">5</span>  border-radius: if(<span class=\"hljs-variable\">$rounded-corners</span>, <span class=\"hljs-number\">5px</span>, null)</code></pre> \n\n<p>最终的<code>css</code>文件将不包含<code>border-radius</code>属性。</p>\n<p><code>css</code>支持<code>自定义属性</code>，也称为<code>css</code>变量。这个机制允许开发者灵活的设置属性，同时<code>JavaScript</code>能够访问这些值。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"http://www.sass-china.com/\">Sass中文文档</a></li>\n<li><a href=\"https://www.sassmeister.com/\">SassMeister | The Sass Playground!</a></li>\n</ul>\n","title":"Sass浅解","date":"12/16/2021","tags":["Sass"],"mainImg":"https://images.unsplash.com/photo-1569748130764-3fed0c102c59?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk2NDQzMjM&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1569748130764-3fed0c102c59?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2Mzk2NDQzMjM&ixlib=rb-1.2.1&q=80&w=400","intro":"目前对 sass 编写样式表一知半解，在写手头的项目时十分不顺，效率低下，因此打算花两个小时重学 sass"}},"__N_SSG":true}