{"pageProps":{"post":{"slug":"Javascript,I-promise","contentHtml":"<p>大家好，今天我们要分享的知识点是<code>Promise</code>与异步编程。</p>\n<p><code>Promise</code>是对尚不存在结果的对象的一个替身，也许你曾看到类似的术语，例如<code>future</code>/<code>delay</code>/<code>deferred</code>等，实际上这些术语描述的是一个相同的概念，都是一种异步程序执行的机制。</p>\n<p>接下来我们分享的知识将涉及以下内容：</p>\n<ul>\n<li>\n<p>函数回调</p>\n</li>\n<li>\n<p>Promise 浅析</p>\n</li>\n<li>\n<p>Async / await</p>\n</li>\n<li>\n<p>Promisify</p>\n</li>\n</ul>\n<h1>1. 回调</h1>\n<p>JavaScript 语言为了让部分任务按异步的方式进行，提供了编写<code>回调函数</code>的方法，让某些任务在达成一些条件之后再执行开发者指定的<code>回调函数</code>。</p>\n<p>举两个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> callbackFn = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// browser</span>\n<span class=\"lineNumber\">5</span><span class=\"hljs-built_in\">setTimeout</span>(callbackFn, <span class=\"hljs-number\">1000</span>)\n<span class=\"lineNumber\">6</span> \n<span class=\"lineNumber\">7</span><span class=\"hljs-comment\">// nodejs</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"lineNumber\">9</span>fs.readFile(<span class=\"hljs-string\">'filename'</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =></span> {\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">12</span>})\n<span class=\"lineNumber\">13</span><span class=\"hljs-comment\">// more</span>\n<span class=\"lineNumber\">14</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)</code></pre> \n\n<p>如上所示，要么延迟执行回调，要么读取文件后执行回调，二者都不会立即执行从而阻塞主线程，而是各自具有自己的执行条件，满足条件后放入任务循环队列中等待主线程空闲才得以取出并执行。</p>\n<p>上述回调函数在某些场景下曾让开发者写出如下类型的代码：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>\n<span class=\"lineNumber\">2</span>fs.readFile(<span class=\"hljs-string\">'file1.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">err, data</span>)</span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">5</span>  fs.readFile(<span class=\"hljs-string\">'file2.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">8</span>    fs.readFile(<span class=\"hljs-string\">'file3.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">9</span>      <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">10</span>      <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">11</span>      fs.readFile(<span class=\"hljs-string\">'file4.txt'</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">12</span>        <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">13</span>        <span class=\"hljs-comment\">// ...一些操作</span>\n<span class=\"lineNumber\">14</span>      });\n<span class=\"lineNumber\">15</span>    });\n<span class=\"lineNumber\">16</span>  });\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<p>为什么会这样？因为某些场景下需要对异步操作进行排序，需要保证运行逻辑具有一定的顺序，并且还需要对每一个回调进行错误处理。</p>\n<p>上述案例省略了真实的逻辑代码，我们可以看出这种回调的嵌套让代码很容易失控，并且难以阅读和维护。</p>\n<p>无论是写下这段代码的人还是阅读这段代码的人都被其所\"折磨\"，我们将此类代码结构称为<code>“回调地狱”</code>。</p>\n<p>即使我们将之摊开，为每一个回调函数都编写一个具名的独立函数来调用，依然可读性不佳：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span>fs.readFile(<span class=\"hljs-string\">'file1.txt'</span>, step1);\n<span class=\"lineNumber\">2</span> \n<span class=\"lineNumber\">3</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step1</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">6</span>  fs.readFile(<span class=\"hljs-string\">'file2.txt'</span>, step2)\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step2</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">11</span>  fs.readFile(<span class=\"hljs-string\">'file3.txt'</span>, step3)\n<span class=\"lineNumber\">12</span>}\n<span class=\"lineNumber\">13</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step3</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">16</span>  fs.readFile(<span class=\"hljs-string\">'file4.txt'</span>, step4)\n<span class=\"lineNumber\">17</span>}\n<span class=\"lineNumber\">18</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">step4</span>(<span class=\"hljs-params\">err, data</span>) </span>{\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-keyword\">if</span>(err) <span class=\"hljs-keyword\">throw</span> err;\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-comment\">// ...</span>\n<span class=\"lineNumber\">21</span>}</code></pre> \n\n<p>这些独立函数的命名也许会让开发者觉得非常不适，为了展开层层嵌套，我们编写了许多几乎不会被<code>重用</code>的函数，即使现代编辑器在代码跳转的功能上非常方便，阅读此类代码的时候依然会让我们不断的转移视线。</p>\n<blockquote>\n<p>“懒惰”使人进步。</p>\n</blockquote>\n<p>使用<code>Promise</code>,可以避免此类问题，显著减少编码量，提高代码的可读性。</p>\n<h1>2. Promise</h1>\n<blockquote>\n<p>IE 浏览器不支持<code>Promise</code>,我们可以使用<code>bluebird</code>或<code>es6-promise</code>等第三方库.</p>\n</blockquote>\n<h2>2.1 promise 浅析</h2>\n<p>使用<code>new</code>实例化的<code>Promise</code>对象具有三种状态:</p>\n<ul>\n<li><code>Fulfilled</code> - <code>has resolution</code>: resolve 成功,调用 <code>onFulfilled</code>函数</li>\n<li><code>Rejected</code> - <code>has rejection</code>: reject, 调用<code>onRejected</code>函数</li>\n<li><code>Pending</code> - <code>unresolved</code>: 初始化状态</li>\n</ul>\n<blockquote>\n<p>短横线左边是<code>Promise/A+</code>术语,而右边则是<code>ES6 Promise</code>术语.</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/youyiqin/markdown_imgs/master/image-1582215000590-ffa807c19d5f6959de485fc66664e123.png\" alt=\"\"></p>\n<p>初始状态为<code>pending</code>,转为<code>Fulfilled</code>或者<code>Rejected</code>之后不会再有变化.<code>Fulfilled</code>和<code>Rejected</code>状态也被称为<code>Settled</code>。</p>\n<p><code>Promise</code>的状态流转并不复杂，但是我们需要注意其中一些细节。</p>\n<blockquote>\n<p>本文不会对<code>promise</code>做面面俱到的介绍,推荐阅读官方文档.</p>\n</blockquote>\n<p>首先,我们来创建一个<code>promise</code>实例:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 实例化</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// 实例状态变更，设置值</span>\n<span class=\"lineNumber\">6</span>    resolve(value) <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">7</span>    resolve(...) <span class=\"hljs-comment\">// 忽略</span>\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>  \treject(reason) <span class=\"hljs-comment\">// failure</span>\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>})\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// 链式调用，实例方法 then 返回一个新的实例</span>\n<span class=\"lineNumber\">13</span>promise\n<span class=\"lineNumber\">14</span>  .then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">15</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">16</span>  })\n<span class=\"lineNumber\">17</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">value</span>) </span>{\n<span class=\"lineNumber\">18</span>\t\t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">19</span>  })\n<span class=\"lineNumber\">20</span>\t.catch(<span class=\"hljs-function\"><span class=\"hljs-params\">reason</span> =></span> {\n<span class=\"lineNumber\">21</span>  \t<span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">22</span>  })\n<span class=\"lineNumber\">23</span>\t.finally(<span class=\"hljs-function\">() =></span> {})</code></pre> \n\n<p>上述示例展示了<code>promise</code>的一些特性，如实例化、状态转换赋值、链式调用和异常处理，下面我们会讲到静态方法和实例方法。</p>\n<h2>2.1 Promise 构造器</h2>\n<p>我们通过<code>new Promise(executor)</code>实例化一个<code>promise</code>的时候,其状态为<code>pending</code>.在实例化的时候传入一个函数<code>executor（执行器）</code>，此函数将会获取两个实参<code>resolve</code>和<code>reject</code>函数，二者都可以改变实例的状态和值。</p>\n<blockquote>\n<p>不提供 <code>executor</code> 将抛出 <code>typeError</code></p>\n</blockquote>\n<p>上述代码的片段：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 实例化</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">if</span>(<span class=\"hljs-params\">...</span>)</span> {\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-comment\">// 实例状态变更，设置值</span>\n<span class=\"lineNumber\">6</span>    resolve(value) <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">7</span>    resolve(...) <span class=\"hljs-comment\">// 忽略</span>\n<span class=\"lineNumber\">8</span>  } <span class=\"hljs-keyword\">else</span> {\n<span class=\"lineNumber\">9</span>  \treject(reason) <span class=\"hljs-comment\">// failure</span>\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>})</code></pre> \n\n<p>需要关注以下几点：</p>\n<ul>\n<li><code>Executor</code>函数的参数没有限制，但通常我们会声明两个形参函数：<code>resolve</code>和<code>reject</code>，<code>executor</code>内部使用此二者可以显式地转换<code>Promise</code>实例的状态，设置其值。（不使用这两个函数来转换实例状态意味着此实例的状态不会改变，这也写并没有多大意义）。</li>\n<li><code>resolve</code>和<code>reject</code>函数的实参可以是不同类型的值，但是会被进一步处理。也就是说，显示转换状态设置值的时候，传入的参数不一定会直接作为<code>settled</code>状态的值。</li>\n<li><code>pending</code>状态到<code>settled</code>状态是不可逆的，并且在<code>executor</code>中的<code>resolve</code>和<code>reject</code>函数只能执行一次，后续再执行将会被忽略。</li>\n</ul>\n<blockquote>\n<p><code>executor</code>函数是同步执行的。<code>resolve</code>和<code>reject</code>函数接收任意类型的值。</p>\n</blockquote>\n<p>我们来看看给<code>resolve</code>函数传入以下三种不同的值会有怎样的结果。</p>\n<ul>\n<li>原始类型值</li>\n<li>Promise 实例</li>\n<li>thenable 对象</li>\n</ul>\n<p>首先是<code>原始类型值</code>：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Symbol</span>())\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-comment\">// resolve(1)</span>\n<span class=\"lineNumber\">4</span>  <span class=\"hljs-comment\">// resolve('1')</span>\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-comment\">// resolve(null)</span>\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-comment\">// resolve(undefined)</span>\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-comment\">// resolve(1n)</span>\n<span class=\"lineNumber\">8</span>  <span class=\"hljs-comment\">// resolve(true)</span>\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-comment\">// reject 也是如此</span>\n<span class=\"lineNumber\">10</span>})\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>， v);\n<span class=\"lineNumber\">14</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i);\n<span class=\"lineNumber\">16</span>})</code></pre> \n\n<p>原始类型数据传入<code>resolve</code>函数，都能顺利将状态转为<code>fulfilled</code>并且设置为当前状态下的值。使用<code>reject</code>函数则将状态转为<code>rejected</code>,值则是原始类型的值。</p>\n<p>其次，来看看传入<code>Promise</code>对象。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">3</span>})\n<span class=\"lineNumber\">4</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, v);\n<span class=\"lineNumber\">6</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">7</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i)\n<span class=\"lineNumber\">8</span>})\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">10</span>resolve <span class=\"hljs-number\">1</span></code></pre> \n\n<p>如果传入给<code>promise</code>的参数也是一个<code>Promise</code>实例，则相当于一个空包装，最终将得到一个相同状态和值的<code>Promise</code>实例。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">2</span>  resolve(<span class=\"hljs-built_in\">Promise</span>.reject(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">3</span>})\n<span class=\"lineNumber\">4</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">5</span>reject <span class=\"hljs-number\">1</span></code></pre> \n\n<p>接着我们来看看传入一个普通的 <code>thenable</code> 对象。</p>\n<blockquote>\n<p>具有<code>then</code>方法的对象称为<code>thenable</code>对象，<code>Promise</code>实例对象也是一种<code>thenable</code>对象。</p>\n</blockquote>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'Miao'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this is then'</span>, <span class=\"hljs-built_in\">arguments</span>);\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">0</span>](<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">9</span>  resolve(obj)\n<span class=\"lineNumber\">10</span>})\n<span class=\"lineNumber\">11</span> \n<span class=\"lineNumber\">12</span>p.then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, v);\n<span class=\"lineNumber\">14</span>}).catch(<span class=\"hljs-function\">(<span class=\"hljs-params\">i</span>) =></span> {\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, i)\n<span class=\"lineNumber\">16</span>})\n<span class=\"lineNumber\">17</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">18</span><span class=\"hljs-built_in\">this</span> is then [Arguments] {\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-string\">'0'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)],\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-string\">'1'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)]\n<span class=\"lineNumber\">21</span>}\n<span class=\"lineNumber\">22</span>resolve <span class=\"hljs-number\">1</span></code></pre> \n\n<p><code>executor</code>内<code>resolve</code>一个<code>thenable</code>对象，则会将<code>then</code>方法视作一个<code>executor</code>，在其内部可以显示编写<code>resolve</code>和<code>reject</code>的逻辑来改变整个<code>Promise</code>实例的状态和值。</p>\n<h2>2.2 Promise 实例方法</h2>\n<p><code>Promise</code>实例有三个实例方法：</p>\n<ul>\n<li><code>then</code></li>\n<li><code>catch</code></li>\n<li><code>finally</code></li>\n</ul>\n<blockquote>\n<p>重申：<code>promise</code>实例的状态转换是单向的,一旦<code>settled</code>则不可逆转,同时我们可以多次利用此<code>settled</code>状态的实例。</p>\n</blockquote>\n<p>首先是<code>then(onFulfilled, onRejected)</code>方法，此方法接收两个回调函数作为参数，在<code>Promise</code>状态为<code>pending</code>的时候，我们可以将此方法理解为注册状态转变为<code>Fulfilled</code>和<code>Rejected</code>后执行的回调函数，并且这些回调函数的执行是异步的。</p>\n<blockquote>\n<p><code>Promise</code>只能转换一次，因此上述两个参数的操作是互斥的。</p>\n</blockquote>\n<p>在实现上<code>Node</code>可以通过<code>process.nextTick</code>来创建新的微任务，在浏览器端则可以通过<code>MutationObserver</code>功能创建微任务。</p>\n<p>以下两种<code>then</code>函数的传参都会被忽略, 并且异步返回一个相同值的<code>Promise</code>新实例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 传非函数处理对象</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>).then(<span class=\"hljs-string\">'sss'</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// 不传值</span>\n<span class=\"lineNumber\">4</span><span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>).then()\n<span class=\"lineNumber\">5</span> \n<span class=\"lineNumber\">6</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">let</span> c = p.then()\n<span class=\"lineNumber\">8</span><span class=\"hljs-built_in\">console</span>.log(p);\n<span class=\"lineNumber\">9</span><span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-built_in\">console</span>.log(c);  \n<span class=\"lineNumber\">11</span>}, <span class=\"hljs-number\">200</span>);\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">13</span><span class=\"hljs-built_in\">Promise</span> { <span class=\"hljs-number\">1</span> }\n<span class=\"lineNumber\">14</span><span class=\"hljs-built_in\">Promise</span> { <span class=\"hljs-number\">1</span> }</code></pre> \n\n<p>不推荐编写上述<code>then</code>方法，我们只需要知道此种情形<code>Promise</code>会如何处理整体的逻辑流程。</p>\n<blockquote>\n<p>无论<code>Promise</code>实例处于何种状态，我们注册回调函数都将异步执行。</p>\n</blockquote>\n<p>其次，<code>catch</code>方法可以理解为<code>then</code>方法的语法糖形式，我们可以将<code>then(undefiled, onRejected)</code>视为<code>catch(onRejected)</code>一种形式，开发者可以自由选择如何编写<code>Promise</code>实例从<code>pending</code>转为<code>settled</code>状态后的异步回调函数。</p>\n<p>最后，<code>finally</code>方法则相当于注册一个<code>Promise</code>实例<code>settled</code>之后的清理方法，通常我们可以传入一个具有清理功能的函数作为参数。</p>\n<blockquote>\n<p><code>finally</code>返回一个新的<code>Promise</code>实例，<code>finally</code>设计为一个与状态无关的方法，大多数情况下只是传递上层的<code>Promise</code>，除非显式地返回一个新的<code>Promise</code>实例，或者抛出异常返回<code>Rejected</code>状态的实例。</p>\n</blockquote>\n<p>让我们来写一个示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve ,reject</span>) =></span> resolve(<span class=\"hljs-number\">1</span>))\n<span class=\"lineNumber\">2</span>  .then(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'1'</span>);\n<span class=\"lineNumber\">4</span>  })\n<span class=\"lineNumber\">5</span>  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'2'</span>, v);\n<span class=\"lineNumber\">7</span>    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Error</span>(<span class=\"hljs-string\">'my error'</span>)\n<span class=\"lineNumber\">8</span>  })\n<span class=\"lineNumber\">9</span>  .then(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'3'</span>);\n<span class=\"lineNumber\">11</span>  })\n<span class=\"lineNumber\">12</span>  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">err</span> =></span> {\n<span class=\"lineNumber\">13</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'catch any error'</span>);\n<span class=\"lineNumber\">14</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">4</span> <span class=\"hljs-comment\">// 或者 return Promise.resolve(4)</span>\n<span class=\"lineNumber\">15</span>  })\n<span class=\"lineNumber\">16</span>  .then(<span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =></span> {\n<span class=\"lineNumber\">17</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'4'</span>, v);\n<span class=\"lineNumber\">18</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">5</span>\n<span class=\"lineNumber\">19</span>  })\n<span class=\"lineNumber\">20</span>  .finally(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">21</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'finally'</span>);\n<span class=\"lineNumber\">22</span>  })\n<span class=\"lineNumber\">23</span>  .then(<span class=\"hljs-function\"><span class=\"hljs-params\">v</span> =></span> {\n<span class=\"lineNumber\">24</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">5</span>, v);\n<span class=\"lineNumber\">25</span>  })\n<span class=\"lineNumber\">26</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">27</span><span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">28</span><span class=\"hljs-number\">2</span> <span class=\"hljs-literal\">undefined</span>\n<span class=\"lineNumber\">29</span><span class=\"hljs-keyword\">catch</span> any error\n<span class=\"lineNumber\">30</span><span class=\"hljs-number\">4</span> <span class=\"hljs-number\">4</span>\n<span class=\"lineNumber\">31</span><span class=\"hljs-keyword\">finally</span>\n<span class=\"lineNumber\">32</span><span class=\"hljs-number\">5</span> <span class=\"hljs-number\">5</span></code></pre> \n\n<blockquote>\n<p><code>Promise</code>实例支持链式调用,每个<code>then</code>函数内部最后将返回一个全新的<code>promise</code>实例。</p>\n</blockquote>\n<p><code>then</code>方法默认返回一个值为<code>undefined</code>,状态为<code>fulfilled</code>的<code>Promise</code>实例.</p>\n<blockquote>\n<p><code>回调函数</code>的写法编写可以一次性监听所有回调函数的错误处理逻辑是很困难的,<code>Promise实例</code>的实例方法<code>catch</code>能处理链式调用之前所有的<code>then</code>函数错误和显式的<code>reject</code>行为.</p>\n</blockquote>\n<p><code>catch</code>方法能处理链式调用之前所有的异常，也就是说当前面的<code>Promise</code>状态转为<code>rejected</code>的时候，会\"跳过\"<code>then</code>方法，从而执行<code>catch</code>方法注册的异步回调。</p>\n<blockquote>\n<p><code>Promise</code>的异步注册监听函数的执行顺序取决于使用实例方法添加的顺序。</p>\n</blockquote>\n<h2>2.3 Promise 静态方法</h2>\n<p><code>Promise</code>类具有两个能创建一个新的实例的静态方法:</p>\n<ul>\n<li>Promise.resolve(value)</li>\n<li>Promise.reject(reason)</li>\n</ul>\n<p>二者区别在于返回的<code>promise</code>实例的状态,前者为<code>fulfilled</code>,后者为<code>rejected</code>.</p>\n<p><code>Promise.resolve(value)</code>可以视为以下代码的简写:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =></span> {\n<span class=\"lineNumber\">2</span>  resolve(value)\n<span class=\"lineNumber\">3</span>})</code></pre> \n\n<p><code>Promise.reject(reason)</code>亦类似。</p>\n<p>再次重申，传入的实参<code>（value/reason）</code>可以有几种情形：</p>\n<ul>\n<li>如果<code>value</code>是一个原始数据类型的值，则设置<code>Promise</code>实例值为此值，状态设置为<code>fulfilled</code></li>\n<li>如果<code>value</code>是一个<code>Promise</code>实例，则沿用此实例的状态和值。</li>\n<li>如果传入的实参是一个非<code>Promise</code>的<code>thenable</code>对象，则调用此对象的<code>then</code>方法，并且传入<code>resolve</code>和<code>reject</code>作为实参,将<code>then</code>方法作为<code>executor</code>，在内部可以设置当前实例的状态和值, 必须显示调用<code>resolve</code>或者<code>reject</code>方法，使用<code>return</code>其他值则无效。</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> obj = {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">'o'</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-function\"><span class=\"hljs-title\">then</span>(<span class=\"hljs-params\"></span>)</span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'this is then'</span>, <span class=\"hljs-built_in\">arguments</span>);\n<span class=\"lineNumber\">5</span>    <span class=\"hljs-built_in\">arguments</span>[<span class=\"hljs-number\">1</span>](<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">6</span>  }\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-built_in\">Promise</span>.resolve(obj)\n<span class=\"lineNumber\">9</span>p\n<span class=\"lineNumber\">10</span>\t.then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, r))\n<span class=\"lineNumber\">11</span>  .catch(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> {\n<span class=\"lineNumber\">12</span>\t\t<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, r);\n<span class=\"lineNumber\">13</span>\t})\n<span class=\"lineNumber\">14</span> \n<span class=\"lineNumber\">15</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">16</span><span class=\"hljs-built_in\">this</span> is then [Arguments] {\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-string\">'0'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)],\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-string\">'1'</span>: [<span class=\"hljs-built_in\">Function</span> (anonymous)]\n<span class=\"lineNumber\">19</span>}\n<span class=\"lineNumber\">20</span>reject <span class=\"hljs-number\">1</span></code></pre> \n\n<p>此外,<code>Promise</code>类还有如下几个静态方法:</p>\n<ul>\n<li><code>Promise.all(iterable)</code></li>\n<li><code>Promise.race(iterable)</code></li>\n<li><code>Promise.any(iterable)</code></li>\n<li><code>Promise.allSettled(iterable)</code></li>\n</ul>\n<p>这几个静态方法各有其应用场景.</p>\n<blockquote>\n<p>是否支持这些静态方法取决于当前环境,例如在<code>IE</code>浏览器下无法使用<code>Promise</code>，在<code>Node14</code>下无法使用<code>Promise.allSettled</code>，我们可以使用第三方库来进行替换，例如<code>bluebird</code>。</p>\n</blockquote>\n<h3>2.2.1 all</h3>\n<p>首先,<code>Promise.all(iterable)</code>方法接收一个<code>iterable</code>对象（通常是数组）作为参数,最终返回一个新的<code>promise 实例</code>.</p>\n<blockquote>\n<p>如果<code>iterable</code>对象是空的,则返回的结果是空数组(尽管我们不太会这么做).</p>\n</blockquote>\n<p>我们通过示例代码来理解规范:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">let</span> p1 = <span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-number\">1</span>,\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">4</span>])</code></pre> \n\n<p>合成的<code>Promise</code>将在所有内部<code>Promise</code>实例转化为<code>Fulfilled</code>状态后转换为<code>Fulfilled</code>状态，其值是一个可迭代对象转化为<code>Promise</code>解决之后的值的数组。</p>\n<blockquote>\n<p>可迭代对象将会通过<code>Promise.resolve</code>方法转换为<code>Promise</code>实例。</p>\n</blockquote>\n<p>如果一旦其中之一出现<code>rejected</code>状态的<code>promise 实例</code>,则合成的<code>Promise</code>实例的状态转化为<code>rejected</code>,且值为最先出现的<code>rejected</code>状态实例的值.</p>\n<p>我们可以使用<code>Promise.all</code>来执行一组异步操作,这些操作的时间花费取决于最长的那个元素,并且最终如果一切顺利,则结果的顺序是不变的.</p>\n<p><code>Promise.all()</code>方法适用于<code>合并请求</code>的场景,例如某些项目中,提交的多个数据需要调用云端接口进行数据校验,当所有数据都通过校验的时候才能执行下一步操作,来看看代码:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// 有一个返回 promise 对象的 asyncApi 函数</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-comment\">// 每一个 test 函数都是一个异步的测试</span>\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> test = <span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =></span> asyncApi(value)\n<span class=\"lineNumber\">4</span><span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">5</span>  test(<span class=\"hljs-string\">'xxx'</span>),\n<span class=\"lineNumber\">6</span>  test(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">7</span>  test(<span class=\"hljs-string\">'x'</span>)\n<span class=\"lineNumber\">8</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">results</span> =></span> {\n<span class=\"lineNumber\">9</span>  results.forEach(<span class=\"hljs-function\"><span class=\"hljs-params\">result</span> =></span> {\n<span class=\"lineNumber\">10</span>    <span class=\"hljs-comment\">// balabala 你的代码逻辑</span>\n<span class=\"lineNumber\">11</span>    <span class=\"hljs-comment\">// 都通过了</span>\n<span class=\"lineNumber\">12</span>  })\n<span class=\"lineNumber\">13</span>  <span class=\"hljs-comment\">// do more...</span>\n<span class=\"lineNumber\">14</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">15</span>  <span class=\"hljs-comment\">// 失败的值, balabala</span>\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-built_in\">console</span>.log(error)\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<h3>2.2.2 race</h3>\n<p><code>Promise.race(iterable)</code>如其名,类似于<code>Promise.all()</code>,接收同类型参数,一旦迭代器中某个<code>promise</code>状态转化为<code>settled</code>,立即返回此<code>Promise</code>实例.</p>\n<blockquote>\n<p>传入的迭代为空的话,返回的<code>promise</code>始终<code>pending</code>.</p>\n</blockquote>\n<p><code>Promise.race()</code>非常适合做异步请求的<code>超时</code>处理.来看一个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// asyncApi() 返回 promise</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">timeout</span>(<span class=\"hljs-params\">ms</span>) </span>{\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">5</span>      reject(<span class=\"hljs-string\">`timeout: <span class=\"hljs-subst\">${ms}</span> ms`</span>)\n<span class=\"lineNumber\">6</span>    }, ms)\n<span class=\"lineNumber\">7</span>  })\n<span class=\"lineNumber\">8</span>}\n<span class=\"lineNumber\">9</span> \n<span class=\"lineNumber\">10</span><span class=\"hljs-built_in\">Promise</span>.race([\n<span class=\"lineNumber\">11</span>  asyncApi(<span class=\"hljs-string\">'xx'</span>),\n<span class=\"lineNumber\">12</span>  timeout(<span class=\"hljs-number\">5000</span>)\n<span class=\"lineNumber\">13</span>]).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =></span> {\n<span class=\"lineNumber\">14</span>  <span class=\"hljs-comment\">// success</span>\n<span class=\"lineNumber\">15</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">error</span> =></span> {\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-comment\">// timeout or error</span>\n<span class=\"lineNumber\">17</span>})</code></pre> \n\n<h3>2.2.3 any</h3>\n<p><code>Promise.any(iterable)</code>是<code>Promise.all()</code>的反面,其语法无异.</p>\n<p>需要注意的是如果传入的迭代器是空的,则返回<code>rejected</code>的<code>promise </code>实例.只要有一个成功,则返回此结果.如果迭代器内的<code>promise</code>全部返回<code>rejected</code>状态,则最终返回<code>rejected</code>的<code>promise</code>实例.</p>\n<p>因此,此方法适用于验证多个异步结果中是否有<code>fulfilled</code>的<code>promise</code>实例.</p>\n<p>如果我们需要向多个数据源获取某一个数据,则可以使用此方法最快速的获取到数据,亦或者所有异步请求都失败.</p>\n<h3>2.2.4 allSettled</h3>\n<p><code>Promise.allSettled(iterable)</code>方法返回一个在所有给定的<code>promise</code>转为<code>settled</code>状态后的数组,数组元素是每一个<code>promise</code>结果.</p>\n<p>如果我们有多个互不依赖的<code>异步任务</code>,或者我们总想知道每个<code>promise</code>的结果,而不需要其中的<code>rejected</code>状态<code>promise</code>去引发<code>catch</code>,来看看<code>MDN</code>的例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> promise1 = <span class=\"hljs-built_in\">Promise</span>.resolve(<span class=\"hljs-number\">3</span>);\n<span class=\"lineNumber\">2</span><span class=\"hljs-keyword\">const</span> promise2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">100</span>, <span class=\"hljs-string\">'foo'</span>));\n<span class=\"lineNumber\">3</span><span class=\"hljs-keyword\">const</span> promises = [promise1, promise2];\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-built_in\">Promise</span>.allSettled(promises).\n<span class=\"lineNumber\">6</span>  then(<span class=\"hljs-function\">(<span class=\"hljs-params\">results</span>) =></span> results.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =></span> <span class=\"hljs-built_in\">console</span>.log(result)));</code></pre> \n\n<p>输出是:</p>\n<pre><code class=\"hljs language-shell\"><span class=\"lineNumber\">1</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"fulfilled\"</span>, value: 3 }</span>\n<span class=\"lineNumber\">2</span><span class=\"hljs-meta\">></span><span class=\"bash\"> Object { status: <span class=\"hljs-string\">\"rejected\"</span>, reason: <span class=\"hljs-string\">\"foo\"</span> }</span></code></pre> \n\n<p>如上所示,状态为<code>fulfilled</code>时,具有<code>value</code>,状态为<code>rejected</code>时,具有<code>reason</code>.</p>\n<p>还记得我们在<code>Promise.all()</code>中的迭代器返回的是<code>promise.catch(err => err)</code>吗?其实,使用<code>Promise.allSettled()</code>相对更好.</p>\n<h2>2.3 Promise 的优劣</h2>\n<p><code>Promise</code>的出现促进了<code>异步</code>编程的发展,我们可以在浏览器端和<code>node</code>端看到统一的<code>Promise</code>代码.还记得<code>callback</code>回调函数的参数约定吗?</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\">param, (err, data) => {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">if</span>(err) {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">4</span>  }\n<span class=\"lineNumber\">5</span>  <span class=\"hljs-regexp\">//</span> balabala\n<span class=\"lineNumber\">6</span>}</span>)</span></code></pre> \n\n<p>这种参数约定是脆弱的,开发者可以不按此约定编写回调函数,这类隐藏<code>bug</code>可能就此而生.</p>\n<p><code>Promise</code>的出现,我们必须使用其实例方法<code>then</code>和<code>catch</code>去按规范编码,否则将会出错,开发者也可以看到明显的错误提示信息.</p>\n<p>我们再来看看如下两个例子:</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-comment\">// callback</span>\n<span class=\"lineNumber\">2</span>fs.readFile(name, opts?, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, string|Buffer</span>) =></span> <span class=\"hljs-keyword\">void</span>)\n<span class=\"lineNumber\">3</span><span class=\"hljs-comment\">// Promise</span>\n<span class=\"lineNumber\">4</span>readFilePromisified(name, opts?): <span class=\"hljs-built_in\">Promise</span>&#x3C;string | Buffer>         </code></pre> \n\n<p><code>Promise</code>方案让函数参数和回调解耦开来,所有的参数都用于此函数的输入.</p>\n<p><code>Promise</code>在处理单次异步任务的时候表现良好,但是对于多次触发的任务便显得乏力,也许我们需要学习一些<code>响应式编程</code>技术,以解决此类问题.</p>\n<p>对于<code>ES6 Promise</code>来说,缺乏两项很实用的功能:</p>\n<ul>\n<li>取消任务(在组件被删除后取消异步任务等)，TC39 委员会实际上准备增加此特性，但最终提案被撤回了，但是没关系，<code>Bluebird</code>实现了此功能，我们也可以对此特性进行补充，例如利用<code>setTimeout</code>定时器函数可以被取消的特性，编写一些逻辑代码和<code>Promise</code>取消状态转换的功能函数。</li>\n<li>进度追踪(显示进度条等)，原生不支持此特性的原因是担心此特性会导致<code>Promise</code>的链式调用和类似<code>all</code>静态方法的复杂度增加。</li>\n</ul>\n<p>原生<code>Promise</code>暂未支持上述两项特性,也许我们可以看看类似<code>Bluebird</code>这样的第三方库，它们功能强大并且被广泛使用，值得信赖。</p>\n<h1>3. async / await</h1>\n<p>提及异步函数，<code>async/await</code>语法关键字一定是绕不开的知识点，这是一种使用 <code>Promise</code>的特殊语法，并且非常容易理解和使用。</p>\n<p>我们直接看示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-comment\">// balabala</span>\n<span class=\"lineNumber\">3</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n<span class=\"lineNumber\">4</span>}</code></pre> \n\n<blockquote>\n<p>可以理解为 async 函数最后显式返回的值经过 Promise.resolve 函数的转化，返回一个新的 Promise 实例</p>\n</blockquote>\n<p>在函数前添加<code>async</code>标识此函数总是返回一个<code>Promise</code>实例,即使我们显示指定其他的类型值的返回值，也会被包装成一个<code>Promise</code>并返回，当然，依然推荐显示地指定返回<code>Promise</code>。</p>\n<p>使用<code>async</code>关键字可以让函数具有<code>异步</code>特征，但总体上代码依然是<code>同步</code>求值的。</p>\n<p>举个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span>foo()\n<span class=\"lineNumber\">5</span><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// output</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-number\">1</span>\n<span class=\"lineNumber\">8</span><span class=\"hljs-number\">2</span></code></pre> \n\n<blockquote>\n<p>异步函数具有暂停和恢复执行的功能是十分必要的。</p>\n</blockquote>\n<p>使用<code>await</code>关键字可以暂停异步函数的执行并且等待返回的<code>Promise</code>实例进入<code>settled</code>状态。</p>\n<p>关键词<code>await</code>只在<code>async</code>函数内有效：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> axios.get(<span class=\"hljs-string\">'your url'</span>)\n<span class=\"lineNumber\">3</span>}</code></pre> \n\n<p>在日常工作中无论是浏览器还是<code>Nodejs</code>，都可以看到<code>await</code>的身影。</p>\n<p>那么，为什么我们更推荐使用<code>async/await</code>语法，它又有怎样的细节需要我们关注的呢？</p>\n<p>来看以下几点特性：</p>\n<ul>\n<li>顶层<code>await</code>：此提案当前依然是 <code>stage 3</code>，在正式进入稳定版之前，顶层对于<code>await</code>的使用依然需要立即执行表达式（IIFE），不幸的是，这种模式导致图形执行和应用程序的静态可分析性的确定性降低。由于这些原因，缺少顶层 <code>await</code> 被认为比该功能带来的危害有更高的风险。</li>\n<li>顶层 <code>await</code> 仅限于 ES 模块。明确不支持<code>CommonJS</code>模块。</li>\n<li><code>await</code>支持<code>thenable</code>对象,如果其后是一个<code>thenable</code>对象，则会执行此对象的<code>then</code>方法，并且传入<code>resolve</code>和<code>reject</code>函数作为参数，最终得到一个<code>settled</code>的<code>Promise</code>实例。</li>\n<li><code>await</code>和<code>Promise.all</code>等静态方法配合良好。</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-built_in\">Promise</span>.all([\n<span class=\"lineNumber\">2</span>  promise1,\n<span class=\"lineNumber\">3</span>  promise2,\n<span class=\"lineNumber\">4</span>  ...\n<span class=\"lineNumber\">5</span>])</code></pre> \n\n<ul>\n<li>Error 处理</li>\n</ul>\n<blockquote>\n<p><code>async/await</code>配合<code>try...catch..</code>可以更清晰地同时处理同步和异步的异常</p>\n</blockquote>\n<p>让我们来看一个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> makeRequest = <span class=\"hljs-keyword\">async</span> () => {\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">try</span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\">await</span> getJSON())\n<span class=\"lineNumber\">4</span>    <span class=\"hljs-built_in\">console</span>.log(data)\n<span class=\"lineNumber\">5</span>  } <span class=\"hljs-keyword\">catch</span> (e) {\n<span class=\"lineNumber\">6</span>    <span class=\"hljs-built_in\">console</span>.log(e)\n<span class=\"lineNumber\">7</span>  }\n<span class=\"lineNumber\">8</span>}</code></pre> \n\n<p>无论是异步函数<code>getJSON()</code>还是同步函数<code>JSON.parse()</code>都能被同一个<code>try...catch...</code>结构对异常进行处理，代码逻辑相对使用<code>Promise.then / catch</code>的方式来说会更清晰，可读性更强。</p>\n<p>也许可读性的评判更容易掺杂主观意识，但是对于异步<code>Debug</code>代码来说，<code>async/await</code>显然更轻松。</p>\n<p>为什么？我想有以下两点理由：</p>\n<ul>\n<li>在<code>then</code>中难以对箭头函数下断点</li>\n<li>即使是在 <code>then</code>中下了断点，类似单步步入的操作也不会得到预期的结果，原因在于这种调试方式只能在同步代码中使用。</li>\n</ul>\n<p>我们来看两个示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">const</span> makeRequest = <span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">2</span>   <span class=\"hljs-keyword\">return</span> callAPromise()\n<span class=\"lineNumber\">3</span>     .then(<span class=\"hljs-function\">() =></span> callAPromise())\n<span class=\"lineNumber\">4</span>     .then(<span class=\"hljs-function\">() =></span> callAPromise())\n<span class=\"lineNumber\">5</span>}\n<span class=\"lineNumber\">6</span><span class=\"hljs-comment\">// async / await</span>\n<span class=\"lineNumber\">7</span><span class=\"hljs-keyword\">const</span> makeRequest = <span class=\"hljs-keyword\">async</span>() => {\n<span class=\"lineNumber\">8</span>   <span class=\"hljs-keyword\">await</span> callAPromise()\n<span class=\"lineNumber\">9</span>   <span class=\"hljs-keyword\">await</span> callAPromise()\n<span class=\"lineNumber\">10</span>}</code></pre> \n\n<p>在调试过程中由于<code>await</code>的特殊性，我们可以像调试同步代码这么方便自然。</p>\n<blockquote>\n<p>另外，使用<code>async / await</code>语法，我们应该留心异步代码的平行加速问题。</p>\n</blockquote>\n<p>来看示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">delay</span>(<span class=\"hljs-params\">id</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =></span> {\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =></span> {\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`task <span class=\"hljs-subst\">${id}</span> finished.`</span>)\n<span class=\"lineNumber\">5</span>    }, <span class=\"hljs-number\">1000</span>)\n<span class=\"lineNumber\">6</span>  })\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">demo1</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">9</span>  <span class=\"hljs-keyword\">await</span> delay(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">10</span>  <span class=\"hljs-keyword\">await</span> delay(<span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">11</span>  <span class=\"hljs-keyword\">await</span> delay(<span class=\"hljs-number\">3</span>)\n<span class=\"lineNumber\">12</span>}\n<span class=\"lineNumber\">13</span>demo1()\n<span class=\"lineNumber\">14</span><span class=\"hljs-comment\">// 另一个 demo</span>\n<span class=\"lineNumber\">15</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">demo2</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-keyword\">const</span> p1 = delay(<span class=\"hljs-number\">1</span>)\n<span class=\"lineNumber\">17</span>  <span class=\"hljs-keyword\">const</span> p2 = delay(<span class=\"hljs-number\">2</span>)\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-keyword\">const</span> p3 = delay(<span class=\"hljs-number\">3</span>)\n<span class=\"lineNumber\">19</span>  <span class=\"hljs-keyword\">await</span> p1\n<span class=\"lineNumber\">20</span>  <span class=\"hljs-keyword\">await</span> p2\n<span class=\"lineNumber\">21</span>  <span class=\"hljs-keyword\">await</span> p3\n<span class=\"lineNumber\">22</span>}</code></pre> \n\n<p>对于没有异步执行顺序需求的<code>async/await</code>语法来说，我们可以一次性初始化其异步任务，然后再分别等待其结果即可。</p>\n<blockquote>\n<p>在重视<code>性能</code>的应用中，使用<code>async/await</code>语法可以减少内存的占用。</p>\n</blockquote>\n<p>在使用<code>new Promise</code>初始化时，我们创建<code>Promise</code>实例的函数即使是在处理程序转换<code>Promise</code>实例的状态时依然被保存在栈追踪信息内，然而我们知道这些信息随着初始化函数的返回其实已经没有必要存在了，但是<code>Javascript</code>引擎会在创建<code>Promise</code>时尽可能保存完整的调用栈，在抛出错误时调用栈可以由运行时的错误处理逻辑获取，故我们能在栈追踪信息中看到它们，最终占用一些内存，增加了计算和存储成本。</p>\n<p>如果我们使用<code>async/await</code>语法：</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">fooPromiseExecutor</span>(<span class=\"hljs-params\">resolve, reject</span>) </span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-built_in\">setTimeout</span>(reject, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-string\">'bar'</span>)\n<span class=\"lineNumber\">3</span>}\n<span class=\"lineNumber\">4</span> \n<span class=\"lineNumber\">5</span><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n<span class=\"lineNumber\">6</span>  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(fooPromiseExecutor)\n<span class=\"lineNumber\">7</span>}\n<span class=\"lineNumber\">8</span>foo()\n<span class=\"lineNumber\">9</span><span class=\"hljs-comment\">/// Uncaught (in promise) bar</span>\n<span class=\"lineNumber\">10</span><span class=\"hljs-comment\">// foo</span>\n<span class=\"lineNumber\">11</span><span class=\"hljs-comment\">// async function (async)</span>\n<span class=\"lineNumber\">12</span><span class=\"hljs-comment\">// foo</span></code></pre> \n\n<p>由于<code>fooPromiseExecutor</code>已经返回，故不在错误信息中了。</p>\n<p><code>Javascript</code>运行时可以简单地在嵌套函数中存储指向包含函数的指针，就如同对待同步函数一样，指针时机存储在内存中，用于在出错的时候生成错误信息，如此一来便省去了这“微小”的消耗。</p>\n<p>最后我想说，相对于使用<code>Promise</code>的实例方法来编写异步代码，使用<code>async/await</code>的语法，显然代码量将会减少🐶，何乐而不为？</p>\n<h1>4. Promisify</h1>\n<p><code>Promise</code>很棒，但是遵循常见的错误优先的回调风格的函数依然可以在许多场景下活跃着，无论是其开发者在编写代码的时候还未出现<code>Promise</code>，亦或是开发者更喜欢回调风格的范式，跟这些回调风格的函数打交道似乎无可避免。</p>\n<blockquote>\n<p>Nodejs 官方提供了 util.promisify 工具函数用于将传统回调风格的函数转换为返回<code>Promise</code>的函数。</p>\n</blockquote>\n<p>我们可以构建一个将<code>callback</code>风格的函数转换为<code>Promise</code>风格的函数的工具函数。</p>\n<pre><code class=\"hljs language-js\"><span class=\"lineNumber\">1</span><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">promisify</span>(<span class=\"hljs-params\">f, multiArgs = <span class=\"hljs-literal\">false</span></span>)</span>{\n<span class=\"lineNumber\">2</span>  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...args</span>) </span>{\n<span class=\"lineNumber\">3</span>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =></span> {\n<span class=\"lineNumber\">4</span>      <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">callback</span>(<span class=\"hljs-params\">err, ...results</span>) </span>{\n<span class=\"lineNumber\">5</span>        err ? reject(err) : resolve(multiArgs ? results : results[<span class=\"hljs-number\">0</span>])\n<span class=\"lineNumber\">6</span>      }\n<span class=\"lineNumber\">7</span>      args.push(callback)\n<span class=\"lineNumber\">8</span>      f.call(<span class=\"hljs-built_in\">this</span>, ...args)\n<span class=\"lineNumber\">9</span>    })\n<span class=\"lineNumber\">10</span>  }\n<span class=\"lineNumber\">11</span>}\n<span class=\"lineNumber\">12</span> \n<span class=\"lineNumber\">13</span><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>)\n<span class=\"lineNumber\">14</span><span class=\"hljs-keyword\">const</span> fsPromise = promisify(fs.readdir)\n<span class=\"lineNumber\">15</span>fsPromise(<span class=\"hljs-string\">'.'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> {\n<span class=\"lineNumber\">16</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'resolve'</span>, r);\n<span class=\"lineNumber\">17</span>}).catch(<span class=\"hljs-function\"><span class=\"hljs-params\">r</span> =></span> {\n<span class=\"lineNumber\">18</span>  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'reject'</span>, r);\n<span class=\"lineNumber\">19</span>})\n<span class=\"lineNumber\">20</span><span class=\"hljs-comment\">// output </span>\n<span class=\"lineNumber\">21</span>resolve [\n<span class=\"lineNumber\">22</span>  <span class=\"hljs-string\">'index.js'</span>\n<span class=\"lineNumber\">23</span>]</code></pre> \n\n<p>在这个转换过程中，我们将原来的函数包裹进去，并且返回一个可执行的函数，这个函数接收的参数跟原来的<code>回调风格</code>函数一致，只是将之转换为<code>Promise</code>风格的函数后，传参可以省略<code>回调函数</code>，我们在内部构建了一个回调函数，并且将之作为原函数的回调部分作为参数传给了返回函数。</p>\n<p>现在，我们将传统回调风格的函数转化为返回<code>Promise</code>的函数了，我们可以放心使用<code>Promise</code>的新特性了。</p>\n<h1>参考</h1>\n<ul>\n<li><a href=\"chrome-extension://bocbaocobfecmglnmeaeppambideimao/pdf/viewer.html?file=file%3A%2F%2F%2FUsers%2Fyi%2FDesktop%2Fexploring-es6.pdf\">Exploring ES6 - exploring-es6.pdf</a></li>\n<li><a href=\"https://stackoverflow.com/questions/2069763/difference-between-event-handlers-and-callbacks\">architecture - Difference between event handlers and callbacks - Stack Overflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/6348494/addeventlistener-vs-onclick\">javascript - addEventListener vs onclick - Stack Overflow</a></li>\n<li><a href=\"http://bluebirdjs.com/docs/getting-started.html\">Getting Started | bluebird</a></li>\n<li>JavaScript 高级程序设计</li>\n<li><a href=\"https://zh.javascript.info/\">现代 JavaScript 教程</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/javascript-promise-resolve-method/\">JavaScript | promise resolve() Method - GeeksforGeeks</a></li>\n<li><a href=\"https://itnext.io/error-handling-with-async-await-in-js-26c3f20bc06a\">Error handling with Async/Await in JS | by Ian Segers | ITNEXT</a></li>\n<li><a href=\"https://nodejs.dev/learn/understanding-javascript-promises\">Understanding JavaScript Promises</a></li>\n<li><a href=\"http://nodejs.cn/api/util/util_promisify_original.html\">util.promisify(original) | Node.js API 文档</a></li>\n</ul>\n","title":"Javascript,I promise - 异步编程","date":"2021/4/9","tags":["JavaScript"],"mainImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=1080","coverImg":"https://images.unsplash.com/photo-1611923973164-e0e5f7f69872?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=MnwxNjUyNjZ8MHwxfHJhbmRvbXx8fHx8fHx8fDE2MTc5NzU1MTI&ixlib=rb-1.2.1&q=80&w=400","intro":"Promise, JavaScript 世界中的异步处理对象.我阅读了 Dr.Axel 前辈的电子书,充满感激."}},"__N_SSG":true}